
./Debug/lab_2_3.elf:     file format elf32-littlearm


Disassembly of section .text:

20000000 <startup>:
#define B_RS 1

__attribute__((naked)) __attribute__((section (".start_section")) )
void startup ( void )
{
__asm__ volatile(" LDR R0,=0x2001C000\n");		/* set stack */
20000000:	4802      	ldr	r0, [pc, #8]	; (2000000c <startup+0xc>)
__asm__ volatile(" MOV SP,R0\n");
20000002:	4685      	mov	sp, r0
__asm__ volatile(" BL main\n");					/* call main */
20000004:	f000 f9d2 	bl	200003ac <main>
__asm__ volatile(".L1: B .L1\n");				/* never return */
20000008:	e7fe      	b.n	20000008 <startup+0x8>
}
2000000a:	46c0      	nop			; (mov r8, r8)
2000000c:	2001c000 	andcs	ip, r1, r0

20000010 <delay_250_ns>:
#define USBDM




void delay_250_ns(void) {
20000010:	b580      	push	{r7, lr}
20000012:	af00      	add	r7, sp, #0
	*STK_CTRL = 0;
20000014:	4b09      	ldr	r3, [pc, #36]	; (2000003c <delay_250_ns+0x2c>)
20000016:	2200      	movs	r2, #0
20000018:	601a      	str	r2, [r3, #0]
	*STK_LOAD = (168-1)/4;
2000001a:	4b09      	ldr	r3, [pc, #36]	; (20000040 <delay_250_ns+0x30>)
2000001c:	2229      	movs	r2, #41	; 0x29
2000001e:	601a      	str	r2, [r3, #0]
	*STK_VAL = 0;
20000020:	4b08      	ldr	r3, [pc, #32]	; (20000044 <delay_250_ns+0x34>)
20000022:	2200      	movs	r2, #0
20000024:	601a      	str	r2, [r3, #0]
	*STK_CTRL = 5;
20000026:	4b05      	ldr	r3, [pc, #20]	; (2000003c <delay_250_ns+0x2c>)
20000028:	2205      	movs	r2, #5
2000002a:	601a      	str	r2, [r3, #0]
	while(*STK_CTRL & 0x00010000 == 0);
2000002c:	46c0      	nop			; (mov r8, r8)
	*STK_CTRL = 0;
2000002e:	4b03      	ldr	r3, [pc, #12]	; (2000003c <delay_250_ns+0x2c>)
20000030:	2200      	movs	r2, #0
20000032:	601a      	str	r2, [r3, #0]
}
20000034:	46c0      	nop			; (mov r8, r8)
20000036:	46bd      	mov	sp, r7
20000038:	bd80      	pop	{r7, pc}
2000003a:	46c0      	nop			; (mov r8, r8)
2000003c:	e000e010 	and	lr, r0, r0, lsl r0
20000040:	e000e014 	and	lr, r0, r4, lsl r0
20000044:	e000e018 	and	lr, r0, r8, lsl r0

20000048 <delay_micro>:

void delay_micro(unsigned int ms) {
20000048:	b580      	push	{r7, lr}
2000004a:	b084      	sub	sp, #16
2000004c:	af00      	add	r7, sp, #0
2000004e:	6078      	str	r0, [r7, #4]
	#ifdef SIMULATOR
		ms /= 1000;
		ms++;
	#endif
	
	while(ms > 0) {
20000050:	e00d      	b.n	2000006e <delay_micro+0x26>
		for(int i = 0; i < 4; i++) {
20000052:	2300      	movs	r3, #0
20000054:	60fb      	str	r3, [r7, #12]
20000056:	e004      	b.n	20000062 <delay_micro+0x1a>
			delay_250_ns();
20000058:	f7ff ffda 	bl	20000010 <delay_250_ns>
		for(int i = 0; i < 4; i++) {
2000005c:	68fb      	ldr	r3, [r7, #12]
2000005e:	3301      	adds	r3, #1
20000060:	60fb      	str	r3, [r7, #12]
20000062:	68fb      	ldr	r3, [r7, #12]
20000064:	2b03      	cmp	r3, #3
20000066:	ddf7      	ble.n	20000058 <delay_micro+0x10>
		}
		ms--;
20000068:	687b      	ldr	r3, [r7, #4]
2000006a:	3b01      	subs	r3, #1
2000006c:	607b      	str	r3, [r7, #4]
	while(ms > 0) {
2000006e:	687b      	ldr	r3, [r7, #4]
20000070:	2b00      	cmp	r3, #0
20000072:	d1ee      	bne.n	20000052 <delay_micro+0xa>
	}
}
20000074:	46c0      	nop			; (mov r8, r8)
20000076:	46bd      	mov	sp, r7
20000078:	b004      	add	sp, #16
2000007a:	bd80      	pop	{r7, pc}

2000007c <delay_milli>:

void delay_milli(unsigned int ms) {
2000007c:	b580      	push	{r7, lr}
2000007e:	b082      	sub	sp, #8
20000080:	af00      	add	r7, sp, #0
20000082:	6078      	str	r0, [r7, #4]
	#ifdef SIMULATOR
		ms /= 1000;
		ms++;
	#endif
	
	while(ms > 0) {
20000084:	e007      	b.n	20000096 <delay_milli+0x1a>
		delay_micro(1000);
20000086:	23fa      	movs	r3, #250	; 0xfa
20000088:	009b      	lsls	r3, r3, #2
2000008a:	0018      	movs	r0, r3
2000008c:	f7ff ffdc 	bl	20000048 <delay_micro>
		ms--;
20000090:	687b      	ldr	r3, [r7, #4]
20000092:	3b01      	subs	r3, #1
20000094:	607b      	str	r3, [r7, #4]
	while(ms > 0) {
20000096:	687b      	ldr	r3, [r7, #4]
20000098:	2b00      	cmp	r3, #0
2000009a:	d1f4      	bne.n	20000086 <delay_milli+0xa>
	}
}
2000009c:	46c0      	nop			; (mov r8, r8)
2000009e:	46bd      	mov	sp, r7
200000a0:	b002      	add	sp, #8
200000a2:	bd80      	pop	{r7, pc}

200000a4 <ascii_ctrl_bit_set>:

void ascii_ctrl_bit_set(unsigned char c) {
200000a4:	b580      	push	{r7, lr}
200000a6:	b084      	sub	sp, #16
200000a8:	af00      	add	r7, sp, #0
200000aa:	0002      	movs	r2, r0
200000ac:	1dfb      	adds	r3, r7, #7
200000ae:	701a      	strb	r2, [r3, #0]
	unsigned char current = *GPIO_ODR_LOW;
200000b0:	4a09      	ldr	r2, [pc, #36]	; (200000d8 <ascii_ctrl_bit_set+0x34>)
200000b2:	210f      	movs	r1, #15
200000b4:	187b      	adds	r3, r7, r1
200000b6:	7812      	ldrb	r2, [r2, #0]
200000b8:	701a      	strb	r2, [r3, #0]
	*GPIO_ODR_LOW = B_SELECT | current | c;
200000ba:	187a      	adds	r2, r7, r1
200000bc:	1dfb      	adds	r3, r7, #7
200000be:	7812      	ldrb	r2, [r2, #0]
200000c0:	781b      	ldrb	r3, [r3, #0]
200000c2:	4313      	orrs	r3, r2
200000c4:	b2db      	uxtb	r3, r3
200000c6:	4a04      	ldr	r2, [pc, #16]	; (200000d8 <ascii_ctrl_bit_set+0x34>)
200000c8:	2104      	movs	r1, #4
200000ca:	430b      	orrs	r3, r1
200000cc:	b2db      	uxtb	r3, r3
200000ce:	7013      	strb	r3, [r2, #0]
}
200000d0:	46c0      	nop			; (mov r8, r8)
200000d2:	46bd      	mov	sp, r7
200000d4:	b004      	add	sp, #16
200000d6:	bd80      	pop	{r7, pc}
200000d8:	40021014 	andmi	r1, r2, r4, lsl r0

200000dc <ascii_ctrl_bit_clear>:

void ascii_ctrl_bit_clear(unsigned char c) {
200000dc:	b580      	push	{r7, lr}
200000de:	b084      	sub	sp, #16
200000e0:	af00      	add	r7, sp, #0
200000e2:	0002      	movs	r2, r0
200000e4:	1dfb      	adds	r3, r7, #7
200000e6:	701a      	strb	r2, [r3, #0]
	unsigned char current = *GPIO_ODR_LOW;
200000e8:	4a0c      	ldr	r2, [pc, #48]	; (2000011c <ascii_ctrl_bit_clear+0x40>)
200000ea:	210f      	movs	r1, #15
200000ec:	187b      	adds	r3, r7, r1
200000ee:	7812      	ldrb	r2, [r2, #0]
200000f0:	701a      	strb	r2, [r3, #0]
	*GPIO_ODR_LOW = B_SELECT | (current & ~c);
200000f2:	1dfb      	adds	r3, r7, #7
200000f4:	781b      	ldrb	r3, [r3, #0]
200000f6:	b25b      	sxtb	r3, r3
200000f8:	43db      	mvns	r3, r3
200000fa:	b25b      	sxtb	r3, r3
200000fc:	187a      	adds	r2, r7, r1
200000fe:	7812      	ldrb	r2, [r2, #0]
20000100:	b252      	sxtb	r2, r2
20000102:	4013      	ands	r3, r2
20000104:	b25b      	sxtb	r3, r3
20000106:	2204      	movs	r2, #4
20000108:	4313      	orrs	r3, r2
2000010a:	b25a      	sxtb	r2, r3
2000010c:	4b03      	ldr	r3, [pc, #12]	; (2000011c <ascii_ctrl_bit_clear+0x40>)
2000010e:	b2d2      	uxtb	r2, r2
20000110:	701a      	strb	r2, [r3, #0]
}
20000112:	46c0      	nop			; (mov r8, r8)
20000114:	46bd      	mov	sp, r7
20000116:	b004      	add	sp, #16
20000118:	bd80      	pop	{r7, pc}
2000011a:	46c0      	nop			; (mov r8, r8)
2000011c:	40021014 	andmi	r1, r2, r4, lsl r0

20000120 <ascii_write_controller>:

void ascii_write_controller(unsigned char byte) {
20000120:	b580      	push	{r7, lr}
20000122:	b082      	sub	sp, #8
20000124:	af00      	add	r7, sp, #0
20000126:	0002      	movs	r2, r0
20000128:	1dfb      	adds	r3, r7, #7
2000012a:	701a      	strb	r2, [r3, #0]
	ascii_ctrl_bit_set(B_E);
2000012c:	2040      	movs	r0, #64	; 0x40
2000012e:	f7ff ffb9 	bl	200000a4 <ascii_ctrl_bit_set>
	*GPIO_ODR_HIGH = byte;
20000132:	4a06      	ldr	r2, [pc, #24]	; (2000014c <ascii_write_controller+0x2c>)
20000134:	1dfb      	adds	r3, r7, #7
20000136:	781b      	ldrb	r3, [r3, #0]
20000138:	7013      	strb	r3, [r2, #0]
	delay_250_ns();
2000013a:	f7ff ff69 	bl	20000010 <delay_250_ns>
	ascii_ctrl_bit_clear(B_E);
2000013e:	2040      	movs	r0, #64	; 0x40
20000140:	f7ff ffcc 	bl	200000dc <ascii_ctrl_bit_clear>
}
20000144:	46c0      	nop			; (mov r8, r8)
20000146:	46bd      	mov	sp, r7
20000148:	b002      	add	sp, #8
2000014a:	bd80      	pop	{r7, pc}
2000014c:	40021015 	andmi	r1, r2, r5, lsl r0

20000150 <ascii_write_cmd>:

void ascii_write_cmd(unsigned char command) {
20000150:	b580      	push	{r7, lr}
20000152:	b082      	sub	sp, #8
20000154:	af00      	add	r7, sp, #0
20000156:	0002      	movs	r2, r0
20000158:	1dfb      	adds	r3, r7, #7
2000015a:	701a      	strb	r2, [r3, #0]
	ascii_ctrl_bit_clear(B_RS);
2000015c:	2001      	movs	r0, #1
2000015e:	f7ff ffbd 	bl	200000dc <ascii_ctrl_bit_clear>
	ascii_ctrl_bit_clear(B_RW);
20000162:	2002      	movs	r0, #2
20000164:	f7ff ffba 	bl	200000dc <ascii_ctrl_bit_clear>
	ascii_write_controller(command);
20000168:	1dfb      	adds	r3, r7, #7
2000016a:	781b      	ldrb	r3, [r3, #0]
2000016c:	0018      	movs	r0, r3
2000016e:	f7ff ffd7 	bl	20000120 <ascii_write_controller>
}
20000172:	46c0      	nop			; (mov r8, r8)
20000174:	46bd      	mov	sp, r7
20000176:	b002      	add	sp, #8
20000178:	bd80      	pop	{r7, pc}

2000017a <ascii_write_data>:

void ascii_write_data(unsigned char data) {
2000017a:	b580      	push	{r7, lr}
2000017c:	b082      	sub	sp, #8
2000017e:	af00      	add	r7, sp, #0
20000180:	0002      	movs	r2, r0
20000182:	1dfb      	adds	r3, r7, #7
20000184:	701a      	strb	r2, [r3, #0]
	ascii_ctrl_bit_set(B_RS);
20000186:	2001      	movs	r0, #1
20000188:	f7ff ff8c 	bl	200000a4 <ascii_ctrl_bit_set>
	ascii_ctrl_bit_clear(B_RW);
2000018c:	2002      	movs	r0, #2
2000018e:	f7ff ffa5 	bl	200000dc <ascii_ctrl_bit_clear>
	ascii_write_controller(data);
20000192:	1dfb      	adds	r3, r7, #7
20000194:	781b      	ldrb	r3, [r3, #0]
20000196:	0018      	movs	r0, r3
20000198:	f7ff ffc2 	bl	20000120 <ascii_write_controller>
}
2000019c:	46c0      	nop			; (mov r8, r8)
2000019e:	46bd      	mov	sp, r7
200001a0:	b002      	add	sp, #8
200001a2:	bd80      	pop	{r7, pc}

200001a4 <ascii_read_controller>:

unsigned char ascii_read_controller(void) {
200001a4:	b580      	push	{r7, lr}
200001a6:	b082      	sub	sp, #8
200001a8:	af00      	add	r7, sp, #0
	unsigned char return_value;
	ascii_ctrl_bit_set(B_E);
200001aa:	2040      	movs	r0, #64	; 0x40
200001ac:	f7ff ff7a 	bl	200000a4 <ascii_ctrl_bit_set>
	delay_250_ns();
200001b0:	f7ff ff2e 	bl	20000010 <delay_250_ns>
	delay_250_ns();
200001b4:	f7ff ff2c 	bl	20000010 <delay_250_ns>
	return_value = *GPIO_ODR_HIGH;
200001b8:	4a06      	ldr	r2, [pc, #24]	; (200001d4 <ascii_read_controller+0x30>)
200001ba:	1dfb      	adds	r3, r7, #7
200001bc:	7812      	ldrb	r2, [r2, #0]
200001be:	701a      	strb	r2, [r3, #0]
	ascii_ctrl_bit_clear(B_E);
200001c0:	2040      	movs	r0, #64	; 0x40
200001c2:	f7ff ff8b 	bl	200000dc <ascii_ctrl_bit_clear>
	return return_value;
200001c6:	1dfb      	adds	r3, r7, #7
200001c8:	781b      	ldrb	r3, [r3, #0]
}
200001ca:	0018      	movs	r0, r3
200001cc:	46bd      	mov	sp, r7
200001ce:	b002      	add	sp, #8
200001d0:	bd80      	pop	{r7, pc}
200001d2:	46c0      	nop			; (mov r8, r8)
200001d4:	40021015 	andmi	r1, r2, r5, lsl r0

200001d8 <ascii_read_status>:

unsigned char ascii_read_status(void) {
200001d8:	b590      	push	{r4, r7, lr}
200001da:	b083      	sub	sp, #12
200001dc:	af00      	add	r7, sp, #0
	unsigned char return_value;
	*GPIO_MODER &= 0x0000FFFF;
200001de:	4b0e      	ldr	r3, [pc, #56]	; (20000218 <ascii_read_status+0x40>)
200001e0:	681a      	ldr	r2, [r3, #0]
200001e2:	4b0d      	ldr	r3, [pc, #52]	; (20000218 <ascii_read_status+0x40>)
200001e4:	0412      	lsls	r2, r2, #16
200001e6:	0c12      	lsrs	r2, r2, #16
200001e8:	601a      	str	r2, [r3, #0]
	ascii_ctrl_bit_clear(B_RS);
200001ea:	2001      	movs	r0, #1
200001ec:	f7ff ff76 	bl	200000dc <ascii_ctrl_bit_clear>
	ascii_ctrl_bit_set(B_RW);
200001f0:	2002      	movs	r0, #2
200001f2:	f7ff ff57 	bl	200000a4 <ascii_ctrl_bit_set>
	return_value = ascii_read_controller();
200001f6:	1dfc      	adds	r4, r7, #7
200001f8:	f7ff ffd4 	bl	200001a4 <ascii_read_controller>
200001fc:	0003      	movs	r3, r0
200001fe:	7023      	strb	r3, [r4, #0]
	*GPIO_MODER |= 0x55550000;
20000200:	4b05      	ldr	r3, [pc, #20]	; (20000218 <ascii_read_status+0x40>)
20000202:	681a      	ldr	r2, [r3, #0]
20000204:	4b04      	ldr	r3, [pc, #16]	; (20000218 <ascii_read_status+0x40>)
20000206:	4905      	ldr	r1, [pc, #20]	; (2000021c <ascii_read_status+0x44>)
20000208:	430a      	orrs	r2, r1
2000020a:	601a      	str	r2, [r3, #0]
}
2000020c:	46c0      	nop			; (mov r8, r8)
2000020e:	0018      	movs	r0, r3
20000210:	46bd      	mov	sp, r7
20000212:	b003      	add	sp, #12
20000214:	bd90      	pop	{r4, r7, pc}
20000216:	46c0      	nop			; (mov r8, r8)
20000218:	40021000 	andmi	r1, r2, r0
2000021c:	55550000 	ldrbpl	r0, [r5, #-0]

20000220 <ascii_read_data>:

unsigned char ascii_read_data(void) {
20000220:	b590      	push	{r4, r7, lr}
20000222:	b083      	sub	sp, #12
20000224:	af00      	add	r7, sp, #0
	unsigned char return_value;
	*GPIO_MODER &= 0x0000FFFF;
20000226:	4b0e      	ldr	r3, [pc, #56]	; (20000260 <ascii_read_data+0x40>)
20000228:	681a      	ldr	r2, [r3, #0]
2000022a:	4b0d      	ldr	r3, [pc, #52]	; (20000260 <ascii_read_data+0x40>)
2000022c:	0412      	lsls	r2, r2, #16
2000022e:	0c12      	lsrs	r2, r2, #16
20000230:	601a      	str	r2, [r3, #0]
	ascii_ctrl_bit_set(B_RS);
20000232:	2001      	movs	r0, #1
20000234:	f7ff ff36 	bl	200000a4 <ascii_ctrl_bit_set>
	ascii_ctrl_bit_set(B_RW);
20000238:	2002      	movs	r0, #2
2000023a:	f7ff ff33 	bl	200000a4 <ascii_ctrl_bit_set>
	return_value = ascii_read_controller();
2000023e:	1dfc      	adds	r4, r7, #7
20000240:	f7ff ffb0 	bl	200001a4 <ascii_read_controller>
20000244:	0003      	movs	r3, r0
20000246:	7023      	strb	r3, [r4, #0]
	*GPIO_MODER |= 0x55550000;
20000248:	4b05      	ldr	r3, [pc, #20]	; (20000260 <ascii_read_data+0x40>)
2000024a:	681a      	ldr	r2, [r3, #0]
2000024c:	4b04      	ldr	r3, [pc, #16]	; (20000260 <ascii_read_data+0x40>)
2000024e:	4905      	ldr	r1, [pc, #20]	; (20000264 <ascii_read_data+0x44>)
20000250:	430a      	orrs	r2, r1
20000252:	601a      	str	r2, [r3, #0]
}
20000254:	46c0      	nop			; (mov r8, r8)
20000256:	0018      	movs	r0, r3
20000258:	46bd      	mov	sp, r7
2000025a:	b003      	add	sp, #12
2000025c:	bd90      	pop	{r4, r7, pc}
2000025e:	46c0      	nop			; (mov r8, r8)
20000260:	40021000 	andmi	r1, r2, r0
20000264:	55550000 	ldrbpl	r0, [r5, #-0]

20000268 <ascii_init>:

void ascii_init(void) {
20000268:	b580      	push	{r7, lr}
2000026a:	af00      	add	r7, sp, #0
	//Function set
	while((ascii_read_status() & 0x80) == 0x80);
2000026c:	46c0      	nop			; (mov r8, r8)
2000026e:	f7ff ffb3 	bl	200001d8 <ascii_read_status>
20000272:	0003      	movs	r3, r0
20000274:	001a      	movs	r2, r3
20000276:	2380      	movs	r3, #128	; 0x80
20000278:	4013      	ands	r3, r2
2000027a:	2b80      	cmp	r3, #128	; 0x80
2000027c:	d0f7      	beq.n	2000026e <ascii_init+0x6>
	delay_micro(8);
2000027e:	2008      	movs	r0, #8
20000280:	f7ff fee2 	bl	20000048 <delay_micro>
	ascii_write_cmd(0x38);
20000284:	2038      	movs	r0, #56	; 0x38
20000286:	f7ff ff63 	bl	20000150 <ascii_write_cmd>
	delay_micro(40);
2000028a:	2028      	movs	r0, #40	; 0x28
2000028c:	f7ff fedc 	bl	20000048 <delay_micro>
	
	//Display control
	while((ascii_read_status() & 0x80) == 0x80);
20000290:	46c0      	nop			; (mov r8, r8)
20000292:	f7ff ffa1 	bl	200001d8 <ascii_read_status>
20000296:	0003      	movs	r3, r0
20000298:	001a      	movs	r2, r3
2000029a:	2380      	movs	r3, #128	; 0x80
2000029c:	4013      	ands	r3, r2
2000029e:	2b80      	cmp	r3, #128	; 0x80
200002a0:	d0f7      	beq.n	20000292 <ascii_init+0x2a>
	delay_micro(8);
200002a2:	2008      	movs	r0, #8
200002a4:	f7ff fed0 	bl	20000048 <delay_micro>
	ascii_write_cmd(0x0E);
200002a8:	200e      	movs	r0, #14
200002aa:	f7ff ff51 	bl	20000150 <ascii_write_cmd>
	delay_micro(40);
200002ae:	2028      	movs	r0, #40	; 0x28
200002b0:	f7ff feca 	bl	20000048 <delay_micro>
	
	//Clear display
	while((ascii_read_status() & 0x80) == 0x80);
200002b4:	46c0      	nop			; (mov r8, r8)
200002b6:	f7ff ff8f 	bl	200001d8 <ascii_read_status>
200002ba:	0003      	movs	r3, r0
200002bc:	001a      	movs	r2, r3
200002be:	2380      	movs	r3, #128	; 0x80
200002c0:	4013      	ands	r3, r2
200002c2:	2b80      	cmp	r3, #128	; 0x80
200002c4:	d0f7      	beq.n	200002b6 <ascii_init+0x4e>
	delay_micro(8);
200002c6:	2008      	movs	r0, #8
200002c8:	f7ff febe 	bl	20000048 <delay_micro>
	ascii_write_cmd(1);
200002cc:	2001      	movs	r0, #1
200002ce:	f7ff ff3f 	bl	20000150 <ascii_write_cmd>
	delay_micro(2);
200002d2:	2002      	movs	r0, #2
200002d4:	f7ff feb8 	bl	20000048 <delay_micro>

	//Entry mode set
	while((ascii_read_status() & 0x80) == 0x80);
200002d8:	46c0      	nop			; (mov r8, r8)
200002da:	f7ff ff7d 	bl	200001d8 <ascii_read_status>
200002de:	0003      	movs	r3, r0
200002e0:	001a      	movs	r2, r3
200002e2:	2380      	movs	r3, #128	; 0x80
200002e4:	4013      	ands	r3, r2
200002e6:	2b80      	cmp	r3, #128	; 0x80
200002e8:	d0f7      	beq.n	200002da <ascii_init+0x72>
	delay_micro(8);
200002ea:	2008      	movs	r0, #8
200002ec:	f7ff feac 	bl	20000048 <delay_micro>
	ascii_write_cmd(0x06);
200002f0:	2006      	movs	r0, #6
200002f2:	f7ff ff2d 	bl	20000150 <ascii_write_cmd>
	delay_micro(40);
200002f6:	2028      	movs	r0, #40	; 0x28
200002f8:	f7ff fea6 	bl	20000048 <delay_micro>
}
200002fc:	46c0      	nop			; (mov r8, r8)
200002fe:	46bd      	mov	sp, r7
20000300:	bd80      	pop	{r7, pc}

20000302 <ascii_gotoxy>:

void ascii_gotoxy(int row, int column) {
20000302:	b580      	push	{r7, lr}
20000304:	b084      	sub	sp, #16
20000306:	af00      	add	r7, sp, #0
20000308:	6078      	str	r0, [r7, #4]
2000030a:	6039      	str	r1, [r7, #0]
	int address = row - 1;
2000030c:	687b      	ldr	r3, [r7, #4]
2000030e:	3b01      	subs	r3, #1
20000310:	60fb      	str	r3, [r7, #12]
	if (column == 2) {
20000312:	683b      	ldr	r3, [r7, #0]
20000314:	2b02      	cmp	r3, #2
20000316:	d102      	bne.n	2000031e <ascii_gotoxy+0x1c>
		address += 0x40;
20000318:	68fb      	ldr	r3, [r7, #12]
2000031a:	3340      	adds	r3, #64	; 0x40
2000031c:	60fb      	str	r3, [r7, #12]
	}
	ascii_write_cmd(0x80 | address);
2000031e:	68fb      	ldr	r3, [r7, #12]
20000320:	b25b      	sxtb	r3, r3
20000322:	2280      	movs	r2, #128	; 0x80
20000324:	4252      	negs	r2, r2
20000326:	4313      	orrs	r3, r2
20000328:	b25b      	sxtb	r3, r3
2000032a:	b2db      	uxtb	r3, r3
2000032c:	0018      	movs	r0, r3
2000032e:	f7ff ff0f 	bl	20000150 <ascii_write_cmd>
}
20000332:	46c0      	nop			; (mov r8, r8)
20000334:	46bd      	mov	sp, r7
20000336:	b004      	add	sp, #16
20000338:	bd80      	pop	{r7, pc}

2000033a <ascii_write_char>:

void ascii_write_char(unsigned char c) {
2000033a:	b580      	push	{r7, lr}
2000033c:	b082      	sub	sp, #8
2000033e:	af00      	add	r7, sp, #0
20000340:	0002      	movs	r2, r0
20000342:	1dfb      	adds	r3, r7, #7
20000344:	701a      	strb	r2, [r3, #0]
	while((ascii_read_status() & 0x80) == 0x80);
20000346:	46c0      	nop			; (mov r8, r8)
20000348:	f7ff ff46 	bl	200001d8 <ascii_read_status>
2000034c:	0003      	movs	r3, r0
2000034e:	001a      	movs	r2, r3
20000350:	2380      	movs	r3, #128	; 0x80
20000352:	4013      	ands	r3, r2
20000354:	2b80      	cmp	r3, #128	; 0x80
20000356:	d0f7      	beq.n	20000348 <ascii_write_char+0xe>
	delay_micro(8);
20000358:	2008      	movs	r0, #8
2000035a:	f7ff fe75 	bl	20000048 <delay_micro>
	ascii_write_data(c);
2000035e:	1dfb      	adds	r3, r7, #7
20000360:	781b      	ldrb	r3, [r3, #0]
20000362:	0018      	movs	r0, r3
20000364:	f7ff ff09 	bl	2000017a <ascii_write_data>
	delay_micro(45);
20000368:	202d      	movs	r0, #45	; 0x2d
2000036a:	f7ff fe6d 	bl	20000048 <delay_micro>
}
2000036e:	46c0      	nop			; (mov r8, r8)
20000370:	46bd      	mov	sp, r7
20000372:	b002      	add	sp, #8
20000374:	bd80      	pop	{r7, pc}

20000376 <app_init>:

void app_init() {
20000376:	b580      	push	{r7, lr}
20000378:	af00      	add	r7, sp, #0
	#ifdef USBDM
		*((unsigned long *) 0x40023830) = 0x18;
2000037a:	4b09      	ldr	r3, [pc, #36]	; (200003a0 <app_init+0x2a>)
2000037c:	2218      	movs	r2, #24
2000037e:	601a      	str	r2, [r3, #0]
		__asm volatile(" LDR R0,= 0x08000209\n BLX R0 \n");
20000380:	4831      	ldr	r0, [pc, #196]	; (20000448 <main+0x9c>)
20000382:	4780      	blx	r0
	#endif
	*GPIO_MODER &= 0x00000000;
20000384:	4b07      	ldr	r3, [pc, #28]	; (200003a4 <app_init+0x2e>)
20000386:	681b      	ldr	r3, [r3, #0]
20000388:	4b06      	ldr	r3, [pc, #24]	; (200003a4 <app_init+0x2e>)
2000038a:	2200      	movs	r2, #0
2000038c:	601a      	str	r2, [r3, #0]
	*GPIO_MODER |= 0x55555555;
2000038e:	4b05      	ldr	r3, [pc, #20]	; (200003a4 <app_init+0x2e>)
20000390:	681a      	ldr	r2, [r3, #0]
20000392:	4b04      	ldr	r3, [pc, #16]	; (200003a4 <app_init+0x2e>)
20000394:	4904      	ldr	r1, [pc, #16]	; (200003a8 <app_init+0x32>)
20000396:	430a      	orrs	r2, r1
20000398:	601a      	str	r2, [r3, #0]
}
2000039a:	46c0      	nop			; (mov r8, r8)
2000039c:	46bd      	mov	sp, r7
2000039e:	bd80      	pop	{r7, pc}
200003a0:	40023830 	andmi	r3, r2, r0, lsr r8
200003a4:	40021000 	andmi	r1, r2, r0
200003a8:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

200003ac <main>:

void main(int argc, char **argv)
{
200003ac:	b590      	push	{r4, r7, lr}
200003ae:	b087      	sub	sp, #28
200003b0:	af00      	add	r7, sp, #0
200003b2:	6078      	str	r0, [r7, #4]
200003b4:	6039      	str	r1, [r7, #0]
	char *s;
	char test1[] = "Test";
200003b6:	240c      	movs	r4, #12
200003b8:	193b      	adds	r3, r7, r4
200003ba:	4a21      	ldr	r2, [pc, #132]	; (20000440 <main+0x94>)
200003bc:	6811      	ldr	r1, [r2, #0]
200003be:	6019      	str	r1, [r3, #0]
200003c0:	7912      	ldrb	r2, [r2, #4]
200003c2:	711a      	strb	r2, [r3, #4]
	char test2[] = "123";
200003c4:	2308      	movs	r3, #8
200003c6:	18fb      	adds	r3, r7, r3
200003c8:	4a1e      	ldr	r2, [pc, #120]	; (20000444 <main+0x98>)
200003ca:	601a      	str	r2, [r3, #0]
	
	app_init();
200003cc:	f7ff ffd3 	bl	20000376 <app_init>
	ascii_init();
200003d0:	f7ff ff4a 	bl	20000268 <ascii_init>
	delay_milli(1);
200003d4:	2001      	movs	r0, #1
200003d6:	f7ff fe51 	bl	2000007c <delay_milli>
	ascii_gotoxy(1,1);
200003da:	2101      	movs	r1, #1
200003dc:	2001      	movs	r0, #1
200003de:	f7ff ff90 	bl	20000302 <ascii_gotoxy>
	delay_milli(1);
200003e2:	2001      	movs	r0, #1
200003e4:	f7ff fe4a 	bl	2000007c <delay_milli>
	s = test1;
200003e8:	193b      	adds	r3, r7, r4
200003ea:	617b      	str	r3, [r7, #20]
	while(*s) {
200003ec:	e006      	b.n	200003fc <main+0x50>
		ascii_write_char(*s++);
200003ee:	697b      	ldr	r3, [r7, #20]
200003f0:	1c5a      	adds	r2, r3, #1
200003f2:	617a      	str	r2, [r7, #20]
200003f4:	781b      	ldrb	r3, [r3, #0]
200003f6:	0018      	movs	r0, r3
200003f8:	f7ff ff9f 	bl	2000033a <ascii_write_char>
	while(*s) {
200003fc:	697b      	ldr	r3, [r7, #20]
200003fe:	781b      	ldrb	r3, [r3, #0]
20000400:	2b00      	cmp	r3, #0
20000402:	d1f4      	bne.n	200003ee <main+0x42>
	}
	delay_milli(1);
20000404:	2001      	movs	r0, #1
20000406:	f7ff fe39 	bl	2000007c <delay_milli>
	ascii_gotoxy(1,2);
2000040a:	2102      	movs	r1, #2
2000040c:	2001      	movs	r0, #1
2000040e:	f7ff ff78 	bl	20000302 <ascii_gotoxy>
	
	delay_milli(1);
20000412:	2001      	movs	r0, #1
20000414:	f7ff fe32 	bl	2000007c <delay_milli>
	s = test2;
20000418:	2308      	movs	r3, #8
2000041a:	18fb      	adds	r3, r7, r3
2000041c:	617b      	str	r3, [r7, #20]
	while(*s) {
2000041e:	e006      	b.n	2000042e <main+0x82>
		ascii_write_char(*s++);
20000420:	697b      	ldr	r3, [r7, #20]
20000422:	1c5a      	adds	r2, r3, #1
20000424:	617a      	str	r2, [r7, #20]
20000426:	781b      	ldrb	r3, [r3, #0]
20000428:	0018      	movs	r0, r3
2000042a:	f7ff ff86 	bl	2000033a <ascii_write_char>
	while(*s) {
2000042e:	697b      	ldr	r3, [r7, #20]
20000430:	781b      	ldrb	r3, [r3, #0]
20000432:	2b00      	cmp	r3, #0
20000434:	d1f4      	bne.n	20000420 <main+0x74>
	}
	return 0;
20000436:	46c0      	nop			; (mov r8, r8)
}
20000438:	46bd      	mov	sp, r7
2000043a:	b007      	add	sp, #28
2000043c:	bd90      	pop	{r4, r7, pc}
2000043e:	46c0      	nop			; (mov r8, r8)
20000440:	2000044c 	andcs	r0, r0, ip, asr #8
20000444:	00333231 	eorseq	r3, r3, r1, lsr r2
20000448:	08000209 	stmdaeq	r0, {r0, r3, r9}
2000044c:	74736554 	ldrbtvc	r6, [r3], #-1364	; 0xfffffaac
20000450:	00000000 	andeq	r0, r0, r0

Disassembly of section .debug_info:

00000000 <.debug_info>:
   0:	0000030a 	andeq	r0, r0, sl, lsl #6
   4:	00000004 	andeq	r0, r0, r4
   8:	01040000 	mrseq	r0, (UNDEF: 4)
   c:	0000000c 	andeq	r0, r0, ip
  10:	0001be0c 	andeq	fp, r1, ip, lsl #28
  14:	00023d00 	andeq	r3, r2, r0, lsl #26
	...
  24:	016e0200 	cmneq	lr, r0, lsl #4
  28:	b6010000 	strlt	r0, [r1], -r0
  2c:	200003ac 	andcs	r0, r0, ip, lsr #7
  30:	0000009c 	muleq	r0, ip, r0
  34:	007f9c01 	rsbseq	r9, pc, r1, lsl #24
  38:	9e030000 	cdpls	0, 0, cr0, cr3, cr0, {0}
  3c:	01000001 	tsteq	r0, r1
  40:	00007fb6 			; <UNDEFINED> instruction: 0x00007fb6
  44:	5c910200 	lfmpl	f0, 4, [r1], {0}
  48:	00028a03 	andeq	r8, r2, r3, lsl #20
  4c:	86b60100 	ldrthi	r0, [r6], r0, lsl #2
  50:	02000000 	andeq	r0, r0, #0
  54:	73045891 	movwvc	r5, #18577	; 0x4891
  58:	8cb80100 	ldfhis	f0, [r8]
  5c:	02000000 	andeq	r0, r0, #0
  60:	a3056c91 	movwge	r6, #23697	; 0x5c91
  64:	01000001 	tsteq	r0, r1
  68:	000099b9 			; <UNDEFINED> instruction: 0x000099b9
  6c:	64910200 	ldrvs	r0, [r1], #512	; 0x200
  70:	0001a905 	andeq	sl, r1, r5, lsl #18
  74:	b0ba0100 	adcslt	r0, sl, r0, lsl #2
  78:	02000000 	andeq	r0, r0, #0
  7c:	06006091 			; <UNDEFINED> instruction: 0x06006091
  80:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
  84:	04070074 	streq	r0, [r7], #-116	; 0xffffff8c
  88:	0000008c 	andeq	r0, r0, ip, lsl #1
  8c:	00920407 	addseq	r0, r2, r7, lsl #8
  90:	01080000 	mrseq	r0, (UNDEF: 8)
  94:	00016908 	andeq	r6, r1, r8, lsl #18
  98:	00920900 	addseq	r0, r2, r0, lsl #18
  9c:	00a90000 	adceq	r0, r9, r0
  a0:	a90a0000 	stmdbge	sl, {}	; <UNPREDICTABLE>
  a4:	04000000 	streq	r0, [r0], #-0
  a8:	07040800 	streq	r0, [r4, -r0, lsl #16]
  ac:	000000a4 	andeq	r0, r0, r4, lsr #1
  b0:	00009209 	andeq	r9, r0, r9, lsl #4
  b4:	0000c000 	andeq	ip, r0, r0
  b8:	00a90a00 	adceq	r0, r9, r0, lsl #20
  bc:	00030000 	andeq	r0, r3, r0
  c0:	0001800b 	andeq	r8, r1, fp
  c4:	76ad0100 	strtvc	r0, [sp], r0, lsl #2
  c8:	36200003 	strtcc	r0, [r0], -r3
  cc:	01000000 	mrseq	r0, (UNDEF: 0)
  d0:	00fb029c 	smlalseq	r0, fp, ip, r2
  d4:	a6010000 	strge	r0, [r1], -r0
  d8:	2000033a 	andcs	r0, r0, sl, lsr r3
  dc:	0000003c 	andeq	r0, r0, ip, lsr r0
  e0:	00f39c01 	rscseq	r9, r3, r1, lsl #24
  e4:	630c0000 	movwvs	r0, #49152	; 0xc000
  e8:	f3a60100 	vaddw.u32	q0, q3, d0
  ec:	02000000 	andeq	r0, r0, #0
  f0:	08007791 	stmdaeq	r0, {r0, r4, r7, r8, r9, sl, ip, sp, lr}
  f4:	01600801 	cmneq	r0, r1, lsl #16
  f8:	73020000 	movwvc	r0, #8192	; 0x2000
  fc:	01000001 	tsteq	r0, r1
 100:	0003029e 	muleq	r3, lr, r2
 104:	00003820 	andeq	r3, r0, r0, lsr #16
 108:	3a9c0100 	bcc	fe700510 <main+0xde700164>
 10c:	0c000001 	stceq	0, cr0, [r0], {1}
 110:	00776f72 	rsbseq	r6, r7, r2, ror pc
 114:	007f9e01 	rsbseq	r9, pc, r1, lsl #28
 118:	91020000 	mrsls	r0, (UNDEF: 2)
 11c:	01af036c 			; <UNDEFINED> instruction: 0x01af036c
 120:	9e010000 	cdpls	0, 0, cr0, cr1, cr0, {0}
 124:	0000007f 	andeq	r0, r0, pc, ror r0
 128:	05689102 	strbeq	r9, [r8, #-258]!	; 0xfffffefe
 12c:	0000013c 	andeq	r0, r0, ip, lsr r1
 130:	007f9f01 	rsbseq	r9, pc, r1, lsl #30
 134:	91020000 	mrsls	r0, (UNDEF: 2)
 138:	8f0d0074 	svchi	0x000d0074
 13c:	01000002 	tsteq	r0, r2
 140:	00026884 	andeq	r6, r2, r4, lsl #17
 144:	00009a20 	andeq	r9, r0, r0, lsr #20
 148:	0e9c0100 	fmleqe	f0, f4, f0
 14c:	00000144 	andeq	r0, r0, r4, asr #2
 150:	00f37b01 	rscseq	r7, r3, r1, lsl #22
 154:	02200000 	eoreq	r0, r0, #0
 158:	00482000 	subeq	r2, r8, r0
 15c:	9c010000 	stcls	0, cr0, [r1], {-0}
 160:	00000173 	andeq	r0, r0, r3, ror r1
 164:	00012f05 	andeq	r2, r1, r5, lsl #30
 168:	f37c0100 	vrhadd.u<illegal width 64>	d16, d12, d0
 16c:	02000000 	andeq	r0, r0, #0
 170:	0e006f91 	mcreq	15, 0, r6, cr0, cr1, {4}
 174:	0000010c 	andeq	r0, r0, ip, lsl #2
 178:	00f37201 	rscseq	r7, r3, r1, lsl #4
 17c:	01d80000 	bicseq	r0, r8, r0
 180:	00482000 	subeq	r2, r8, r0
 184:	9c010000 	stcls	0, cr0, [r1], {-0}
 188:	0000019b 	muleq	r0, fp, r1
 18c:	00012f05 	andeq	r2, r1, r5, lsl #30
 190:	f3730100 	vrhadd.u<illegal width 64>	d16, d3, d0
 194:	02000000 	andeq	r0, r0, #0
 198:	0e006f91 	mcreq	15, 0, r6, cr0, cr1, {4}
 19c:	000000c6 	andeq	r0, r0, r6, asr #1
 1a0:	00f36801 	rscseq	r6, r3, r1, lsl #16
 1a4:	01a40000 			; <UNDEFINED> instruction: 0x01a40000
 1a8:	00342000 	eorseq	r2, r4, r0
 1ac:	9c010000 	stcls	0, cr0, [r1], {-0}
 1b0:	000001c3 	andeq	r0, r0, r3, asr #3
 1b4:	00012f05 	andeq	r2, r1, r5, lsl #30
 1b8:	f3690100 	vrhadd.u32	d16, d9, d0
 1bc:	02000000 	andeq	r0, r0, #0
 1c0:	02007791 	andeq	r7, r0, #38010880	; 0x2440000
 1c4:	0000011e 	andeq	r0, r0, lr, lsl r1
 1c8:	017a6201 	cmneq	sl, r1, lsl #4
 1cc:	002a2000 	eoreq	r2, sl, r0
 1d0:	9c010000 	stcls	0, cr0, [r1], {-0}
 1d4:	000001e7 	andeq	r0, r0, r7, ror #3
 1d8:	00014f03 	andeq	r4, r1, r3, lsl #30
 1dc:	f3620100 	vrhadd.u32	d16, d2, d0
 1e0:	02000000 	andeq	r0, r0, #0
 1e4:	02007791 	andeq	r7, r0, #38010880	; 0x2440000
 1e8:	00000189 	andeq	r0, r0, r9, lsl #3
 1ec:	01505c01 	cmpeq	r0, r1, lsl #24
 1f0:	002a2000 	eoreq	r2, sl, r0
 1f4:	9c010000 	stcls	0, cr0, [r1], {-0}
 1f8:	0000020b 	andeq	r0, r0, fp, lsl #4
 1fc:	0001b603 	andeq	fp, r1, r3, lsl #12
 200:	f35c0100 	vrhadd.u16	d16, d12, d0
 204:	02000000 	andeq	r0, r0, #0
 208:	02007791 	andeq	r7, r0, #38010880	; 0x2440000
 20c:	000000dc 	ldrdeq	r0, [r0], -ip
 210:	01205501 			; <UNDEFINED> instruction: 0x01205501
 214:	00302000 	eorseq	r2, r0, r0
 218:	9c010000 	stcls	0, cr0, [r1], {-0}
 21c:	0000022f 	andeq	r0, r0, pc, lsr #4
 220:	00019903 	andeq	r9, r1, r3, lsl #18
 224:	f3550100 	vrhadd.u16	d16, d5, d0
 228:	02000000 	andeq	r0, r0, #0
 22c:	0f007791 	svceq	0x00007791
 230:	000000b1 	strheq	r0, [r0], -r1
 234:	00dc5001 	sbcseq	r5, ip, r1
 238:	00442000 	subeq	r2, r4, r0
 23c:	9c010000 	stcls	0, cr0, [r1], {-0}
 240:	0000025f 	andeq	r0, r0, pc, asr r2
 244:	0100630c 	tsteq	r0, ip, lsl #6
 248:	0000f350 	andeq	pc, r0, r0, asr r3	; <UNPREDICTABLE>
 24c:	6f910200 	svcvs	0x00910200
 250:	00022205 	andeq	r2, r2, r5, lsl #4
 254:	f3510100 	vrhadd.u16	d16, d1, d0
 258:	02000000 	andeq	r0, r0, #0
 25c:	0f007791 	svceq	0x00007791
 260:	0000022a 	andeq	r0, r0, sl, lsr #4
 264:	00a44b01 	adceq	r4, r4, r1, lsl #22
 268:	00382000 	eorseq	r2, r8, r0
 26c:	9c010000 	stcls	0, cr0, [r1], {-0}
 270:	0000028f 	andeq	r0, r0, pc, lsl #5
 274:	0100630c 	tsteq	r0, ip, lsl #6
 278:	0000f34b 	andeq	pc, r0, fp, asr #6
 27c:	6f910200 	svcvs	0x00910200
 280:	00022205 	andeq	r2, r2, r5, lsl #4
 284:	f34c0100 	vrhadd.u8	d16, d12, d0
 288:	02000000 	andeq	r0, r0, #0
 28c:	02007791 	andeq	r7, r0, #38010880	; 0x2440000
 290:	00000000 	andeq	r0, r0, r0
 294:	007c3f01 	rsbseq	r3, ip, r1, lsl #30
 298:	00282000 	eoreq	r2, r8, r0
 29c:	9c010000 	stcls	0, cr0, [r1], {-0}
 2a0:	000002b2 			; <UNDEFINED> instruction: 0x000002b2
 2a4:	00736d0c 	rsbseq	r6, r3, ip, lsl #26
 2a8:	00a93f01 	adceq	r3, r9, r1, lsl #30
 2ac:	91020000 	mrsls	r0, (UNDEF: 2)
 2b0:	54020074 	strpl	r0, [r2], #-116	; 0xffffff8c
 2b4:	01000001 	tsteq	r0, r1
 2b8:	00004831 	andeq	r4, r0, r1, lsr r8
 2bc:	00003420 	andeq	r3, r0, r0, lsr #8
 2c0:	eb9c0100 	bl	fe7006c8 <main+0xde70031c>
 2c4:	0c000002 	stceq	0, cr0, [r0], {2}
 2c8:	0100736d 	tsteq	r0, sp, ror #6
 2cc:	0000a931 	andeq	sl, r0, r1, lsr r9
 2d0:	6c910200 	lfmvs	f0, 4, [r1], {0}
 2d4:	00005210 	andeq	r5, r0, r0, lsl r2
 2d8:	00001620 	andeq	r1, r0, r0, lsr #12
 2dc:	00690400 	rsbeq	r0, r9, r0, lsl #8
 2e0:	007f3801 	rsbseq	r3, pc, r1, lsl #16
 2e4:	91020000 	mrsls	r0, (UNDEF: 2)
 2e8:	11000074 	tstne	r0, r4, ror r0
 2ec:	00000215 	andeq	r0, r0, r5, lsl r2
 2f0:	00102801 	andseq	r2, r0, r1, lsl #16
 2f4:	00382000 	eorseq	r2, r8, r0
 2f8:	9c010000 	stcls	0, cr0, [r1], {-0}
 2fc:	0000f311 	andeq	pc, r0, r1, lsl r3	; <UNPREDICTABLE>
 300:	001b0100 	andseq	r0, fp, r0, lsl #2
 304:	0c200000 	stceq	0, cr0, [r0], #-0
 308:	01000000 	mrseq	r0, (UNDEF: 0)
 30c:	Address 0x0000030c is out of bounds.


Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
   0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
   4:	030b130e 	movweq	r1, #45838	; 0xb30e
   8:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
   c:	10011117 	andne	r1, r1, r7, lsl r1
  10:	02000017 	andeq	r0, r0, #23
  14:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
  18:	0b3a0e03 	bleq	e8382c <startup-0x1f17c7d4>
  1c:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
  20:	06120111 			; <UNDEFINED> instruction: 0x06120111
  24:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
  28:	00130119 	andseq	r0, r3, r9, lsl r1
  2c:	00050300 	andeq	r0, r5, r0, lsl #6
  30:	0b3a0e03 	bleq	e83844 <startup-0x1f17c7bc>
  34:	13490b3b 	movtne	r0, #39739	; 0x9b3b
  38:	00001802 	andeq	r1, r0, r2, lsl #16
  3c:	03003404 	movweq	r3, #1028	; 0x404
  40:	3b0b3a08 	blcc	2ce868 <startup-0x1fd31798>
  44:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
  48:	05000018 	streq	r0, [r0, #-24]	; 0xffffffe8
  4c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
  50:	0b3b0b3a 	bleq	ec2d40 <startup-0x1f13d2c0>
  54:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
  58:	24060000 	strcs	r0, [r6], #-0
  5c:	3e0b0b00 	vmlacc.f64	d0, d11, d0
  60:	0008030b 	andeq	r0, r8, fp, lsl #6
  64:	000f0700 	andeq	r0, pc, r0, lsl #14
  68:	13490b0b 	movtne	r0, #39691	; 0x9b0b
  6c:	24080000 	strcs	r0, [r8], #-0
  70:	3e0b0b00 	vmlacc.f64	d0, d11, d0
  74:	000e030b 	andeq	r0, lr, fp, lsl #6
  78:	01010900 	tsteq	r1, r0, lsl #18
  7c:	13011349 	movwne	r1, #4937	; 0x1349
  80:	210a0000 	mrscs	r0, (UNDEF: 10)
  84:	2f134900 	svccs	0x00134900
  88:	0b00000b 	bleq	bc <startup-0x1fffff44>
  8c:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
  90:	0b3a0e03 	bleq	e838a4 <startup-0x1f17c75c>
  94:	01110b3b 	tsteq	r1, fp, lsr fp
  98:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
  9c:	00194297 	mulseq	r9, r7, r2
  a0:	00050c00 	andeq	r0, r5, r0, lsl #24
  a4:	0b3a0803 	bleq	e820b8 <startup-0x1f17df48>
  a8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
  ac:	00001802 	andeq	r1, r0, r2, lsl #16
  b0:	3f002e0d 	svccc	0x00002e0d
  b4:	3a0e0319 	bcc	380d20 <startup-0x1fc7f2e0>
  b8:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
  bc:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
  c0:	96184006 	ldrls	r4, [r8], -r6
  c4:	00001942 	andeq	r1, r0, r2, asr #18
  c8:	3f012e0e 	svccc	0x00012e0e
  cc:	3a0e0319 	bcc	380d38 <startup-0x1fc7f2c8>
  d0:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
  d4:	11134919 	tstne	r3, r9, lsl r9
  d8:	40061201 	andmi	r1, r6, r1, lsl #4
  dc:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
  e0:	00001301 	andeq	r1, r0, r1, lsl #6
  e4:	3f012e0f 	svccc	0x00012e0f
  e8:	3a0e0319 	bcc	380d54 <startup-0x1fc7f2ac>
  ec:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
  f0:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
  f4:	97184006 	ldrls	r4, [r8, -r6]
  f8:	13011942 	movwne	r1, #6466	; 0x1942
  fc:	0b100000 	bleq	400104 <startup-0x1fbffefc>
 100:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
 104:	11000006 	tstne	r0, r6
 108:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
 10c:	0b3a0e03 	bleq	e83920 <startup-0x1f17c6e0>
 110:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 114:	06120111 			; <UNDEFINED> instruction: 0x06120111
 118:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 11c:	00000019 	andeq	r0, r0, r9, lsl r0

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	00000024 	andeq	r0, r0, r4, lsr #32
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	20000010 	andcs	r0, r0, r0, lsl r0
  14:	00000438 	andeq	r0, r0, r8, lsr r4
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	20000010 	andcs	r0, r0, r0, lsl r0
   4:	20000448 	andcs	r0, r0, r8, asr #8
   8:	20000000 	andcs	r0, r0, r0
   c:	2000000c 	andcs	r0, r0, ip
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
   0:	00000144 	andeq	r0, r0, r4, asr #2
   4:	006d0002 	rsbeq	r0, sp, r2
   8:	01020000 	mrseq	r0, (UNDEF: 2)
   c:	000d0efb 	strdeq	r0, [sp], -fp
  10:	01010101 	tsteq	r1, r1, lsl #2
  14:	01000000 	mrseq	r0, (UNDEF: 0)
  18:	43010000 	movwmi	r0, #4096	; 0x1000
  1c:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
  20:	2f737265 	svccs	0x00737265
  24:	77697265 	strbvc	r7, [r9, -r5, ror #4]!
  28:	442f7365 	strtmi	r7, [pc], #-869	; 30 <startup-0x1fffffd0>
  2c:	6c6e776f 	stclvs	7, cr7, [lr], #-444	; 0xfffffe44
  30:	7364616f 	cmnvc	r4, #-1073741797	; 0xc000001b
  34:	5441442f 	strbpl	r4, [r1], #-1071	; 0xfffffbd1
  38:	2d373130 	ldfcss	f3, [r7, #-192]!	; 0xffffff40
  3c:	7473616d 	ldrbtvc	r6, [r3], #-365	; 0xfffffe93
  40:	4c2f7265 	sfmmi	f7, 4, [pc], #-404	; fffffeb4 <main+0xdffffb08>
  44:	726f6261 	rsbvc	r6, pc, #268435462	; 0x10000006
  48:	6f697461 	svcvs	0x00697461
  4c:	4c2f316e 	stfmis	f3, [pc], #-440	; fffffe9c <main+0xdffffaf0>
  50:	726f6261 	rsbvc	r6, pc, #268435462	; 0x10000006
  54:	6f697461 	svcvs	0x00697461
  58:	6966736e 	stmdbvs	r6!, {r1, r2, r3, r5, r6, r8, r9, ip, sp, lr}^
  5c:	4372656c 	cmnmi	r2, #108, 10	; 0x1b000000
  60:	62616c2f 	rsbvs	r6, r1, #12032	; 0x2f00
  64:	00335f32 	eorseq	r5, r3, r2, lsr pc
  68:	61747300 	cmnvs	r4, r0, lsl #6
  6c:	70757472 	rsbsvc	r7, r5, r2, ror r4
  70:	0100632e 	tsteq	r0, lr, lsr #6
  74:	00000000 	andeq	r0, r0, r0
  78:	00000205 	andeq	r0, r0, r5, lsl #4
  7c:	1b032000 	blne	c8084 <startup-0x1ff37f7c>
  80:	21211301 			; <UNDEFINED> instruction: 0x21211301
  84:	0302212f 	movweq	r2, #8495	; 0x212f
  88:	00010100 	andeq	r0, r1, r0, lsl #2
  8c:	00100205 	andseq	r0, r0, r5, lsl #4
  90:	27032000 	strcs	r2, [r3, -r0]
  94:	3d3d2f01 	ldccc	15, cr2, [sp, #-4]!
  98:	3d213d3d 	stccc	13, cr3, [r1, #-244]!	; 0xffffff0c
  9c:	002150a0 	eoreq	r5, r1, r0, lsr #1
  a0:	3d030402 	cfstrscc	mvf0, [r3, #-8]
  a4:	03040200 	movweq	r0, #16896	; 0x4200
  a8:	0402002d 	streq	r0, [r2], #-45	; 0xffffffd3
  ac:	063c0601 	ldrteq	r0, [ip], -r1, lsl #12
  b0:	4c42383f 	mcrrmi	8, 3, r3, r2, cr15
  b4:	3a592150 	bcc	16485fc <startup-0x1e9b7a04>
  b8:	59674c40 	stmdbpl	r7!, {r6, sl, fp, lr}^
  bc:	596768ad 	stmdbpl	r7!, {r0, r2, r3, r5, r7, fp, sp, lr}^
  c0:	3d6776f3 	stclcc	6, cr7, [r7, #-972]!	; 0xfffffc34
  c4:	683d2f4b 	ldmdavs	sp!, {r0, r1, r3, r6, r8, r9, sl, fp, sp}
  c8:	593d3d67 	ldmdbpl	sp!, {r0, r1, r2, r5, r6, r8, sl, fp, ip, sp}
  cc:	3d3d674c 	ldccc	7, cr6, [sp, #-304]!	; 0xfffffed0
  d0:	3d3e4c59 	ldccc	12, cr4, [lr, #-356]!	; 0xfffffe9c
  d4:	3d4b2f2f 	stclcc	15, cr2, [fp, #-188]	; 0xffffff44
  d8:	673e762f 	ldrvs	r7, [lr, -pc, lsr #12]!
  dc:	67593d3d 	smmlarvs	r9, sp, sp, r3
  e0:	3d673ea0 	stclcc	14, cr3, [r7, #-640]!	; 0xfffffd80
  e4:	a067593d 	rsbge	r5, r7, sp, lsr r9
  e8:	04020030 	streq	r0, [r2], #-48	; 0xffffffd0
  ec:	06200601 	strteq	r0, [r0], -r1, lsl #12
  f0:	3f3d3d83 	svccc	0x003d3d83
  f4:	01040200 	mrseq	r0, R12_usr
  f8:	83062006 	movwhi	r2, #24582	; 0x6006
  fc:	003f3d3d 	eorseq	r3, pc, sp, lsr sp	; <UNPREDICTABLE>
 100:	06010402 	streq	r0, [r1], -r2, lsl #8
 104:	3d830620 	stccc	6, cr0, [r3, #128]	; 0x80
 108:	02003f3d 	andeq	r3, r0, #61, 30	; 0xf4
 10c:	20060104 	andcs	r0, r6, r4, lsl #2
 110:	3d3d8306 	ldccc	3, cr8, [sp, #-24]!	; 0xffffffe8
 114:	3d593e3d 	ldclcc	14, cr3, [r9, #-244]	; 0xffffff0c
 118:	4c9f3e3d 	ldcmi	14, cr3, [pc], {61}	; 0x3d
 11c:	04020067 	streq	r0, [r2], #-103	; 0xffffff99
 120:	06200601 	strteq	r0, [r0], -r1, lsl #12
 124:	3d593d83 	ldclcc	13, cr3, [r9, #-524]	; 0xfffffdf4
 128:	303d304c 	eorscc	r3, sp, ip, asr #32
 12c:	5a936759 	bpl	fe4d9e98 <main+0xde4d9aec>
 130:	2f2f4c75 	svccs	0x002f4c75
 134:	2f3d4b3d 	svccs	0x003d4b3d
 138:	3d4d7321 	stclcc	3, cr7, [sp, #-132]	; 0xffffff7c
 13c:	213d3d4c 	teqcs	sp, ip, asr #26
 140:	02214d73 	eoreq	r4, r1, #7360	; 0x1cc0
 144:	0101000a 	tsteq	r1, sl

Disassembly of section .debug_str:

00000000 <.debug_str>:
   0:	616c6564 	cmnvs	ip, r4, ror #10
   4:	696d5f79 	stmdbvs	sp!, {r0, r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
   8:	00696c6c 	rsbeq	r6, r9, ip, ror #24
   c:	20554e47 	subscs	r4, r5, r7, asr #28
  10:	20393943 	eorscs	r3, r9, r3, asr #18
  14:	2e322e37 	mrccs	14, 1, r2, cr2, cr7, {1}
  18:	30322031 	eorscc	r2, r2, r1, lsr r0
  1c:	39303731 	ldmdbcc	r0!, {r0, r4, r5, r8, r9, sl, ip, sp}
  20:	28203430 	stmdacs	r0!, {r4, r5, sl, ip, sp}
  24:	656c6572 	strbvs	r6, [ip, #-1394]!	; 0xfffffa8e
  28:	29657361 	stmdbcs	r5!, {r0, r5, r6, r8, r9, ip, sp, lr}^
  2c:	52415b20 	subpl	r5, r1, #32, 22	; 0x8000
  30:	6d652f4d 	stclvs	15, cr2, [r5, #-308]!	; 0xfffffecc
  34:	64646562 	strbtvs	r6, [r4], #-1378	; 0xfffffa9e
  38:	372d6465 	strcc	r6, [sp, -r5, ror #8]!
  3c:	6172622d 	cmnvs	r2, sp, lsr #4
  40:	2068636e 	rsbcs	r6, r8, lr, ror #6
  44:	69766572 	ldmdbvs	r6!, {r1, r4, r5, r6, r8, sl, sp, lr}^
  48:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
  4c:	35353220 	ldrcc	r3, [r5, #-544]!	; 0xfffffde0
  50:	5d343032 	ldcpl	0, cr3, [r4, #-200]!	; 0xffffff38
  54:	746d2d20 	strbtvc	r2, [sp], #-3360	; 0xfffff2e0
  58:	626d7568 	rsbvs	r7, sp, #104, 10	; 0x1a000000
  5c:	616d2d20 	cmnvs	sp, r0, lsr #26
  60:	3d686372 	stclcc	3, cr6, [r8, #-456]!	; 0xfffffe38
  64:	766d7261 	strbtvc	r7, [sp], -r1, ror #4
  68:	206d2d36 	rsbcs	r2, sp, r6, lsr sp
  6c:	6c666d2d 	stclvs	13, cr6, [r6], #-180	; 0xffffff4c
  70:	2d74616f 	ldfcse	f6, [r4, #-444]!	; 0xfffffe44
  74:	3d696261 	sfmcc	f6, 2, [r9, #-388]!	; 0xfffffe7c
  78:	74666f73 	strbtvc	r6, [r6], #-3955	; 0xfffff08d
  7c:	746d2d20 	strbtvc	r2, [sp], #-3360	; 0xfffff2e0
  80:	626d7568 	rsbvs	r7, sp, #104, 10	; 0x1a000000
  84:	616d2d20 	cmnvs	sp, r0, lsr #26
  88:	3d686372 	stclcc	3, cr6, [r8, #-456]!	; 0xfffffe38
  8c:	766d7261 	strbtvc	r7, [sp], -r1, ror #4
  90:	206d2d36 	rsbcs	r2, sp, r6, lsr sp
  94:	2d20672d 	stccs	7, cr6, [r0, #-180]!	; 0xffffff4c
  98:	2d20304f 	stccs	0, cr3, [r0, #-316]!	; 0xfffffec4
  9c:	3d647473 	cfstrdcc	mvd7, [r4, #-460]!	; 0xfffffe34
  a0:	00393963 	eorseq	r3, r9, r3, ror #18
  a4:	69736e75 	ldmdbvs	r3!, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}^
  a8:	64656e67 	strbtvs	r6, [r5], #-3687	; 0xfffff199
  ac:	746e6920 	strbtvc	r6, [lr], #-2336	; 0xfffff6e0
  b0:	63736100 	cmnvs	r3, #0, 2
  b4:	635f6969 	cmpvs	pc, #1720320	; 0x1a4000
  b8:	5f6c7274 	svcpl	0x006c7274
  bc:	5f746962 	svcpl	0x00746962
  c0:	61656c63 	cmnvs	r5, r3, ror #24
  c4:	73610072 	cmnvc	r1, #114	; 0x72
  c8:	5f696963 	svcpl	0x00696963
  cc:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
  d0:	6e6f635f 	mcrvs	3, 3, r6, cr15, cr15, {2}
  d4:	6c6f7274 	sfmvs	f7, 2, [pc], #-464	; ffffff0c <main+0xdffffb60>
  d8:	0072656c 	rsbseq	r6, r2, ip, ror #10
  dc:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
  e0:	72775f69 	rsbsvc	r5, r7, #420	; 0x1a4
  e4:	5f657469 	svcpl	0x00657469
  e8:	746e6f63 	strbtvc	r6, [lr], #-3939	; 0xfffff09d
  ec:	6c6c6f72 	stclvs	15, cr6, [ip], #-456	; 0xfffffe38
  f0:	73007265 	movwvc	r7, #613	; 0x265
  f4:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
  f8:	61007075 	tstvs	r0, r5, ror r0
  fc:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 100:	6972775f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
 104:	635f6574 	cmpvs	pc, #116, 10	; 0x1d000000
 108:	00726168 	rsbseq	r6, r2, r8, ror #2
 10c:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
 110:	65725f69 	ldrbvs	r5, [r2, #-3945]!	; 0xfffff097
 114:	735f6461 	cmpvc	pc, #1627389952	; 0x61000000
 118:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0xfffffe8c
 11c:	73610073 	cmnvc	r1, #115	; 0x73
 120:	5f696963 	svcpl	0x00696963
 124:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
 128:	61645f65 	cmnvs	r4, r5, ror #30
 12c:	72006174 	andvc	r6, r0, #116, 2
 130:	72757465 	rsbsvc	r7, r5, #1694498816	; 0x65000000
 134:	61765f6e 	cmnvs	r6, lr, ror #30
 138:	0065756c 	rsbeq	r7, r5, ip, ror #10
 13c:	72646461 	rsbvc	r6, r4, #1627389952	; 0x61000000
 140:	00737365 	rsbseq	r7, r3, r5, ror #6
 144:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
 148:	65725f69 	ldrbvs	r5, [r2, #-3945]!	; 0xfffff097
 14c:	645f6461 	ldrbvs	r6, [pc], #-1121	; 154 <startup-0x1ffffeac>
 150:	00617461 	rsbeq	r7, r1, r1, ror #8
 154:	616c6564 	cmnvs	ip, r4, ror #10
 158:	696d5f79 	stmdbvs	sp!, {r0, r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
 15c:	006f7263 	rsbeq	r7, pc, r3, ror #4
 160:	69736e75 	ldmdbvs	r3!, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}^
 164:	64656e67 	strbtvs	r6, [r5], #-3687	; 0xfffff199
 168:	61686320 	cmnvs	r8, r0, lsr #6
 16c:	616d0072 	smcvs	53250	; 0xd002
 170:	61006e69 	tstvs	r0, r9, ror #28
 174:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 178:	746f675f 	strbtvc	r6, [pc], #-1887	; 180 <startup-0x1ffffe80>
 17c:	0079786f 	rsbseq	r7, r9, pc, ror #16
 180:	5f707061 	svcpl	0x00707061
 184:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
 188:	63736100 	cmnvs	r3, #0, 2
 18c:	775f6969 	ldrbvc	r6, [pc, -r9, ror #18]
 190:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
 194:	646d635f 	strbtvs	r6, [sp], #-863	; 0xfffffca1
 198:	74796200 	ldrbtvc	r6, [r9], #-512	; 0xfffffe00
 19c:	72610065 	rsbvc	r0, r1, #101	; 0x65
 1a0:	74006367 	strvc	r6, [r0], #-871	; 0xfffffc99
 1a4:	31747365 	cmncc	r4, r5, ror #6
 1a8:	73657400 	cmnvc	r5, #0, 8
 1ac:	63003274 	movwvs	r3, #628	; 0x274
 1b0:	6d756c6f 	ldclvs	12, cr6, [r5, #-444]!	; 0xfffffe44
 1b4:	6f63006e 	svcvs	0x0063006e
 1b8:	6e616d6d 	cdpvs	13, 6, cr6, cr1, cr13, {3}
 1bc:	3a430064 	bcc	10c0354 <startup-0x1ef3fcac>
 1c0:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0xfffffad1
 1c4:	652f7372 	strvs	r7, [pc, #-882]!	; fffffe5a <main+0xdffffaae>
 1c8:	65776972 	ldrbvs	r6, [r7, #-2418]!	; 0xfffff68e
 1cc:	6f442f73 	svcvs	0x00442f73
 1d0:	6f6c6e77 	svcvs	0x006c6e77
 1d4:	2f736461 	svccs	0x00736461
 1d8:	30544144 	subscc	r4, r4, r4, asr #2
 1dc:	6d2d3731 	stcvs	7, cr3, [sp, #-196]!	; 0xffffff3c
 1e0:	65747361 	ldrbvs	r7, [r4, #-865]!	; 0xfffffc9f
 1e4:	614c2f72 	hvcvs	49906	; 0xc2f2
 1e8:	61726f62 	cmnvs	r2, r2, ror #30
 1ec:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
 1f0:	614c2f31 	cmpvs	ip, r1, lsr pc
 1f4:	61726f62 	cmnvs	r2, r2, ror #30
 1f8:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
 1fc:	6c696673 	stclvs	6, cr6, [r9], #-460	; 0xfffffe34
 200:	2f437265 	svccs	0x00437265
 204:	3262616c 	rsbcc	r6, r2, #108, 2
 208:	732f335f 			; <UNDEFINED> instruction: 0x732f335f
 20c:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
 210:	632e7075 			; <UNDEFINED> instruction: 0x632e7075
 214:	6c656400 	cfstrdvs	mvd6, [r5], #-0
 218:	325f7961 	subscc	r7, pc, #1589248	; 0x184000
 21c:	6e5f3035 	mrcvs	0, 2, r3, cr15, cr5, {1}
 220:	75630073 	strbvc	r0, [r3, #-115]!	; 0xffffff8d
 224:	6e657272 	mcrvs	2, 3, r7, cr5, cr2, {3}
 228:	73610074 	cmnvc	r1, #116	; 0x74
 22c:	5f696963 	svcpl	0x00696963
 230:	6c727463 	cfldrdvs	mvd7, [r2], #-396	; 0xfffffe74
 234:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
 238:	7465735f 	strbtvc	r7, [r5], #-863	; 0xfffffca1
 23c:	5c3a4300 	ldcpl	3, cr4, [sl], #-0
 240:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
 244:	72655c73 	rsbvc	r5, r5, #29440	; 0x7300
 248:	73657769 	cmnvc	r5, #27525120	; 0x1a40000
 24c:	776f445c 			; <UNDEFINED> instruction: 0x776f445c
 250:	616f6c6e 	cmnvs	pc, lr, ror #24
 254:	445c7364 	ldrbmi	r7, [ip], #-868	; 0xfffffc9c
 258:	31305441 	teqcc	r0, r1, asr #8
 25c:	616d2d37 	cmnvs	sp, r7, lsr sp
 260:	72657473 	rsbvc	r7, r5, #1929379840	; 0x73000000
 264:	62614c5c 	rsbvs	r4, r1, #92, 24	; 0x5c00
 268:	7461726f 	strbtvc	r7, [r1], #-623	; 0xfffffd91
 26c:	316e6f69 	cmncc	lr, r9, ror #30
 270:	62614c5c 	rsbvs	r4, r1, #92, 24	; 0x5c00
 274:	7461726f 	strbtvc	r7, [r1], #-623	; 0xfffffd91
 278:	736e6f69 	cmnvc	lr, #420	; 0x1a4
 27c:	656c6966 	strbvs	r6, [ip, #-2406]!	; 0xfffff69a
 280:	6c5c4372 	mrrcvs	3, 7, r4, ip, cr2
 284:	5f326261 	svcpl	0x00326261
 288:	72610033 	rsbvc	r0, r1, #51	; 0x33
 28c:	61007667 	tstvs	r0, r7, ror #12
 290:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 294:	696e695f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, sp, lr}^
 298:	Address 0x00000298 is out of bounds.


Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <startup-0x1ef2f2dc>
   4:	4e472820 	cdpmi	8, 4, cr2, cr7, cr0, {1}
   8:	6f542055 	svcvs	0x00542055
   c:	20736c6f 	rsbscs	r6, r3, pc, ror #24
  10:	20726f66 	rsbscs	r6, r2, r6, ror #30
  14:	206d7241 	rsbcs	r7, sp, r1, asr #4
  18:	65626d45 	strbvs	r6, [r2, #-3397]!	; 0xfffff2bb
  1c:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  20:	6f725020 	svcvs	0x00725020
  24:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
  28:	2073726f 	rsbscs	r7, r3, pc, ror #4
  2c:	30322d37 	eorscc	r2, r2, r7, lsr sp
  30:	712d3731 			; <UNDEFINED> instruction: 0x712d3731
  34:	616d2d34 	cmnvs	sp, r4, lsr sp
  38:	29726f6a 	ldmdbcs	r2!, {r1, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
  3c:	322e3720 	eorcc	r3, lr, #32, 14	; 0x800000
  40:	3220312e 	eorcc	r3, r0, #-2147483637	; 0x8000000b
  44:	30373130 	eorscc	r3, r7, r0, lsr r1
  48:	20343039 	eorscs	r3, r4, r9, lsr r0
  4c:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60
  50:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
  54:	415b2029 	cmpmi	fp, r9, lsr #32
  58:	652f4d52 	strvs	r4, [pc, #-3410]!	; fffff30e <main+0xdfffef62>
  5c:	6465626d 	strbtvs	r6, [r5], #-621	; 0xfffffd93
  60:	2d646564 	cfstr64cs	mvdx6, [r4, #-400]!	; 0xfffffe70
  64:	72622d37 	rsbvc	r2, r2, #3520	; 0xdc0
  68:	68636e61 	stmdavs	r3!, {r0, r5, r6, r9, sl, fp, sp, lr}^
  6c:	76657220 	strbtvc	r7, [r5], -r0, lsr #4
  70:	6f697369 	svcvs	0x00697369
  74:	3532206e 	ldrcc	r2, [r2, #-110]!	; 0xffffff92
  78:	34303235 	ldrtcc	r3, [r0], #-565	; 0xfffffdcb
  7c:	Address 0x0000007c is out of bounds.


Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002a41 	andeq	r2, r0, r1, asr #20
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000020 	andeq	r0, r0, r0, lsr #32
  10:	4d2d3605 	stcmi	6, cr3, [sp, #-20]!	; 0xffffffec
  14:	070b0600 	streq	r0, [fp, -r0, lsl #12]
  18:	1201094d 	andne	r0, r1, #1261568	; 0x134000
  1c:	15011404 	strne	r1, [r1, #-1028]	; 0xfffffbfc
  20:	18031701 	stmdane	r3, {r0, r8, r9, sl, ip}
  24:	1a011901 	bne	46430 <startup-0x1ffb9bd0>
  28:	Address 0x00000028 is out of bounds.


Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
   4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  10:	0000000c 	andeq	r0, r0, ip
  14:	00000000 	andeq	r0, r0, r0
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
  20:	00000018 	andeq	r0, r0, r8, lsl r0
  24:	00000000 	andeq	r0, r0, r0
  28:	20000010 	andcs	r0, r0, r0, lsl r0
  2c:	00000038 	andeq	r0, r0, r8, lsr r0
  30:	40080e41 	andmi	r0, r8, r1, asr #28
  34:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  38:	070d4101 	streq	r4, [sp, -r1, lsl #2]
  3c:	0000001c 	andeq	r0, r0, ip, lsl r0
  40:	00000000 	andeq	r0, r0, r0
  44:	20000048 	andcs	r0, r0, r8, asr #32
  48:	00000034 	andeq	r0, r0, r4, lsr r0
  4c:	40080e41 	andmi	r0, r8, r1, asr #28
  50:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  54:	180e4101 	stmdane	lr, {r0, r8, lr}
  58:	00070d41 	andeq	r0, r7, r1, asr #26
  5c:	0000001c 	andeq	r0, r0, ip, lsl r0
  60:	00000000 	andeq	r0, r0, r0
  64:	2000007c 	andcs	r0, r0, ip, ror r0
  68:	00000028 	andeq	r0, r0, r8, lsr #32
  6c:	40080e41 	andmi	r0, r8, r1, asr #28
  70:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  74:	100e4101 	andne	r4, lr, r1, lsl #2
  78:	00070d41 	andeq	r0, r7, r1, asr #26
  7c:	0000001c 	andeq	r0, r0, ip, lsl r0
  80:	00000000 	andeq	r0, r0, r0
  84:	200000a4 	andcs	r0, r0, r4, lsr #1
  88:	00000038 	andeq	r0, r0, r8, lsr r0
  8c:	40080e41 	andmi	r0, r8, r1, asr #28
  90:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  94:	180e4101 	stmdane	lr, {r0, r8, lr}
  98:	00070d41 	andeq	r0, r7, r1, asr #26
  9c:	0000001c 	andeq	r0, r0, ip, lsl r0
  a0:	00000000 	andeq	r0, r0, r0
  a4:	200000dc 	ldrdcs	r0, [r0], -ip
  a8:	00000044 	andeq	r0, r0, r4, asr #32
  ac:	40080e41 	andmi	r0, r8, r1, asr #28
  b0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  b4:	180e4101 	stmdane	lr, {r0, r8, lr}
  b8:	00070d41 	andeq	r0, r7, r1, asr #26
  bc:	0000001c 	andeq	r0, r0, ip, lsl r0
  c0:	00000000 	andeq	r0, r0, r0
  c4:	20000120 	andcs	r0, r0, r0, lsr #2
  c8:	00000030 	andeq	r0, r0, r0, lsr r0
  cc:	40080e41 	andmi	r0, r8, r1, asr #28
  d0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  d4:	100e4101 	andne	r4, lr, r1, lsl #2
  d8:	00070d41 	andeq	r0, r7, r1, asr #26
  dc:	0000001c 	andeq	r0, r0, ip, lsl r0
  e0:	00000000 	andeq	r0, r0, r0
  e4:	20000150 	andcs	r0, r0, r0, asr r1
  e8:	0000002a 	andeq	r0, r0, sl, lsr #32
  ec:	40080e41 	andmi	r0, r8, r1, asr #28
  f0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  f4:	100e4101 	andne	r4, lr, r1, lsl #2
  f8:	00070d41 	andeq	r0, r7, r1, asr #26
  fc:	0000001c 	andeq	r0, r0, ip, lsl r0
 100:	00000000 	andeq	r0, r0, r0
 104:	2000017a 	andcs	r0, r0, sl, ror r1
 108:	0000002a 	andeq	r0, r0, sl, lsr #32
 10c:	40080e41 	andmi	r0, r8, r1, asr #28
 110:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 114:	100e4101 	andne	r4, lr, r1, lsl #2
 118:	00070d41 	andeq	r0, r7, r1, asr #26
 11c:	0000001c 	andeq	r0, r0, ip, lsl r0
 120:	00000000 	andeq	r0, r0, r0
 124:	200001a4 	andcs	r0, r0, r4, lsr #3
 128:	00000034 	andeq	r0, r0, r4, lsr r0
 12c:	40080e41 	andmi	r0, r8, r1, asr #28
 130:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 134:	100e4101 	andne	r4, lr, r1, lsl #2
 138:	00070d41 	andeq	r0, r7, r1, asr #26
 13c:	00000020 	andeq	r0, r0, r0, lsr #32
 140:	00000000 	andeq	r0, r0, r0
 144:	200001d8 	ldrdcs	r0, [r0], -r8
 148:	00000048 	andeq	r0, r0, r8, asr #32
 14c:	400c0e41 	andmi	r0, ip, r1, asr #28
 150:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 154:	018e4002 	orreq	r4, lr, r2
 158:	41180e41 	tstmi	r8, r1, asr #28
 15c:	0000070d 	andeq	r0, r0, sp, lsl #14
 160:	00000020 	andeq	r0, r0, r0, lsr #32
 164:	00000000 	andeq	r0, r0, r0
 168:	20000220 	andcs	r0, r0, r0, lsr #4
 16c:	00000048 	andeq	r0, r0, r8, asr #32
 170:	400c0e41 	andmi	r0, ip, r1, asr #28
 174:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 178:	018e4002 	orreq	r4, lr, r2
 17c:	41180e41 	tstmi	r8, r1, asr #28
 180:	0000070d 	andeq	r0, r0, sp, lsl #14
 184:	00000018 	andeq	r0, r0, r8, lsl r0
 188:	00000000 	andeq	r0, r0, r0
 18c:	20000268 	andcs	r0, r0, r8, ror #4
 190:	0000009a 	muleq	r0, sl, r0
 194:	40080e41 	andmi	r0, r8, r1, asr #28
 198:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 19c:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 1a0:	0000001c 	andeq	r0, r0, ip, lsl r0
 1a4:	00000000 	andeq	r0, r0, r0
 1a8:	20000302 	andcs	r0, r0, r2, lsl #6
 1ac:	00000038 	andeq	r0, r0, r8, lsr r0
 1b0:	40080e41 	andmi	r0, r8, r1, asr #28
 1b4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1b8:	180e4101 	stmdane	lr, {r0, r8, lr}
 1bc:	00070d41 	andeq	r0, r7, r1, asr #26
 1c0:	0000001c 	andeq	r0, r0, ip, lsl r0
 1c4:	00000000 	andeq	r0, r0, r0
 1c8:	2000033a 	andcs	r0, r0, sl, lsr r3
 1cc:	0000003c 	andeq	r0, r0, ip, lsr r0
 1d0:	40080e41 	andmi	r0, r8, r1, asr #28
 1d4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1d8:	100e4101 	andne	r4, lr, r1, lsl #2
 1dc:	00070d41 	andeq	r0, r7, r1, asr #26
 1e0:	00000018 	andeq	r0, r0, r8, lsl r0
 1e4:	00000000 	andeq	r0, r0, r0
 1e8:	20000376 	andcs	r0, r0, r6, ror r3
 1ec:	00000036 	andeq	r0, r0, r6, lsr r0
 1f0:	40080e41 	andmi	r0, r8, r1, asr #28
 1f4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1f8:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 1fc:	00000020 	andeq	r0, r0, r0, lsr #32
 200:	00000000 	andeq	r0, r0, r0
 204:	200003ac 	andcs	r0, r0, ip, lsr #7
 208:	0000009c 	muleq	r0, ip, r0
 20c:	400c0e41 	andmi	r0, ip, r1, asr #28
 210:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 214:	018e4002 	orreq	r4, lr, r2
 218:	41280e41 			; <UNDEFINED> instruction: 0x41280e41
 21c:	0000070d 	andeq	r0, r0, sp, lsl #14
