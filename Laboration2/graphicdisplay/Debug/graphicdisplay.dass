
./Debug/graphicdisplay.elf:     file format elf32-littlearm


Disassembly of section .text:

20000000 <startup>:
typedef unsigned char uint8_t;

__attribute__((naked)) __attribute__((section (".start_section")) )
void startup ( void )
{
__asm__ volatile(" LDR R0,=0x2001C000\n");		/* set stack */
20000000:	4802      	ldr	r0, [pc, #8]	; (2000000c <startup+0xc>)
__asm__ volatile(" MOV SP,R0\n");
20000002:	4685      	mov	sp, r0
__asm__ volatile(" BL main\n");					/* call main */
20000004:	f000 fb20 	bl	20000648 <main>
__asm__ volatile(".L1: B .L1\n");				/* never return */
20000008:	e7fe      	b.n	20000008 <startup+0x8>
}
2000000a:	46c0      	nop			; (mov r8, r8)
2000000c:	2001c000 	andcs	ip, r1, r0

20000010 <delay_250_ns>:

#define SIMULATOR

void delay_250_ns(void) {
20000010:	b580      	push	{r7, lr}
20000012:	af00      	add	r7, sp, #0
	*STK_CTRL = 0;
20000014:	4b09      	ldr	r3, [pc, #36]	; (2000003c <delay_250_ns+0x2c>)
20000016:	2200      	movs	r2, #0
20000018:	601a      	str	r2, [r3, #0]
	*STK_LOAD = (168-1)/4;
2000001a:	4b09      	ldr	r3, [pc, #36]	; (20000040 <delay_250_ns+0x30>)
2000001c:	2229      	movs	r2, #41	; 0x29
2000001e:	601a      	str	r2, [r3, #0]
	*STK_VAL = 0;
20000020:	4b08      	ldr	r3, [pc, #32]	; (20000044 <delay_250_ns+0x34>)
20000022:	2200      	movs	r2, #0
20000024:	601a      	str	r2, [r3, #0]
	*STK_CTRL = 5;
20000026:	4b05      	ldr	r3, [pc, #20]	; (2000003c <delay_250_ns+0x2c>)
20000028:	2205      	movs	r2, #5
2000002a:	601a      	str	r2, [r3, #0]
	while(*STK_CTRL & 0x00010000 == 0);
2000002c:	46c0      	nop			; (mov r8, r8)
	*STK_CTRL = 0;
2000002e:	4b03      	ldr	r3, [pc, #12]	; (2000003c <delay_250_ns+0x2c>)
20000030:	2200      	movs	r2, #0
20000032:	601a      	str	r2, [r3, #0]
}
20000034:	46c0      	nop			; (mov r8, r8)
20000036:	46bd      	mov	sp, r7
20000038:	bd80      	pop	{r7, pc}
2000003a:	46c0      	nop			; (mov r8, r8)
2000003c:	e000e010 	and	lr, r0, r0, lsl r0
20000040:	e000e014 	and	lr, r0, r4, lsl r0
20000044:	e000e018 	and	lr, r0, r8, lsl r0

20000048 <delay_500_ns>:

void delay_500_ns(void) {
20000048:	b580      	push	{r7, lr}
2000004a:	af00      	add	r7, sp, #0
	*STK_CTRL = 0;
2000004c:	4b09      	ldr	r3, [pc, #36]	; (20000074 <delay_500_ns+0x2c>)
2000004e:	2200      	movs	r2, #0
20000050:	601a      	str	r2, [r3, #0]
	*STK_LOAD = (168-1)/2;
20000052:	4b09      	ldr	r3, [pc, #36]	; (20000078 <delay_500_ns+0x30>)
20000054:	2253      	movs	r2, #83	; 0x53
20000056:	601a      	str	r2, [r3, #0]
	*STK_VAL = 0;
20000058:	4b08      	ldr	r3, [pc, #32]	; (2000007c <delay_500_ns+0x34>)
2000005a:	2200      	movs	r2, #0
2000005c:	601a      	str	r2, [r3, #0]
	*STK_CTRL = 5;
2000005e:	4b05      	ldr	r3, [pc, #20]	; (20000074 <delay_500_ns+0x2c>)
20000060:	2205      	movs	r2, #5
20000062:	601a      	str	r2, [r3, #0]
	while(*STK_CTRL & 0x00010000 == 0);
20000064:	46c0      	nop			; (mov r8, r8)
	*STK_CTRL = 0;
20000066:	4b03      	ldr	r3, [pc, #12]	; (20000074 <delay_500_ns+0x2c>)
20000068:	2200      	movs	r2, #0
2000006a:	601a      	str	r2, [r3, #0]
}
2000006c:	46c0      	nop			; (mov r8, r8)
2000006e:	46bd      	mov	sp, r7
20000070:	bd80      	pop	{r7, pc}
20000072:	46c0      	nop			; (mov r8, r8)
20000074:	e000e010 	and	lr, r0, r0, lsl r0
20000078:	e000e014 	and	lr, r0, r4, lsl r0
2000007c:	e000e018 	and	lr, r0, r8, lsl r0

20000080 <delay_micro>:

void delay_micro(unsigned int ms) {
20000080:	b580      	push	{r7, lr}
20000082:	b084      	sub	sp, #16
20000084:	af00      	add	r7, sp, #0
20000086:	6078      	str	r0, [r7, #4]
	#ifdef SIMULATOR
		ms /= 1000;
20000088:	687b      	ldr	r3, [r7, #4]
2000008a:	22fa      	movs	r2, #250	; 0xfa
2000008c:	0091      	lsls	r1, r2, #2
2000008e:	0018      	movs	r0, r3
20000090:	f000 fb0a 	bl	200006a8 <__udivsi3>
20000094:	0003      	movs	r3, r0
20000096:	607b      	str	r3, [r7, #4]
		ms++;
20000098:	687b      	ldr	r3, [r7, #4]
2000009a:	3301      	adds	r3, #1
2000009c:	607b      	str	r3, [r7, #4]
	#endif
	
	while(ms > 0) {
2000009e:	e00d      	b.n	200000bc <delay_micro+0x3c>
		for(int i = 0; i < 4; i++) {
200000a0:	2300      	movs	r3, #0
200000a2:	60fb      	str	r3, [r7, #12]
200000a4:	e004      	b.n	200000b0 <delay_micro+0x30>
			delay_250_ns();
200000a6:	f7ff ffb3 	bl	20000010 <delay_250_ns>
		for(int i = 0; i < 4; i++) {
200000aa:	68fb      	ldr	r3, [r7, #12]
200000ac:	3301      	adds	r3, #1
200000ae:	60fb      	str	r3, [r7, #12]
200000b0:	68fb      	ldr	r3, [r7, #12]
200000b2:	2b03      	cmp	r3, #3
200000b4:	ddf7      	ble.n	200000a6 <delay_micro+0x26>
		}
		ms--;
200000b6:	687b      	ldr	r3, [r7, #4]
200000b8:	3b01      	subs	r3, #1
200000ba:	607b      	str	r3, [r7, #4]
	while(ms > 0) {
200000bc:	687b      	ldr	r3, [r7, #4]
200000be:	2b00      	cmp	r3, #0
200000c0:	d1ee      	bne.n	200000a0 <delay_micro+0x20>
	}
}
200000c2:	46c0      	nop			; (mov r8, r8)
200000c4:	46c0      	nop			; (mov r8, r8)
200000c6:	46bd      	mov	sp, r7
200000c8:	b004      	add	sp, #16
200000ca:	bd80      	pop	{r7, pc}

200000cc <delay_milli>:

void delay_milli(unsigned int ms) {
200000cc:	b580      	push	{r7, lr}
200000ce:	b082      	sub	sp, #8
200000d0:	af00      	add	r7, sp, #0
200000d2:	6078      	str	r0, [r7, #4]
	#ifdef SIMULATOR
		ms /= 1000;
200000d4:	687b      	ldr	r3, [r7, #4]
200000d6:	22fa      	movs	r2, #250	; 0xfa
200000d8:	0091      	lsls	r1, r2, #2
200000da:	0018      	movs	r0, r3
200000dc:	f000 fae4 	bl	200006a8 <__udivsi3>
200000e0:	0003      	movs	r3, r0
200000e2:	607b      	str	r3, [r7, #4]
		ms++;
200000e4:	687b      	ldr	r3, [r7, #4]
200000e6:	3301      	adds	r3, #1
200000e8:	607b      	str	r3, [r7, #4]
	#endif
	
	while(ms > 0) {
200000ea:	e007      	b.n	200000fc <delay_milli+0x30>
		delay_micro(1000);
200000ec:	23fa      	movs	r3, #250	; 0xfa
200000ee:	009b      	lsls	r3, r3, #2
200000f0:	0018      	movs	r0, r3
200000f2:	f7ff ffc5 	bl	20000080 <delay_micro>
		ms--;
200000f6:	687b      	ldr	r3, [r7, #4]
200000f8:	3b01      	subs	r3, #1
200000fa:	607b      	str	r3, [r7, #4]
	while(ms > 0) {
200000fc:	687b      	ldr	r3, [r7, #4]
200000fe:	2b00      	cmp	r3, #0
20000100:	d1f4      	bne.n	200000ec <delay_milli+0x20>
	}
}
20000102:	46c0      	nop			; (mov r8, r8)
20000104:	46c0      	nop			; (mov r8, r8)
20000106:	46bd      	mov	sp, r7
20000108:	b002      	add	sp, #8
2000010a:	bd80      	pop	{r7, pc}

2000010c <graphic_ctrl_bit_set>:

void graphic_ctrl_bit_set(uint8_t x) {
2000010c:	b580      	push	{r7, lr}
2000010e:	b084      	sub	sp, #16
20000110:	af00      	add	r7, sp, #0
20000112:	0002      	movs	r2, r0
20000114:	1dfb      	adds	r3, r7, #7
20000116:	701a      	strb	r2, [r3, #0]
	uint8_t c = *GPIO_ODR_LOW;
20000118:	4a0f      	ldr	r2, [pc, #60]	; (20000158 <graphic_ctrl_bit_set+0x4c>)
2000011a:	200f      	movs	r0, #15
2000011c:	183b      	adds	r3, r7, r0
2000011e:	7812      	ldrb	r2, [r2, #0]
20000120:	701a      	strb	r2, [r3, #0]
	c &= ~B_SELECT;
20000122:	183b      	adds	r3, r7, r0
20000124:	183a      	adds	r2, r7, r0
20000126:	7812      	ldrb	r2, [r2, #0]
20000128:	2104      	movs	r1, #4
2000012a:	438a      	bics	r2, r1
2000012c:	701a      	strb	r2, [r3, #0]
	c |= (~B_SELECT & x);
2000012e:	1dfb      	adds	r3, r7, #7
20000130:	781b      	ldrb	r3, [r3, #0]
20000132:	b25b      	sxtb	r3, r3
20000134:	2204      	movs	r2, #4
20000136:	4393      	bics	r3, r2
20000138:	b25a      	sxtb	r2, r3
2000013a:	183b      	adds	r3, r7, r0
2000013c:	781b      	ldrb	r3, [r3, #0]
2000013e:	b25b      	sxtb	r3, r3
20000140:	4313      	orrs	r3, r2
20000142:	b25a      	sxtb	r2, r3
20000144:	183b      	adds	r3, r7, r0
20000146:	701a      	strb	r2, [r3, #0]
	*GPIO_ODR_LOW = c;
20000148:	4a03      	ldr	r2, [pc, #12]	; (20000158 <graphic_ctrl_bit_set+0x4c>)
2000014a:	183b      	adds	r3, r7, r0
2000014c:	781b      	ldrb	r3, [r3, #0]
2000014e:	7013      	strb	r3, [r2, #0]
}
20000150:	46c0      	nop			; (mov r8, r8)
20000152:	46bd      	mov	sp, r7
20000154:	b004      	add	sp, #16
20000156:	bd80      	pop	{r7, pc}
20000158:	40021014 	andmi	r1, r2, r4, lsl r0

2000015c <graphic_ctrl_bit_clear>:

void graphic_ctrl_bit_clear(uint8_t x) {
2000015c:	b580      	push	{r7, lr}
2000015e:	b084      	sub	sp, #16
20000160:	af00      	add	r7, sp, #0
20000162:	0002      	movs	r2, r0
20000164:	1dfb      	adds	r3, r7, #7
20000166:	701a      	strb	r2, [r3, #0]
	uint8_t c = *GPIO_ODR_LOW;
20000168:	4a0f      	ldr	r2, [pc, #60]	; (200001a8 <graphic_ctrl_bit_clear+0x4c>)
2000016a:	200f      	movs	r0, #15
2000016c:	183b      	adds	r3, r7, r0
2000016e:	7812      	ldrb	r2, [r2, #0]
20000170:	701a      	strb	r2, [r3, #0]
	c &= ~B_SELECT;
20000172:	183b      	adds	r3, r7, r0
20000174:	183a      	adds	r2, r7, r0
20000176:	7812      	ldrb	r2, [r2, #0]
20000178:	2104      	movs	r1, #4
2000017a:	438a      	bics	r2, r1
2000017c:	701a      	strb	r2, [r3, #0]
	c &= ~x;
2000017e:	1dfb      	adds	r3, r7, #7
20000180:	781b      	ldrb	r3, [r3, #0]
20000182:	b25b      	sxtb	r3, r3
20000184:	43db      	mvns	r3, r3
20000186:	b25b      	sxtb	r3, r3
20000188:	183a      	adds	r2, r7, r0
2000018a:	7812      	ldrb	r2, [r2, #0]
2000018c:	b252      	sxtb	r2, r2
2000018e:	4013      	ands	r3, r2
20000190:	b25a      	sxtb	r2, r3
20000192:	183b      	adds	r3, r7, r0
20000194:	701a      	strb	r2, [r3, #0]
	*GPIO_ODR_LOW = c;
20000196:	4a04      	ldr	r2, [pc, #16]	; (200001a8 <graphic_ctrl_bit_clear+0x4c>)
20000198:	183b      	adds	r3, r7, r0
2000019a:	781b      	ldrb	r3, [r3, #0]
2000019c:	7013      	strb	r3, [r2, #0]
}
2000019e:	46c0      	nop			; (mov r8, r8)
200001a0:	46bd      	mov	sp, r7
200001a2:	b004      	add	sp, #16
200001a4:	bd80      	pop	{r7, pc}
200001a6:	46c0      	nop			; (mov r8, r8)
200001a8:	40021014 	andmi	r1, r2, r4, lsl r0

200001ac <select_controller>:

void select_controller(controller) {
200001ac:	b580      	push	{r7, lr}
200001ae:	b082      	sub	sp, #8
200001b0:	af00      	add	r7, sp, #0
200001b2:	6078      	str	r0, [r7, #4]
	switch(controller) {
200001b4:	687b      	ldr	r3, [r7, #4]
200001b6:	2b18      	cmp	r3, #24
200001b8:	d021      	beq.n	200001fe <select_controller+0x52>
200001ba:	687b      	ldr	r3, [r7, #4]
200001bc:	2b18      	cmp	r3, #24
200001be:	dc22      	bgt.n	20000206 <select_controller+0x5a>
200001c0:	687b      	ldr	r3, [r7, #4]
200001c2:	2b10      	cmp	r3, #16
200001c4:	d014      	beq.n	200001f0 <select_controller+0x44>
200001c6:	687b      	ldr	r3, [r7, #4]
200001c8:	2b10      	cmp	r3, #16
200001ca:	dc1c      	bgt.n	20000206 <select_controller+0x5a>
200001cc:	687b      	ldr	r3, [r7, #4]
200001ce:	2b00      	cmp	r3, #0
200001d0:	d003      	beq.n	200001da <select_controller+0x2e>
200001d2:	687b      	ldr	r3, [r7, #4]
200001d4:	2b08      	cmp	r3, #8
200001d6:	d004      	beq.n	200001e2 <select_controller+0x36>
			break;
		case B_CS1|B_CS2: 
			graphic_ctrl_bit_set(B_CS1|B_CS2);
			break;
	}
}
200001d8:	e015      	b.n	20000206 <select_controller+0x5a>
			graphic_ctrl_bit_clear(B_CS1|B_CS2);
200001da:	2018      	movs	r0, #24
200001dc:	f7ff ffbe 	bl	2000015c <graphic_ctrl_bit_clear>
			break;
200001e0:	e011      	b.n	20000206 <select_controller+0x5a>
			graphic_ctrl_bit_clear(B_CS2);
200001e2:	2010      	movs	r0, #16
200001e4:	f7ff ffba 	bl	2000015c <graphic_ctrl_bit_clear>
			graphic_ctrl_bit_set(B_CS1);
200001e8:	2008      	movs	r0, #8
200001ea:	f7ff ff8f 	bl	2000010c <graphic_ctrl_bit_set>
			break;
200001ee:	e00a      	b.n	20000206 <select_controller+0x5a>
			graphic_ctrl_bit_clear(B_CS1);
200001f0:	2008      	movs	r0, #8
200001f2:	f7ff ffb3 	bl	2000015c <graphic_ctrl_bit_clear>
			graphic_ctrl_bit_set(B_CS2);
200001f6:	2010      	movs	r0, #16
200001f8:	f7ff ff88 	bl	2000010c <graphic_ctrl_bit_set>
			break;
200001fc:	e003      	b.n	20000206 <select_controller+0x5a>
			graphic_ctrl_bit_set(B_CS1|B_CS2);
200001fe:	2018      	movs	r0, #24
20000200:	f7ff ff84 	bl	2000010c <graphic_ctrl_bit_set>
			break;
20000204:	46c0      	nop			; (mov r8, r8)
}
20000206:	46c0      	nop			; (mov r8, r8)
20000208:	46bd      	mov	sp, r7
2000020a:	b002      	add	sp, #8
2000020c:	bd80      	pop	{r7, pc}

2000020e <graphic_wait_ready>:

void graphic_wait_ready(void) {
2000020e:	b580      	push	{r7, lr}
20000210:	af00      	add	r7, sp, #0
	graphic_ctrl_bit_set(B_E);
20000212:	2040      	movs	r0, #64	; 0x40
20000214:	f7ff ff7a 	bl	2000010c <graphic_ctrl_bit_set>
	*GPIO_MODER = 0x00005555;
20000218:	4b12      	ldr	r3, [pc, #72]	; (20000264 <graphic_wait_ready+0x56>)
2000021a:	4a13      	ldr	r2, [pc, #76]	; (20000268 <graphic_wait_ready+0x5a>)
2000021c:	601a      	str	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_RS);
2000021e:	2001      	movs	r0, #1
20000220:	f7ff ff9c 	bl	2000015c <graphic_ctrl_bit_clear>
	graphic_ctrl_bit_set(B_RW);
20000224:	2002      	movs	r0, #2
20000226:	f7ff ff71 	bl	2000010c <graphic_ctrl_bit_set>
	delay_500_ns();
2000022a:	f7ff ff0d 	bl	20000048 <delay_500_ns>
	while(1) {
		graphic_ctrl_bit_set(B_E);
2000022e:	2040      	movs	r0, #64	; 0x40
20000230:	f7ff ff6c 	bl	2000010c <graphic_ctrl_bit_set>
		delay_500_ns();
20000234:	f7ff ff08 	bl	20000048 <delay_500_ns>
		graphic_ctrl_bit_clear(B_E);
20000238:	2040      	movs	r0, #64	; 0x40
2000023a:	f7ff ff8f 	bl	2000015c <graphic_ctrl_bit_clear>
		delay_500_ns();
2000023e:	f7ff ff03 	bl	20000048 <delay_500_ns>
		if((*GPIO_ODR_LOW & LCD_BUSY) == 0) {
20000242:	4b0a      	ldr	r3, [pc, #40]	; (2000026c <graphic_wait_ready+0x5e>)
20000244:	781b      	ldrb	r3, [r3, #0]
20000246:	b2db      	uxtb	r3, r3
20000248:	b25b      	sxtb	r3, r3
2000024a:	2b00      	cmp	r3, #0
2000024c:	da00      	bge.n	20000250 <graphic_wait_ready+0x42>
		graphic_ctrl_bit_set(B_E);
2000024e:	e7ee      	b.n	2000022e <graphic_wait_ready+0x20>
			break;
20000250:	46c0      	nop			; (mov r8, r8)
		}
	}
	graphic_ctrl_bit_set(B_E);
20000252:	2040      	movs	r0, #64	; 0x40
20000254:	f7ff ff5a 	bl	2000010c <graphic_ctrl_bit_set>
	*GPIO_MODER = 0x55555555;
20000258:	4b02      	ldr	r3, [pc, #8]	; (20000264 <graphic_wait_ready+0x56>)
2000025a:	4a05      	ldr	r2, [pc, #20]	; (20000270 <graphic_wait_ready+0x62>)
2000025c:	601a      	str	r2, [r3, #0]
}
2000025e:	46c0      	nop			; (mov r8, r8)
20000260:	46bd      	mov	sp, r7
20000262:	bd80      	pop	{r7, pc}
20000264:	40021000 	andmi	r1, r2, r0
20000268:	00005555 	andeq	r5, r0, r5, asr r5
2000026c:	40021014 	andmi	r1, r2, r4, lsl r0
20000270:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20000274 <graphic_read>:

uint8_t graphic_read(uint8_t controller) {
20000274:	b580      	push	{r7, lr}
20000276:	b084      	sub	sp, #16
20000278:	af00      	add	r7, sp, #0
2000027a:	0002      	movs	r2, r0
2000027c:	1dfb      	adds	r3, r7, #7
2000027e:	701a      	strb	r2, [r3, #0]
	uint8_t return_value;
	graphic_ctrl_bit_clear(B_E);
20000280:	2040      	movs	r0, #64	; 0x40
20000282:	f7ff ff6b 	bl	2000015c <graphic_ctrl_bit_clear>
	*GPIO_MODER = 0x00005555;
20000286:	4b1c      	ldr	r3, [pc, #112]	; (200002f8 <graphic_read+0x84>)
20000288:	4a1c      	ldr	r2, [pc, #112]	; (200002fc <graphic_read+0x88>)
2000028a:	601a      	str	r2, [r3, #0]
	graphic_ctrl_bit_set(B_RS|B_RW);
2000028c:	2003      	movs	r0, #3
2000028e:	f7ff ff3d 	bl	2000010c <graphic_ctrl_bit_set>
	select_controller(controller);
20000292:	1dfb      	adds	r3, r7, #7
20000294:	781b      	ldrb	r3, [r3, #0]
20000296:	0018      	movs	r0, r3
20000298:	f7ff ff88 	bl	200001ac <select_controller>
	delay_500_ns();
2000029c:	f7ff fed4 	bl	20000048 <delay_500_ns>
	graphic_ctrl_bit_set(B_E);
200002a0:	2040      	movs	r0, #64	; 0x40
200002a2:	f7ff ff33 	bl	2000010c <graphic_ctrl_bit_set>
	delay_500_ns();
200002a6:	f7ff fecf 	bl	20000048 <delay_500_ns>
	return_value = *GPIO_IDR_HIGH;
200002aa:	4a15      	ldr	r2, [pc, #84]	; (20000300 <graphic_read+0x8c>)
200002ac:	230f      	movs	r3, #15
200002ae:	18fb      	adds	r3, r7, r3
200002b0:	7812      	ldrb	r2, [r2, #0]
200002b2:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);
200002b4:	2040      	movs	r0, #64	; 0x40
200002b6:	f7ff ff51 	bl	2000015c <graphic_ctrl_bit_clear>
	*GPIO_MODER = 0x55555555;
200002ba:	4b0f      	ldr	r3, [pc, #60]	; (200002f8 <graphic_read+0x84>)
200002bc:	4a11      	ldr	r2, [pc, #68]	; (20000304 <graphic_read+0x90>)
200002be:	601a      	str	r2, [r3, #0]
	
	if(controller & B_CS1) {
200002c0:	1dfb      	adds	r3, r7, #7
200002c2:	781b      	ldrb	r3, [r3, #0]
200002c4:	2208      	movs	r2, #8
200002c6:	4013      	ands	r3, r2
200002c8:	d005      	beq.n	200002d6 <graphic_read+0x62>
		select_controller(B_CS1);
200002ca:	2008      	movs	r0, #8
200002cc:	f7ff ff6e 	bl	200001ac <select_controller>
		graphic_wait_ready();
200002d0:	f7ff ff9d 	bl	2000020e <graphic_wait_ready>
200002d4:	e009      	b.n	200002ea <graphic_read+0x76>
	} else if(controller & B_CS2) {
200002d6:	1dfb      	adds	r3, r7, #7
200002d8:	781b      	ldrb	r3, [r3, #0]
200002da:	2210      	movs	r2, #16
200002dc:	4013      	ands	r3, r2
200002de:	d004      	beq.n	200002ea <graphic_read+0x76>
		select_controller(B_CS2);
200002e0:	2010      	movs	r0, #16
200002e2:	f7ff ff63 	bl	200001ac <select_controller>
		graphic_wait_ready();
200002e6:	f7ff ff92 	bl	2000020e <graphic_wait_ready>
	}
	return return_value;
200002ea:	230f      	movs	r3, #15
200002ec:	18fb      	adds	r3, r7, r3
200002ee:	781b      	ldrb	r3, [r3, #0]
}
200002f0:	0018      	movs	r0, r3
200002f2:	46bd      	mov	sp, r7
200002f4:	b004      	add	sp, #16
200002f6:	bd80      	pop	{r7, pc}
200002f8:	40021000 	andmi	r1, r2, r0
200002fc:	00005555 	andeq	r5, r0, r5, asr r5
20000300:	40021011 	andmi	r1, r2, r1, lsl r0
20000304:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20000308 <graphic_write>:

void graphic_write(uint8_t value, uint8_t controller) {
20000308:	b580      	push	{r7, lr}
2000030a:	b082      	sub	sp, #8
2000030c:	af00      	add	r7, sp, #0
2000030e:	0002      	movs	r2, r0
20000310:	1dfb      	adds	r3, r7, #7
20000312:	701a      	strb	r2, [r3, #0]
20000314:	1dbb      	adds	r3, r7, #6
20000316:	1c0a      	adds	r2, r1, #0
20000318:	701a      	strb	r2, [r3, #0]
	*GPIO_ODR_HIGH = value;
2000031a:	4a1a      	ldr	r2, [pc, #104]	; (20000384 <graphic_write+0x7c>)
2000031c:	1dfb      	adds	r3, r7, #7
2000031e:	781b      	ldrb	r3, [r3, #0]
20000320:	7013      	strb	r3, [r2, #0]
	select_controller(controller);
20000322:	1dbb      	adds	r3, r7, #6
20000324:	781b      	ldrb	r3, [r3, #0]
20000326:	0018      	movs	r0, r3
20000328:	f7ff ff40 	bl	200001ac <select_controller>
	delay_500_ns();
2000032c:	f7ff fe8c 	bl	20000048 <delay_500_ns>
	graphic_ctrl_bit_set(B_E);
20000330:	2040      	movs	r0, #64	; 0x40
20000332:	f7ff feeb 	bl	2000010c <graphic_ctrl_bit_set>
	delay_500_ns();
20000336:	f7ff fe87 	bl	20000048 <delay_500_ns>
	graphic_ctrl_bit_clear(B_E);
2000033a:	2040      	movs	r0, #64	; 0x40
2000033c:	f7ff ff0e 	bl	2000015c <graphic_ctrl_bit_clear>
	
	if(controller & B_CS1) {
20000340:	1dbb      	adds	r3, r7, #6
20000342:	781b      	ldrb	r3, [r3, #0]
20000344:	2208      	movs	r2, #8
20000346:	4013      	ands	r3, r2
20000348:	d005      	beq.n	20000356 <graphic_write+0x4e>
		select_controller(B_CS1);
2000034a:	2008      	movs	r0, #8
2000034c:	f7ff ff2e 	bl	200001ac <select_controller>
		graphic_wait_ready();
20000350:	f7ff ff5d 	bl	2000020e <graphic_wait_ready>
20000354:	e009      	b.n	2000036a <graphic_write+0x62>
	} else if(controller & B_CS2) {
20000356:	1dbb      	adds	r3, r7, #6
20000358:	781b      	ldrb	r3, [r3, #0]
2000035a:	2210      	movs	r2, #16
2000035c:	4013      	ands	r3, r2
2000035e:	d004      	beq.n	2000036a <graphic_write+0x62>
		select_controller(B_CS2);
20000360:	2010      	movs	r0, #16
20000362:	f7ff ff23 	bl	200001ac <select_controller>
		graphic_wait_ready();
20000366:	f7ff ff52 	bl	2000020e <graphic_wait_ready>
	}
	
	*GPIO_ODR_HIGH = 0;
2000036a:	4b06      	ldr	r3, [pc, #24]	; (20000384 <graphic_write+0x7c>)
2000036c:	2200      	movs	r2, #0
2000036e:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_set(B_E);
20000370:	2040      	movs	r0, #64	; 0x40
20000372:	f7ff fecb 	bl	2000010c <graphic_ctrl_bit_set>
	select_controller(0);
20000376:	2000      	movs	r0, #0
20000378:	f7ff ff18 	bl	200001ac <select_controller>
}
2000037c:	46c0      	nop			; (mov r8, r8)
2000037e:	46bd      	mov	sp, r7
20000380:	b002      	add	sp, #8
20000382:	bd80      	pop	{r7, pc}
20000384:	40021015 	andmi	r1, r2, r5, lsl r0

20000388 <graphic_write_command>:

void graphic_write_command(uint8_t command, uint8_t controller) {
20000388:	b580      	push	{r7, lr}
2000038a:	b082      	sub	sp, #8
2000038c:	af00      	add	r7, sp, #0
2000038e:	0002      	movs	r2, r0
20000390:	1dfb      	adds	r3, r7, #7
20000392:	701a      	strb	r2, [r3, #0]
20000394:	1dbb      	adds	r3, r7, #6
20000396:	1c0a      	adds	r2, r1, #0
20000398:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);
2000039a:	2040      	movs	r0, #64	; 0x40
2000039c:	f7ff fede 	bl	2000015c <graphic_ctrl_bit_clear>
	select_controller(controller);
200003a0:	1dbb      	adds	r3, r7, #6
200003a2:	781b      	ldrb	r3, [r3, #0]
200003a4:	0018      	movs	r0, r3
200003a6:	f7ff ff01 	bl	200001ac <select_controller>
	graphic_ctrl_bit_clear(B_RS | B_RW);
200003aa:	2003      	movs	r0, #3
200003ac:	f7ff fed6 	bl	2000015c <graphic_ctrl_bit_clear>
	graphic_write(command, controller);
200003b0:	1dbb      	adds	r3, r7, #6
200003b2:	781a      	ldrb	r2, [r3, #0]
200003b4:	1dfb      	adds	r3, r7, #7
200003b6:	781b      	ldrb	r3, [r3, #0]
200003b8:	0011      	movs	r1, r2
200003ba:	0018      	movs	r0, r3
200003bc:	f7ff ffa4 	bl	20000308 <graphic_write>
}
200003c0:	46c0      	nop			; (mov r8, r8)
200003c2:	46bd      	mov	sp, r7
200003c4:	b002      	add	sp, #8
200003c6:	bd80      	pop	{r7, pc}

200003c8 <graphic_write_data>:

void graphic_write_data(uint8_t data, uint8_t controller) {
200003c8:	b580      	push	{r7, lr}
200003ca:	b082      	sub	sp, #8
200003cc:	af00      	add	r7, sp, #0
200003ce:	0002      	movs	r2, r0
200003d0:	1dfb      	adds	r3, r7, #7
200003d2:	701a      	strb	r2, [r3, #0]
200003d4:	1dbb      	adds	r3, r7, #6
200003d6:	1c0a      	adds	r2, r1, #0
200003d8:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);
200003da:	2040      	movs	r0, #64	; 0x40
200003dc:	f7ff febe 	bl	2000015c <graphic_ctrl_bit_clear>
	select_controller(controller);
200003e0:	1dbb      	adds	r3, r7, #6
200003e2:	781b      	ldrb	r3, [r3, #0]
200003e4:	0018      	movs	r0, r3
200003e6:	f7ff fee1 	bl	200001ac <select_controller>
	graphic_ctrl_bit_set(B_RS);
200003ea:	2001      	movs	r0, #1
200003ec:	f7ff fe8e 	bl	2000010c <graphic_ctrl_bit_set>
	graphic_ctrl_bit_clear(B_RW);
200003f0:	2002      	movs	r0, #2
200003f2:	f7ff feb3 	bl	2000015c <graphic_ctrl_bit_clear>
	graphic_write(data, controller);
200003f6:	1dbb      	adds	r3, r7, #6
200003f8:	781a      	ldrb	r2, [r3, #0]
200003fa:	1dfb      	adds	r3, r7, #7
200003fc:	781b      	ldrb	r3, [r3, #0]
200003fe:	0011      	movs	r1, r2
20000400:	0018      	movs	r0, r3
20000402:	f7ff ff81 	bl	20000308 <graphic_write>
}
20000406:	46c0      	nop			; (mov r8, r8)
20000408:	46bd      	mov	sp, r7
2000040a:	b002      	add	sp, #8
2000040c:	bd80      	pop	{r7, pc}

2000040e <graphic_read_data>:

uint8_t graphic_read_data(uint8_t controller) {
2000040e:	b580      	push	{r7, lr}
20000410:	b082      	sub	sp, #8
20000412:	af00      	add	r7, sp, #0
20000414:	0002      	movs	r2, r0
20000416:	1dfb      	adds	r3, r7, #7
20000418:	701a      	strb	r2, [r3, #0]
	graphic_read(controller);
2000041a:	1dfb      	adds	r3, r7, #7
2000041c:	781b      	ldrb	r3, [r3, #0]
2000041e:	0018      	movs	r0, r3
20000420:	f7ff ff28 	bl	20000274 <graphic_read>
	return graphic_read(controller);
20000424:	1dfb      	adds	r3, r7, #7
20000426:	781b      	ldrb	r3, [r3, #0]
20000428:	0018      	movs	r0, r3
2000042a:	f7ff ff23 	bl	20000274 <graphic_read>
2000042e:	0003      	movs	r3, r0
}
20000430:	0018      	movs	r0, r3
20000432:	46bd      	mov	sp, r7
20000434:	b002      	add	sp, #8
20000436:	bd80      	pop	{r7, pc}

20000438 <graphic_initialize>:

void graphic_initialize(void) {
20000438:	b580      	push	{r7, lr}
2000043a:	af00      	add	r7, sp, #0
	graphic_ctrl_bit_set(B_E);
2000043c:	2040      	movs	r0, #64	; 0x40
2000043e:	f7ff fe65 	bl	2000010c <graphic_ctrl_bit_set>
	delay_micro(10);
20000442:	200a      	movs	r0, #10
20000444:	f7ff fe1c 	bl	20000080 <delay_micro>
	graphic_ctrl_bit_clear(B_CS1);
20000448:	2008      	movs	r0, #8
2000044a:	f7ff fe87 	bl	2000015c <graphic_ctrl_bit_clear>
	graphic_ctrl_bit_clear(B_CS2);
2000044e:	2010      	movs	r0, #16
20000450:	f7ff fe84 	bl	2000015c <graphic_ctrl_bit_clear>
	graphic_ctrl_bit_clear(B_RST);
20000454:	2020      	movs	r0, #32
20000456:	f7ff fe81 	bl	2000015c <graphic_ctrl_bit_clear>
	graphic_ctrl_bit_clear(B_E);
2000045a:	2040      	movs	r0, #64	; 0x40
2000045c:	f7ff fe7e 	bl	2000015c <graphic_ctrl_bit_clear>
	delay_milli(30);
20000460:	201e      	movs	r0, #30
20000462:	f7ff fe33 	bl	200000cc <delay_milli>
	graphic_ctrl_bit_set(B_RST);
20000466:	2020      	movs	r0, #32
20000468:	f7ff fe50 	bl	2000010c <graphic_ctrl_bit_set>
	graphic_write_command(LCD_OFF, B_CS1|B_CS2);
2000046c:	2118      	movs	r1, #24
2000046e:	203e      	movs	r0, #62	; 0x3e
20000470:	f7ff ff8a 	bl	20000388 <graphic_write_command>
	graphic_write_command(LCD_ON, B_CS1|B_CS2);
20000474:	2118      	movs	r1, #24
20000476:	203f      	movs	r0, #63	; 0x3f
20000478:	f7ff ff86 	bl	20000388 <graphic_write_command>
	graphic_write_command(LCD_DISP_START, B_CS1|B_CS2);
2000047c:	2118      	movs	r1, #24
2000047e:	20c0      	movs	r0, #192	; 0xc0
20000480:	f7ff ff82 	bl	20000388 <graphic_write_command>
	graphic_write_command(LCD_SET_ADD, B_CS1|B_CS2);
20000484:	2118      	movs	r1, #24
20000486:	2040      	movs	r0, #64	; 0x40
20000488:	f7ff ff7e 	bl	20000388 <graphic_write_command>
	graphic_write_command(LCD_SET_PAGE, B_CS1|B_CS2);
2000048c:	2118      	movs	r1, #24
2000048e:	20b8      	movs	r0, #184	; 0xb8
20000490:	f7ff ff7a 	bl	20000388 <graphic_write_command>
	select_controller(0);
20000494:	2000      	movs	r0, #0
20000496:	f7ff fe89 	bl	200001ac <select_controller>
}
2000049a:	46c0      	nop			; (mov r8, r8)
2000049c:	46bd      	mov	sp, r7
2000049e:	bd80      	pop	{r7, pc}

200004a0 <graphic_clear_screen>:

void graphic_clear_screen(void) {
200004a0:	b580      	push	{r7, lr}
200004a2:	b082      	sub	sp, #8
200004a4:	af00      	add	r7, sp, #0
	for(int page = 0; page < page; page++) {
200004a6:	2300      	movs	r3, #0
200004a8:	607b      	str	r3, [r7, #4]
200004aa:	46c0      	nop			; (mov r8, r8)
		graphic_write_command(LCD_SET_ADD | 0, B_CS1|B_CS2);
		for(int address = 0; address < 64; address++) {
			graphic_write_data(0, B_CS1|B_CS2);
		}
	}
}
200004ac:	46c0      	nop			; (mov r8, r8)
200004ae:	46bd      	mov	sp, r7
200004b0:	b002      	add	sp, #8
200004b2:	bd80      	pop	{r7, pc}

200004b4 <pixel>:

void pixel(uint8_t x, uint8_t y, uint8_t set) {
200004b4:	b5f0      	push	{r4, r5, r6, r7, lr}
200004b6:	b087      	sub	sp, #28
200004b8:	af00      	add	r7, sp, #0
200004ba:	0004      	movs	r4, r0
200004bc:	0008      	movs	r0, r1
200004be:	0011      	movs	r1, r2
200004c0:	1dfb      	adds	r3, r7, #7
200004c2:	1c22      	adds	r2, r4, #0
200004c4:	701a      	strb	r2, [r3, #0]
200004c6:	1dbb      	adds	r3, r7, #6
200004c8:	1c02      	adds	r2, r0, #0
200004ca:	701a      	strb	r2, [r3, #0]
200004cc:	1d7b      	adds	r3, r7, #5
200004ce:	1c0a      	adds	r2, r1, #0
200004d0:	701a      	strb	r2, [r3, #0]
	uint8_t mask, controller, x_actual, temp;
	int index;
	
	if((x < 1) || (y < 1) || (x > 128) || (y > 64))  {
200004d2:	1dfb      	adds	r3, r7, #7
200004d4:	781b      	ldrb	r3, [r3, #0]
200004d6:	2b00      	cmp	r3, #0
200004d8:	d100      	bne.n	200004dc <pixel+0x28>
200004da:	e09a      	b.n	20000612 <pixel+0x15e>
200004dc:	1dbb      	adds	r3, r7, #6
200004de:	781b      	ldrb	r3, [r3, #0]
200004e0:	2b00      	cmp	r3, #0
200004e2:	d100      	bne.n	200004e6 <pixel+0x32>
200004e4:	e095      	b.n	20000612 <pixel+0x15e>
200004e6:	1dfb      	adds	r3, r7, #7
200004e8:	781b      	ldrb	r3, [r3, #0]
200004ea:	2b80      	cmp	r3, #128	; 0x80
200004ec:	d900      	bls.n	200004f0 <pixel+0x3c>
200004ee:	e090      	b.n	20000612 <pixel+0x15e>
200004f0:	1dbb      	adds	r3, r7, #6
200004f2:	781b      	ldrb	r3, [r3, #0]
200004f4:	2b40      	cmp	r3, #64	; 0x40
200004f6:	d900      	bls.n	200004fa <pixel+0x46>
200004f8:	e08b      	b.n	20000612 <pixel+0x15e>
		return 0;
	}
	
	index = (y-1) / 8;
200004fa:	1dbb      	adds	r3, r7, #6
200004fc:	781b      	ldrb	r3, [r3, #0]
200004fe:	3b01      	subs	r3, #1
20000500:	2b00      	cmp	r3, #0
20000502:	da00      	bge.n	20000506 <pixel+0x52>
20000504:	3307      	adds	r3, #7
20000506:	10db      	asrs	r3, r3, #3
20000508:	613b      	str	r3, [r7, #16]
	
	mask = 1 << ((y-1) % 8);
2000050a:	1dbb      	adds	r3, r7, #6
2000050c:	781b      	ldrb	r3, [r3, #0]
2000050e:	3b01      	subs	r3, #1
20000510:	4a42      	ldr	r2, [pc, #264]	; (2000061c <pixel+0x168>)
20000512:	4013      	ands	r3, r2
20000514:	d504      	bpl.n	20000520 <pixel+0x6c>
20000516:	3b01      	subs	r3, #1
20000518:	2208      	movs	r2, #8
2000051a:	4252      	negs	r2, r2
2000051c:	4313      	orrs	r3, r2
2000051e:	3301      	adds	r3, #1
20000520:	001a      	movs	r2, r3
20000522:	2301      	movs	r3, #1
20000524:	4093      	lsls	r3, r2
20000526:	001a      	movs	r2, r3
20000528:	2117      	movs	r1, #23
2000052a:	187b      	adds	r3, r7, r1
2000052c:	701a      	strb	r2, [r3, #0]
	
	if (set == 0) {
2000052e:	1d7b      	adds	r3, r7, #5
20000530:	781b      	ldrb	r3, [r3, #0]
20000532:	2b00      	cmp	r3, #0
20000534:	d104      	bne.n	20000540 <pixel+0x8c>
		mask = ~mask;
20000536:	187b      	adds	r3, r7, r1
20000538:	187a      	adds	r2, r7, r1
2000053a:	7812      	ldrb	r2, [r2, #0]
2000053c:	43d2      	mvns	r2, r2
2000053e:	701a      	strb	r2, [r3, #0]
	}
	
	if (x > 64) {
20000540:	1dfb      	adds	r3, r7, #7
20000542:	781b      	ldrb	r3, [r3, #0]
20000544:	2b40      	cmp	r3, #64	; 0x40
20000546:	d90a      	bls.n	2000055e <pixel+0xaa>
		controller = B_CS2;
20000548:	2316      	movs	r3, #22
2000054a:	18fb      	adds	r3, r7, r3
2000054c:	2210      	movs	r2, #16
2000054e:	701a      	strb	r2, [r3, #0]
		x_actual = x - 65;
20000550:	2315      	movs	r3, #21
20000552:	18fb      	adds	r3, r7, r3
20000554:	1dfa      	adds	r2, r7, #7
20000556:	7812      	ldrb	r2, [r2, #0]
20000558:	3a41      	subs	r2, #65	; 0x41
2000055a:	701a      	strb	r2, [r3, #0]
2000055c:	e009      	b.n	20000572 <pixel+0xbe>
	} else {
		controller = B_CS1;
2000055e:	2316      	movs	r3, #22
20000560:	18fb      	adds	r3, r7, r3
20000562:	2208      	movs	r2, #8
20000564:	701a      	strb	r2, [r3, #0]
		x_actual = x - 1;
20000566:	2315      	movs	r3, #21
20000568:	18fb      	adds	r3, r7, r3
2000056a:	1dfa      	adds	r2, r7, #7
2000056c:	7812      	ldrb	r2, [r2, #0]
2000056e:	3a01      	subs	r2, #1
20000570:	701a      	strb	r2, [r3, #0]
	}
	
	graphic_write_command(LCD_SET_ADD | x_actual, controller);
20000572:	2615      	movs	r6, #21
20000574:	19bb      	adds	r3, r7, r6
20000576:	781b      	ldrb	r3, [r3, #0]
20000578:	2240      	movs	r2, #64	; 0x40
2000057a:	4313      	orrs	r3, r2
2000057c:	b2da      	uxtb	r2, r3
2000057e:	2516      	movs	r5, #22
20000580:	197b      	adds	r3, r7, r5
20000582:	781b      	ldrb	r3, [r3, #0]
20000584:	0019      	movs	r1, r3
20000586:	0010      	movs	r0, r2
20000588:	f7ff fefe 	bl	20000388 <graphic_write_command>
	graphic_write_command(LCD_SET_PAGE | index, controller);
2000058c:	693b      	ldr	r3, [r7, #16]
2000058e:	b25b      	sxtb	r3, r3
20000590:	2248      	movs	r2, #72	; 0x48
20000592:	4252      	negs	r2, r2
20000594:	4313      	orrs	r3, r2
20000596:	b25b      	sxtb	r3, r3
20000598:	b2da      	uxtb	r2, r3
2000059a:	197b      	adds	r3, r7, r5
2000059c:	781b      	ldrb	r3, [r3, #0]
2000059e:	0019      	movs	r1, r3
200005a0:	0010      	movs	r0, r2
200005a2:	f7ff fef1 	bl	20000388 <graphic_write_command>
	temp = graphic_read_data(controller);
200005a6:	230f      	movs	r3, #15
200005a8:	18fc      	adds	r4, r7, r3
200005aa:	197b      	adds	r3, r7, r5
200005ac:	781b      	ldrb	r3, [r3, #0]
200005ae:	0018      	movs	r0, r3
200005b0:	f7ff ff2d 	bl	2000040e <graphic_read_data>
200005b4:	0003      	movs	r3, r0
200005b6:	7023      	strb	r3, [r4, #0]
	graphic_write_command(LCD_SET_ADD | x_actual, controller);
200005b8:	19bb      	adds	r3, r7, r6
200005ba:	781b      	ldrb	r3, [r3, #0]
200005bc:	2240      	movs	r2, #64	; 0x40
200005be:	4313      	orrs	r3, r2
200005c0:	b2da      	uxtb	r2, r3
200005c2:	197b      	adds	r3, r7, r5
200005c4:	781b      	ldrb	r3, [r3, #0]
200005c6:	0019      	movs	r1, r3
200005c8:	0010      	movs	r0, r2
200005ca:	f7ff fedd 	bl	20000388 <graphic_write_command>
	
	if (set == 1) {
200005ce:	1d7b      	adds	r3, r7, #5
200005d0:	781b      	ldrb	r3, [r3, #0]
200005d2:	2b01      	cmp	r3, #1
200005d4:	d109      	bne.n	200005ea <pixel+0x136>
		mask = mask | temp;
200005d6:	2117      	movs	r1, #23
200005d8:	187b      	adds	r3, r7, r1
200005da:	1879      	adds	r1, r7, r1
200005dc:	220f      	movs	r2, #15
200005de:	18ba      	adds	r2, r7, r2
200005e0:	7809      	ldrb	r1, [r1, #0]
200005e2:	7812      	ldrb	r2, [r2, #0]
200005e4:	430a      	orrs	r2, r1
200005e6:	701a      	strb	r2, [r3, #0]
200005e8:	e008      	b.n	200005fc <pixel+0x148>
	} else {
		mask = mask & temp;
200005ea:	2217      	movs	r2, #23
200005ec:	18bb      	adds	r3, r7, r2
200005ee:	18ba      	adds	r2, r7, r2
200005f0:	210f      	movs	r1, #15
200005f2:	1879      	adds	r1, r7, r1
200005f4:	7812      	ldrb	r2, [r2, #0]
200005f6:	7809      	ldrb	r1, [r1, #0]
200005f8:	400a      	ands	r2, r1
200005fa:	701a      	strb	r2, [r3, #0]
	}
	
	graphic_write_data(mask, controller);
200005fc:	2316      	movs	r3, #22
200005fe:	18fb      	adds	r3, r7, r3
20000600:	781a      	ldrb	r2, [r3, #0]
20000602:	2317      	movs	r3, #23
20000604:	18fb      	adds	r3, r7, r3
20000606:	781b      	ldrb	r3, [r3, #0]
20000608:	0011      	movs	r1, r2
2000060a:	0018      	movs	r0, r3
2000060c:	f7ff fedc 	bl	200003c8 <graphic_write_data>
20000610:	e000      	b.n	20000614 <pixel+0x160>
		return 0;
20000612:	46c0      	nop			; (mov r8, r8)
}
20000614:	46bd      	mov	sp, r7
20000616:	b007      	add	sp, #28
20000618:	bdf0      	pop	{r4, r5, r6, r7, pc}
2000061a:	46c0      	nop			; (mov r8, r8)
2000061c:	80000007 	andhi	r0, r0, r7

20000620 <app_init>:

void app_init() {
20000620:	b580      	push	{r7, lr}
20000622:	af00      	add	r7, sp, #0
	*GPIO_MODER &= 0x00000000;
20000624:	4b06      	ldr	r3, [pc, #24]	; (20000640 <app_init+0x20>)
20000626:	681b      	ldr	r3, [r3, #0]
20000628:	4b05      	ldr	r3, [pc, #20]	; (20000640 <app_init+0x20>)
2000062a:	2200      	movs	r2, #0
2000062c:	601a      	str	r2, [r3, #0]
	*GPIO_MODER |= 0x55555555;
2000062e:	4b04      	ldr	r3, [pc, #16]	; (20000640 <app_init+0x20>)
20000630:	681a      	ldr	r2, [r3, #0]
20000632:	4b03      	ldr	r3, [pc, #12]	; (20000640 <app_init+0x20>)
20000634:	4903      	ldr	r1, [pc, #12]	; (20000644 <app_init+0x24>)
20000636:	430a      	orrs	r2, r1
20000638:	601a      	str	r2, [r3, #0]
}
2000063a:	46c0      	nop			; (mov r8, r8)
2000063c:	46bd      	mov	sp, r7
2000063e:	bd80      	pop	{r7, pc}
20000640:	40021000 	andmi	r1, r2, r0
20000644:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20000648 <main>:

void main(void)
{
20000648:	b580      	push	{r7, lr}
2000064a:	b082      	sub	sp, #8
2000064c:	af00      	add	r7, sp, #0
	unsigned int i;
	app_init();
2000064e:	f7ff ffe7 	bl	20000620 <app_init>
	graphic_initialize();
20000652:	f7ff fef1 	bl	20000438 <graphic_initialize>
	#ifndef SIMULATOR
		graphic_clear_screen();
	#endif
	
	for (i = 0; i < 128; i++) {
20000656:	2300      	movs	r3, #0
20000658:	607b      	str	r3, [r7, #4]
2000065a:	e009      	b.n	20000670 <main+0x28>
		pixel(i, 10, 1);
2000065c:	687b      	ldr	r3, [r7, #4]
2000065e:	b2db      	uxtb	r3, r3
20000660:	2201      	movs	r2, #1
20000662:	210a      	movs	r1, #10
20000664:	0018      	movs	r0, r3
20000666:	f7ff ff25 	bl	200004b4 <pixel>
	for (i = 0; i < 128; i++) {
2000066a:	687b      	ldr	r3, [r7, #4]
2000066c:	3301      	adds	r3, #1
2000066e:	607b      	str	r3, [r7, #4]
20000670:	687b      	ldr	r3, [r7, #4]
20000672:	2b7f      	cmp	r3, #127	; 0x7f
20000674:	d9f2      	bls.n	2000065c <main+0x14>
	}
	for (i = 0; i < 64; i++) {
20000676:	2300      	movs	r3, #0
20000678:	607b      	str	r3, [r7, #4]
2000067a:	e009      	b.n	20000690 <main+0x48>
		pixel(10, i, 1);
2000067c:	687b      	ldr	r3, [r7, #4]
2000067e:	b2db      	uxtb	r3, r3
20000680:	2201      	movs	r2, #1
20000682:	0019      	movs	r1, r3
20000684:	200a      	movs	r0, #10
20000686:	f7ff ff15 	bl	200004b4 <pixel>
	for (i = 0; i < 64; i++) {
2000068a:	687b      	ldr	r3, [r7, #4]
2000068c:	3301      	adds	r3, #1
2000068e:	607b      	str	r3, [r7, #4]
20000690:	687b      	ldr	r3, [r7, #4]
20000692:	2b3f      	cmp	r3, #63	; 0x3f
20000694:	d9f2      	bls.n	2000067c <main+0x34>
	}
	delay_milli(500);
20000696:	23fa      	movs	r3, #250	; 0xfa
20000698:	005b      	lsls	r3, r3, #1
2000069a:	0018      	movs	r0, r3
2000069c:	f7ff fd16 	bl	200000cc <delay_milli>
}
200006a0:	46c0      	nop			; (mov r8, r8)
200006a2:	46bd      	mov	sp, r7
200006a4:	b002      	add	sp, #8
200006a6:	bd80      	pop	{r7, pc}

200006a8 <__udivsi3>:
200006a8:	2200      	movs	r2, #0
200006aa:	0843      	lsrs	r3, r0, #1
200006ac:	428b      	cmp	r3, r1
200006ae:	d374      	bcc.n	2000079a <__udivsi3+0xf2>
200006b0:	0903      	lsrs	r3, r0, #4
200006b2:	428b      	cmp	r3, r1
200006b4:	d35f      	bcc.n	20000776 <__udivsi3+0xce>
200006b6:	0a03      	lsrs	r3, r0, #8
200006b8:	428b      	cmp	r3, r1
200006ba:	d344      	bcc.n	20000746 <__udivsi3+0x9e>
200006bc:	0b03      	lsrs	r3, r0, #12
200006be:	428b      	cmp	r3, r1
200006c0:	d328      	bcc.n	20000714 <__udivsi3+0x6c>
200006c2:	0c03      	lsrs	r3, r0, #16
200006c4:	428b      	cmp	r3, r1
200006c6:	d30d      	bcc.n	200006e4 <__udivsi3+0x3c>
200006c8:	22ff      	movs	r2, #255	; 0xff
200006ca:	0209      	lsls	r1, r1, #8
200006cc:	ba12      	rev	r2, r2
200006ce:	0c03      	lsrs	r3, r0, #16
200006d0:	428b      	cmp	r3, r1
200006d2:	d302      	bcc.n	200006da <__udivsi3+0x32>
200006d4:	1212      	asrs	r2, r2, #8
200006d6:	0209      	lsls	r1, r1, #8
200006d8:	d065      	beq.n	200007a6 <__udivsi3+0xfe>
200006da:	0b03      	lsrs	r3, r0, #12
200006dc:	428b      	cmp	r3, r1
200006de:	d319      	bcc.n	20000714 <__udivsi3+0x6c>
200006e0:	e000      	b.n	200006e4 <__udivsi3+0x3c>
200006e2:	0a09      	lsrs	r1, r1, #8
200006e4:	0bc3      	lsrs	r3, r0, #15
200006e6:	428b      	cmp	r3, r1
200006e8:	d301      	bcc.n	200006ee <__udivsi3+0x46>
200006ea:	03cb      	lsls	r3, r1, #15
200006ec:	1ac0      	subs	r0, r0, r3
200006ee:	4152      	adcs	r2, r2
200006f0:	0b83      	lsrs	r3, r0, #14
200006f2:	428b      	cmp	r3, r1
200006f4:	d301      	bcc.n	200006fa <__udivsi3+0x52>
200006f6:	038b      	lsls	r3, r1, #14
200006f8:	1ac0      	subs	r0, r0, r3
200006fa:	4152      	adcs	r2, r2
200006fc:	0b43      	lsrs	r3, r0, #13
200006fe:	428b      	cmp	r3, r1
20000700:	d301      	bcc.n	20000706 <__udivsi3+0x5e>
20000702:	034b      	lsls	r3, r1, #13
20000704:	1ac0      	subs	r0, r0, r3
20000706:	4152      	adcs	r2, r2
20000708:	0b03      	lsrs	r3, r0, #12
2000070a:	428b      	cmp	r3, r1
2000070c:	d301      	bcc.n	20000712 <__udivsi3+0x6a>
2000070e:	030b      	lsls	r3, r1, #12
20000710:	1ac0      	subs	r0, r0, r3
20000712:	4152      	adcs	r2, r2
20000714:	0ac3      	lsrs	r3, r0, #11
20000716:	428b      	cmp	r3, r1
20000718:	d301      	bcc.n	2000071e <__udivsi3+0x76>
2000071a:	02cb      	lsls	r3, r1, #11
2000071c:	1ac0      	subs	r0, r0, r3
2000071e:	4152      	adcs	r2, r2
20000720:	0a83      	lsrs	r3, r0, #10
20000722:	428b      	cmp	r3, r1
20000724:	d301      	bcc.n	2000072a <__udivsi3+0x82>
20000726:	028b      	lsls	r3, r1, #10
20000728:	1ac0      	subs	r0, r0, r3
2000072a:	4152      	adcs	r2, r2
2000072c:	0a43      	lsrs	r3, r0, #9
2000072e:	428b      	cmp	r3, r1
20000730:	d301      	bcc.n	20000736 <__udivsi3+0x8e>
20000732:	024b      	lsls	r3, r1, #9
20000734:	1ac0      	subs	r0, r0, r3
20000736:	4152      	adcs	r2, r2
20000738:	0a03      	lsrs	r3, r0, #8
2000073a:	428b      	cmp	r3, r1
2000073c:	d301      	bcc.n	20000742 <__udivsi3+0x9a>
2000073e:	020b      	lsls	r3, r1, #8
20000740:	1ac0      	subs	r0, r0, r3
20000742:	4152      	adcs	r2, r2
20000744:	d2cd      	bcs.n	200006e2 <__udivsi3+0x3a>
20000746:	09c3      	lsrs	r3, r0, #7
20000748:	428b      	cmp	r3, r1
2000074a:	d301      	bcc.n	20000750 <__udivsi3+0xa8>
2000074c:	01cb      	lsls	r3, r1, #7
2000074e:	1ac0      	subs	r0, r0, r3
20000750:	4152      	adcs	r2, r2
20000752:	0983      	lsrs	r3, r0, #6
20000754:	428b      	cmp	r3, r1
20000756:	d301      	bcc.n	2000075c <__udivsi3+0xb4>
20000758:	018b      	lsls	r3, r1, #6
2000075a:	1ac0      	subs	r0, r0, r3
2000075c:	4152      	adcs	r2, r2
2000075e:	0943      	lsrs	r3, r0, #5
20000760:	428b      	cmp	r3, r1
20000762:	d301      	bcc.n	20000768 <__udivsi3+0xc0>
20000764:	014b      	lsls	r3, r1, #5
20000766:	1ac0      	subs	r0, r0, r3
20000768:	4152      	adcs	r2, r2
2000076a:	0903      	lsrs	r3, r0, #4
2000076c:	428b      	cmp	r3, r1
2000076e:	d301      	bcc.n	20000774 <__udivsi3+0xcc>
20000770:	010b      	lsls	r3, r1, #4
20000772:	1ac0      	subs	r0, r0, r3
20000774:	4152      	adcs	r2, r2
20000776:	08c3      	lsrs	r3, r0, #3
20000778:	428b      	cmp	r3, r1
2000077a:	d301      	bcc.n	20000780 <__udivsi3+0xd8>
2000077c:	00cb      	lsls	r3, r1, #3
2000077e:	1ac0      	subs	r0, r0, r3
20000780:	4152      	adcs	r2, r2
20000782:	0883      	lsrs	r3, r0, #2
20000784:	428b      	cmp	r3, r1
20000786:	d301      	bcc.n	2000078c <__udivsi3+0xe4>
20000788:	008b      	lsls	r3, r1, #2
2000078a:	1ac0      	subs	r0, r0, r3
2000078c:	4152      	adcs	r2, r2
2000078e:	0843      	lsrs	r3, r0, #1
20000790:	428b      	cmp	r3, r1
20000792:	d301      	bcc.n	20000798 <__udivsi3+0xf0>
20000794:	004b      	lsls	r3, r1, #1
20000796:	1ac0      	subs	r0, r0, r3
20000798:	4152      	adcs	r2, r2
2000079a:	1a41      	subs	r1, r0, r1
2000079c:	d200      	bcs.n	200007a0 <__udivsi3+0xf8>
2000079e:	4601      	mov	r1, r0
200007a0:	4152      	adcs	r2, r2
200007a2:	4610      	mov	r0, r2
200007a4:	4770      	bx	lr
200007a6:	e7ff      	b.n	200007a8 <__udivsi3+0x100>
200007a8:	b501      	push	{r0, lr}
200007aa:	2000      	movs	r0, #0
200007ac:	f000 f806 	bl	200007bc <__aeabi_idiv0>
200007b0:	bd02      	pop	{r1, pc}
200007b2:	46c0      	nop			; (mov r8, r8)

200007b4 <__aeabi_uidivmod>:
200007b4:	2900      	cmp	r1, #0
200007b6:	d0f7      	beq.n	200007a8 <__udivsi3+0x100>
200007b8:	e776      	b.n	200006a8 <__udivsi3>
200007ba:	4770      	bx	lr

200007bc <__aeabi_idiv0>:
200007bc:	4770      	bx	lr
200007be:	46c0      	nop			; (mov r8, r8)

Disassembly of section .debug_info:

00000000 <.debug_info>:
   0:	0000038a 	andeq	r0, r0, sl, lsl #7
   4:	00000004 	andeq	r0, r0, r4
   8:	01040000 	mrseq	r0, (UNDEF: 4)
   c:	00000044 	andeq	r0, r0, r4, asr #32
  10:	0000e40c 	andeq	lr, r0, ip, lsl #8
  14:	00022900 	andeq	r2, r2, r0, lsl #18
	...
  24:	01460200 	mrseq	r0, (UNDEF: 102)
  28:	24010000 	strcs	r0, [r1], #-0
  2c:	00003117 	andeq	r3, r0, r7, lsl r1
  30:	08010300 	stmdaeq	r1, {r8, r9}
  34:	0000014e 	andeq	r0, r0, lr, asr #2
  38:	00017104 	andeq	r7, r1, r4, lsl #2
  3c:	01170100 	tsteq	r7, r0, lsl #2
  40:	00064806 	andeq	r4, r6, r6, lsl #16
  44:	00006020 	andeq	r6, r0, r0, lsr #32
  48:	5e9c0100 	fmlple	f0, f4, f0
  4c:	05000000 	streq	r0, [r0, #-0]
  50:	19010069 	stmdbne	r1, {r0, r3, r5, r6}
  54:	005e0f01 	subseq	r0, lr, r1, lsl #30
  58:	91020000 	mrsls	r0, (UNDEF: 2)
  5c:	04030074 	streq	r0, [r3], #-116	; 0xffffff8c
  60:	00000c07 	andeq	r0, r0, r7, lsl #24
  64:	01a70600 			; <UNDEFINED> instruction: 0x01a70600
  68:	12010000 	andne	r0, r1, #0
  6c:	06200601 	strteq	r0, [r0], -r1, lsl #12
  70:	00282000 	eoreq	r2, r8, r0
  74:	9c010000 	stcls	0, cr0, [r1], {-0}
  78:	00003e07 	andeq	r3, r0, r7, lsl #28
  7c:	06ec0100 	strbteq	r0, [ip], r0, lsl #2
  80:	200004b4 			; <UNDEFINED> instruction: 0x200004b4
  84:	0000016c 	andeq	r0, r0, ip, ror #2
  88:	01039c01 	tsteq	r3, r1, lsl #24
  8c:	78080000 	stmdavc	r8, {}	; <UNPREDICTABLE>
  90:	14ec0100 	strbtne	r0, [ip], #256	; 0x100
  94:	00000025 	andeq	r0, r0, r5, lsr #32
  98:	08579102 	ldmdaeq	r7, {r1, r8, ip, pc}^
  9c:	ec010079 	stc	0, cr0, [r1], {121}	; 0x79
  a0:	0000251f 	andeq	r2, r0, pc, lsl r5
  a4:	56910200 	ldrpl	r0, [r1], r0, lsl #4
  a8:	74657308 	strbtvc	r7, [r5], #-776	; 0xfffffcf8
  ac:	2aec0100 	bcs	ffb004b4 <__aeabi_idiv0+0xdfaffcf8>
  b0:	00000025 	andeq	r0, r0, r5, lsr #32
  b4:	09559102 	ldmdbeq	r5, {r1, r8, ip, pc}^
  b8:	00000141 	andeq	r0, r0, r1, asr #2
  bc:	250aed01 	strcs	lr, [sl, #-3329]	; 0xfffff2ff
  c0:	02000000 	andeq	r0, r0, #0
  c4:	97096791 			; <UNDEFINED> instruction: 0x97096791
  c8:	01000001 	tsteq	r0, r1
  cc:	002510ed 	eoreq	r1, r5, sp, ror #1
  d0:	91020000 	mrsls	r0, (UNDEF: 2)
  d4:	02000966 	andeq	r0, r0, #1671168	; 0x198000
  d8:	ed010000 	stc	0, cr0, [r1, #-0]
  dc:	0000251c 	andeq	r2, r0, ip, lsl r5
  e0:	65910200 	ldrvs	r0, [r1, #512]	; 0x200
  e4:	0001a209 	andeq	sl, r1, r9, lsl #4
  e8:	26ed0100 	strbtcs	r0, [sp], r0, lsl #2
  ec:	00000025 	andeq	r0, r0, r5, lsr #32
  f0:	095f9102 	ldmdbeq	pc, {r1, r8, ip, pc}^	; <UNPREDICTABLE>
  f4:	00000019 	andeq	r0, r0, r9, lsl r0
  f8:	0306ee01 	movweq	lr, #28161	; 0x6e01
  fc:	02000001 	andeq	r0, r0, #1
 100:	0a006091 	beq	1834c <startup-0x1ffe7cb4>
 104:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
 108:	d50b0074 	strle	r0, [fp, #-116]	; 0xffffff8c
 10c:	01000001 	tsteq	r0, r1
 110:	04a006e2 	strteq	r0, [r0], #1762	; 0x6e2
 114:	00142000 	andseq	r2, r4, r0
 118:	9c010000 	stcls	0, cr0, [r1], {-0}
 11c:	00000148 	andeq	r0, r0, r8, asr #2
 120:	0004a60c 	andeq	sl, r4, ip, lsl #12
 124:	00000620 	andeq	r0, r0, r0, lsr #12
 128:	01bd0900 			; <UNDEFINED> instruction: 0x01bd0900
 12c:	e3010000 	movw	r0, #4096	; 0x1000
 130:	0001030a 	andeq	r0, r1, sl, lsl #6
 134:	74910200 	ldrvc	r0, [r1], #512	; 0x200
 138:	01310e0d 	teqeq	r1, sp, lsl #28
 13c:	e6010000 	str	r0, [r1], -r0
 140:	0001030b 	andeq	r0, r1, fp, lsl #6
 144:	00000000 	andeq	r0, r0, r0
 148:	00026c0f 	andeq	r6, r2, pc, lsl #24
 14c:	06d10100 	ldrbeq	r0, [r1], r0, lsl #2
 150:	20000438 	andcs	r0, r0, r8, lsr r4
 154:	00000068 	andeq	r0, r0, r8, rrx
 158:	2c109c01 	ldccs	12, cr9, [r0], {1}
 15c:	01000000 	mrseq	r0, (UNDEF: 0)
 160:	002509cc 	eoreq	r0, r5, ip, asr #19
 164:	040e0000 	streq	r0, [lr], #-0
 168:	002a2000 	eoreq	r2, sl, r0
 16c:	9c010000 	stcls	0, cr0, [r1], {-0}
 170:	00000184 	andeq	r0, r0, r4, lsl #3
 174:	00019711 	andeq	r9, r1, r1, lsl r7
 178:	23cc0100 	biccs	r0, ip, #0, 2
 17c:	00000025 	andeq	r0, r0, r5, lsr #32
 180:	00779102 	rsbseq	r9, r7, r2, lsl #2
 184:	00021607 	andeq	r1, r2, r7, lsl #12
 188:	06c40100 	strbeq	r0, [r4], r0, lsl #2
 18c:	200003c8 	andcs	r0, r0, r8, asr #7
 190:	00000046 	andeq	r0, r0, r6, asr #32
 194:	01b99c01 			; <UNDEFINED> instruction: 0x01b99c01
 198:	39110000 	ldmdbcc	r1, {}	; <UNPREDICTABLE>
 19c:	01000000 	mrseq	r0, (UNDEF: 0)
 1a0:	002521c4 	eoreq	r2, r5, r4, asr #3
 1a4:	91020000 	mrsls	r0, (UNDEF: 2)
 1a8:	01971177 	orrseq	r1, r7, r7, ror r1
 1ac:	c4010000 	strgt	r0, [r1], #-0
 1b0:	0000252f 	andeq	r2, r0, pc, lsr #10
 1b4:	76910200 	ldrvc	r0, [r1], r0, lsl #4
 1b8:	01ea0700 	mvneq	r0, r0, lsl #14
 1bc:	bd010000 	stclt	0, cr0, [r1, #-0]
 1c0:	00038806 	andeq	r8, r3, r6, lsl #16
 1c4:	00004020 	andeq	r4, r0, r0, lsr #32
 1c8:	ee9c0100 	fmle	f0, f4, f0
 1cc:	11000001 	tstne	r0, r1
 1d0:	000001f8 	strdeq	r0, [r0], -r8
 1d4:	2524bd01 	strcs	fp, [r4, #-3329]!	; 0xfffff2ff
 1d8:	02000000 	andeq	r0, r0, #0
 1dc:	97117791 			; <UNDEFINED> instruction: 0x97117791
 1e0:	01000001 	tsteq	r0, r1
 1e4:	002535bd 	strhteq	r3, [r5], -sp
 1e8:	91020000 	mrsls	r0, (UNDEF: 2)
 1ec:	82070076 	andhi	r0, r7, #118	; 0x76
 1f0:	01000001 	tsteq	r0, r1
 1f4:	030806a8 	movweq	r0, #34472	; 0x86a8
 1f8:	00802000 	addeq	r2, r0, r0
 1fc:	9c010000 	stcls	0, cr0, [r1], {-0}
 200:	00000223 	andeq	r0, r0, r3, lsr #4
 204:	0000de11 	andeq	sp, r0, r1, lsl lr
 208:	1ca80100 	stfnes	f0, [r8]
 20c:	00000025 	andeq	r0, r0, r5, lsr #32
 210:	11779102 	cmnne	r7, r2, lsl #2
 214:	00000197 	muleq	r0, r7, r1
 218:	252ba801 	strcs	sl, [fp, #-2049]!	; 0xfffff7ff
 21c:	02000000 	andeq	r0, r0, #0
 220:	10007691 	mulne	r0, r1, r6
 224:	000001b0 			; <UNDEFINED> instruction: 0x000001b0
 228:	25099101 	strcs	r9, [r9, #-257]	; 0xfffffeff
 22c:	74000000 	strvc	r0, [r0], #-0
 230:	94200002 	strtls	r0, [r0], #-2
 234:	01000000 	mrseq	r0, (UNDEF: 0)
 238:	00025c9c 	muleq	r2, ip, ip
 23c:	01971100 	orrseq	r1, r7, r0, lsl #2
 240:	91010000 	mrsls	r0, (UNDEF: 1)
 244:	0000251e 	andeq	r2, r0, lr, lsl r5
 248:	6f910200 	svcvs	0x00910200
 24c:	0000d709 	andeq	sp, r0, r9, lsl #14
 250:	0a920100 	beq	fe480658 <__aeabi_idiv0+0xde47fe9c>
 254:	00000025 	andeq	r0, r0, r5, lsr #32
 258:	00779102 	rsbseq	r9, r7, r2, lsl #2
 25c:	0001c20f 	andeq	ip, r1, pc, lsl #4
 260:	067e0100 	ldrbteq	r0, [lr], -r0, lsl #2
 264:	2000020e 	andcs	r0, r0, lr, lsl #4
 268:	00000066 	andeq	r0, r0, r6, rrx
 26c:	90129c01 	andsls	r9, r2, r1, lsl #24
 270:	01000001 	tsteq	r0, r1
 274:	01ac066b 			; <UNDEFINED> instruction: 0x01ac066b
 278:	00622000 	rsbeq	r2, r2, r0
 27c:	9c010000 	stcls	0, cr0, [r1], {-0}
 280:	00000294 	muleq	r0, r4, r2
 284:	00019711 	andeq	r9, r1, r1, lsl r7
 288:	066b0100 	strbteq	r0, [fp], -r0, lsl #2
 28c:	00000103 	andeq	r0, r0, r3, lsl #2
 290:	00749102 	rsbseq	r9, r4, r2, lsl #2
 294:	0000c00b 	andeq	ip, r0, fp
 298:	06640100 	strbteq	r0, [r4], -r0, lsl #2
 29c:	2000015c 	andcs	r0, r0, ip, asr r1
 2a0:	00000050 	andeq	r0, r0, r0, asr r0
 2a4:	02c59c01 	sbceq	r9, r5, #256	; 0x100
 2a8:	78080000 	stmdavc	r8, {}	; <UNPREDICTABLE>
 2ac:	25640100 	strbcs	r0, [r4, #-256]!	; 0xffffff00
 2b0:	00000025 	andeq	r0, r0, r5, lsr #32
 2b4:	136f9102 	cmnne	pc, #-2147483648	; 0x80000000
 2b8:	65010063 	strvs	r0, [r1, #-99]	; 0xffffff9d
 2bc:	0000250a 	andeq	r2, r0, sl, lsl #10
 2c0:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 2c4:	015c0b00 	cmpeq	ip, r0, lsl #22
 2c8:	5d010000 	stcpl	0, cr0, [r1, #-0]
 2cc:	00010c06 	andeq	r0, r1, r6, lsl #24
 2d0:	00005020 	andeq	r5, r0, r0, lsr #32
 2d4:	f69c0100 			; <UNDEFINED> instruction: 0xf69c0100
 2d8:	08000002 	stmdaeq	r0, {r1}
 2dc:	5d010078 	stcpl	0, cr0, [r1, #-480]	; 0xfffffe20
 2e0:	00002523 	andeq	r2, r0, r3, lsr #10
 2e4:	6f910200 	svcvs	0x00910200
 2e8:	01006313 	tsteq	r0, r3, lsl r3
 2ec:	00250a5e 	eoreq	r0, r5, lr, asr sl
 2f0:	91020000 	mrsls	r0, (UNDEF: 2)
 2f4:	00070077 	andeq	r0, r7, r7, ror r0
 2f8:	01000000 	mrseq	r0, (UNDEF: 0)
 2fc:	00cc0651 	sbceq	r0, ip, r1, asr r6
 300:	00402000 	subeq	r2, r0, r0
 304:	9c010000 	stcls	0, cr0, [r1], {-0}
 308:	0000031b 	andeq	r0, r0, fp, lsl r3
 30c:	00736d08 	rsbseq	r6, r3, r8, lsl #26
 310:	5e1f5101 	mufple	f5, f7, f1
 314:	02000000 	andeq	r0, r0, #0
 318:	07007491 			; <UNDEFINED> instruction: 0x07007491
 31c:	00000176 	andeq	r0, r0, r6, ror r1
 320:	80064301 	andhi	r4, r6, r1, lsl #6
 324:	4c200000 	stcmi	0, cr0, [r0], #-0
 328:	01000000 	mrseq	r0, (UNDEF: 0)
 32c:	0003579c 	muleq	r3, ip, r7
 330:	736d0800 	cmnvc	sp, #0, 16
 334:	1f430100 	svcne	0x00430100
 338:	0000005e 	andeq	r0, r0, lr, asr r0
 33c:	0c6c9102 	stfeqp	f1, [ip], #-8
 340:	200000a0 	andcs	r0, r0, r0, lsr #1
 344:	00000016 	andeq	r0, r0, r6, lsl r0
 348:	01006913 	tsteq	r0, r3, lsl r9
 34c:	01030b4a 	tsteq	r3, sl, asr #22
 350:	91020000 	mrsls	r0, (UNDEF: 2)
 354:	14000074 	strne	r0, [r0], #-116	; 0xffffff8c
 358:	0000001f 	andeq	r0, r0, pc, lsl r0
 35c:	48063a01 	stmdami	r6, {r0, r9, fp, ip, sp}
 360:	38200000 	stmdacc	r0!, {}	; <UNPREDICTABLE>
 364:	01000000 	mrseq	r0, (UNDEF: 0)
 368:	0209149c 	andeq	r1, r9, #156, 8	; 0x9c000000
 36c:	31010000 	mrscc	r0, (UNDEF: 1)
 370:	00001006 	andeq	r1, r0, r6
 374:	00003820 	andeq	r3, r0, r0, lsr #16
 378:	149c0100 	ldrne	r0, [ip], #256	; 0x100
 37c:	00000139 	andeq	r0, r0, r9, lsr r1
 380:	00062701 	andeq	r2, r6, r1, lsl #14
 384:	0c200000 	stceq	0, cr0, [r0], #-0
 388:	01000000 	mrseq	r0, (UNDEF: 0)
 38c:	Address 0x0000038c is out of bounds.


Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
   0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
   4:	030b130e 	movweq	r1, #45838	; 0xb30e
   8:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
   c:	10011117 	andne	r1, r1, r7, lsl r1
  10:	02000017 	andeq	r0, r0, #23
  14:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
  18:	0b3b0b3a 	bleq	ec2d08 <startup-0x1f13d2f8>
  1c:	13490b39 	movtne	r0, #39737	; 0x9b39
  20:	24030000 	strcs	r0, [r3], #-0
  24:	3e0b0b00 	vmlacc.f64	d0, d11, d0
  28:	000e030b 	andeq	r0, lr, fp, lsl #6
  2c:	012e0400 			; <UNDEFINED> instruction: 0x012e0400
  30:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
  34:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
  38:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
  3c:	06120111 			; <UNDEFINED> instruction: 0x06120111
  40:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
  44:	00130119 	andseq	r0, r3, r9, lsl r1
  48:	00340500 	eorseq	r0, r4, r0, lsl #10
  4c:	0b3a0803 	bleq	e82060 <startup-0x1f17dfa0>
  50:	0b39053b 	bleq	e41544 <startup-0x1f1beabc>
  54:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
  58:	2e060000 	cdpcs	0, 0, cr0, cr6, cr0, {0}
  5c:	03193f00 	tsteq	r9, #0, 30
  60:	3b0b3a0e 	blcc	2ce8a0 <startup-0x1fd31760>
  64:	110b3905 	tstne	fp, r5, lsl #18
  68:	40061201 	andmi	r1, r6, r1, lsl #4
  6c:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
  70:	2e070000 	cdpcs	0, 0, cr0, cr7, cr0, {0}
  74:	03193f01 	tsteq	r9, #1, 30
  78:	3b0b3a0e 	blcc	2ce8b8 <startup-0x1fd31748>
  7c:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
  80:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
  84:	96184006 	ldrls	r4, [r8], -r6
  88:	13011942 	movwne	r1, #6466	; 0x1942
  8c:	05080000 	streq	r0, [r8, #-0]
  90:	3a080300 	bcc	200c98 <startup-0x1fdff368>
  94:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  98:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
  9c:	09000018 	stmdbeq	r0, {r3, r4}
  a0:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
  a4:	0b3b0b3a 	bleq	ec2d94 <startup-0x1f13d26c>
  a8:	13490b39 	movtne	r0, #39737	; 0x9b39
  ac:	00001802 	andeq	r1, r0, r2, lsl #16
  b0:	0b00240a 	bleq	90e0 <startup-0x1fff6f20>
  b4:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
  b8:	0b000008 	bleq	e0 <startup-0x1fffff20>
  bc:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
  c0:	0b3a0e03 	bleq	e838d4 <startup-0x1f17c72c>
  c4:	0b390b3b 	bleq	e42db8 <startup-0x1f1bd248>
  c8:	01111927 	tsteq	r1, r7, lsr #18
  cc:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
  d0:	01194297 			; <UNDEFINED> instruction: 0x01194297
  d4:	0c000013 	stceq	0, cr0, [r0], {19}
  d8:	0111010b 	tsteq	r1, fp, lsl #2
  dc:	00000612 	andeq	r0, r0, r2, lsl r6
  e0:	00010b0d 	andeq	r0, r1, sp, lsl #22
  e4:	00340e00 	eorseq	r0, r4, r0, lsl #28
  e8:	0b3a0e03 	bleq	e838fc <startup-0x1f17c704>
  ec:	0b390b3b 	bleq	e42de0 <startup-0x1f1bd220>
  f0:	00001349 	andeq	r1, r0, r9, asr #6
  f4:	3f002e0f 	svccc	0x00002e0f
  f8:	3a0e0319 	bcc	380d64 <startup-0x1fc7f29c>
  fc:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 100:	1119270b 	tstne	r9, fp, lsl #14
 104:	40061201 	andmi	r1, r6, r1, lsl #4
 108:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 10c:	2e100000 	cdpcs	0, 1, cr0, cr0, cr0, {0}
 110:	03193f01 	tsteq	r9, #1, 30
 114:	3b0b3a0e 	blcc	2ce954 <startup-0x1fd316ac>
 118:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
 11c:	11134919 	tstne	r3, r9, lsl r9
 120:	40061201 	andmi	r1, r6, r1, lsl #4
 124:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 128:	00001301 	andeq	r1, r0, r1, lsl #6
 12c:	03000511 	movweq	r0, #1297	; 0x511
 130:	3b0b3a0e 	blcc	2ce970 <startup-0x1fd31690>
 134:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 138:	00180213 	andseq	r0, r8, r3, lsl r2
 13c:	012e1200 			; <UNDEFINED> instruction: 0x012e1200
 140:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 144:	0b3b0b3a 	bleq	ec2e34 <startup-0x1f13d1cc>
 148:	01110b39 	tsteq	r1, r9, lsr fp
 14c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 150:	01194296 			; <UNDEFINED> instruction: 0x01194296
 154:	13000013 	movwne	r0, #19
 158:	08030034 	stmdaeq	r3, {r2, r4, r5}
 15c:	0b3b0b3a 	bleq	ec2e4c <startup-0x1f13d1b4>
 160:	13490b39 	movtne	r0, #39737	; 0x9b39
 164:	00001802 	andeq	r1, r0, r2, lsl #16
 168:	3f002e14 	svccc	0x00002e14
 16c:	3a0e0319 	bcc	380dd8 <startup-0x1fc7f228>
 170:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 174:	1119270b 	tstne	r9, fp, lsl #14
 178:	40061201 	andmi	r1, r6, r1, lsl #4
 17c:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 180:	Address 0x00000180 is out of bounds.


Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	00000024 	andeq	r0, r0, r4, lsr #32
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	20000010 	andcs	r0, r0, r0, lsl r0
  14:	00000698 	muleq	r0, r8, r6
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	20000010 	andcs	r0, r0, r0, lsl r0
   4:	200006a8 	andcs	r0, r0, r8, lsr #13
   8:	20000000 	andcs	r0, r0, r0
   c:	2000000c 	andcs	r0, r0, ip
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
   0:	000002fd 	strdeq	r0, [r0], -sp
   4:	00630003 	rsbeq	r0, r3, r3
   8:	01020000 	mrseq	r0, (UNDEF: 2)
   c:	000d0efb 	strdeq	r0, [sp], -fp
  10:	01010101 	tsteq	r1, r1, lsl #2
  14:	01000000 	mrseq	r0, (UNDEF: 0)
  18:	43010000 	movwmi	r0, #4096	; 0x1000
  1c:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
  20:	2f737265 	svccs	0x00737265
  24:	6c726163 	ldfvse	f6, [r2], #-396	; 0xfffffe74
  28:	6e4f2f73 	mcrvs	15, 2, r2, cr15, cr3, {3}
  2c:	69724465 	ldmdbvs	r2!, {r0, r2, r5, r6, sl, lr}^
  30:	432f6576 			; <UNDEFINED> instruction: 0x432f6576
  34:	6d6c6168 	stfvse	f6, [ip, #-416]!	; 0xfffffe60
  38:	2f737265 	svccs	0x00737265
  3c:	30544144 	subscc	r4, r4, r4, asr #2
  40:	4c2f3731 	stcmi	7, cr3, [pc], #-196	; ffffff84 <__aeabi_idiv0+0xdffff7c8>
  44:	726f6261 	rsbvc	r6, pc, #268435462	; 0x10000006
  48:	6f697461 	svcvs	0x00697461
  4c:	672f326e 	strvs	r3, [pc, -lr, ror #4]!
  50:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
  54:	69646369 	stmdbvs	r4!, {r0, r3, r5, r6, r8, r9, sp, lr}^
  58:	616c7073 	smcvs	50947	; 0xc703
  5c:	73000079 	movwvc	r0, #121	; 0x79
  60:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
  64:	632e7075 			; <UNDEFINED> instruction: 0x632e7075
  68:	00000100 	andeq	r0, r0, r0, lsl #2
  6c:	00010500 	andeq	r0, r1, r0, lsl #10
  70:	00000205 	andeq	r0, r0, r5, lsl #4
  74:	27032000 	strcs	r2, [r3, -r0]
  78:	21211301 			; <UNDEFINED> instruction: 0x21211301
  7c:	0302212f 	movweq	r2, #8495	; 0x212f
  80:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
  84:	02050019 	andeq	r0, r5, #25
  88:	20000010 	andcs	r0, r0, r0, lsl r0
  8c:	05013003 	streq	r3, [r1, #-3]
  90:	0c052f02 	stceq	15, cr2, [r5], {2}
  94:	2f020520 	svccs	0x00020520
  98:	05200c05 	streq	r0, [r0, #-3077]!	; 0xfffff3fb
  9c:	0b052f02 	bleq	14bcac <startup-0x1feb4354>
  a0:	2f020520 	svccs	0x00020520
  a4:	05200c05 	streq	r0, [r0, #-3077]!	; 0xfffff3fb
  a8:	02052f07 	andeq	r2, r5, #7, 30
  ac:	200c0521 	andcs	r0, ip, r1, lsr #10
  b0:	052f0105 	streq	r0, [pc, #-261]!	; ffffffb3 <__aeabi_idiv0+0xdffff7f7>
  b4:	0205a019 	andeq	sl, r5, #25
  b8:	200c052f 	andcs	r0, ip, pc, lsr #10
  bc:	052f0205 	streq	r0, [pc, #-517]!	; fffffebf <__aeabi_idiv0+0xdffff703>
  c0:	0205200c 	andeq	r2, r5, #12
  c4:	200b052f 	andcs	r0, fp, pc, lsr #10
  c8:	052f0205 	streq	r0, [pc, #-517]!	; fffffecb <__aeabi_idiv0+0xdffff70f>
  cc:	0705200c 	streq	r2, [r5, -ip]
  d0:	2102052f 	tstcs	r2, pc, lsr #10
  d4:	05200c05 	streq	r0, [r0, #-3077]!	; 0xfffff3fb
  d8:	23052f01 	movwcs	r2, #24321	; 0x5f01
  dc:	4c0605a0 	cfstr32mi	mvfx0, [r6], {160}	; 0xa0
  e0:	05830505 	streq	r0, [r3, #1285]	; 0x505
  e4:	0b053f07 	bleq	14fd08 <startup-0x1feb02f8>
  e8:	2e030521 	cfsh32cs	mvfx0, mvfx3, #17
  ec:	02000405 	andeq	r0, r0, #83886080	; 0x5000000
  f0:	05210304 	streq	r0, [r1, #-772]!	; 0xfffffcfc
  f4:	0402001a 	streq	r0, [r2], #-26	; 0xffffffe6
  f8:	03052d03 	movweq	r2, #23811	; 0x5d03
  fc:	01040200 	mrseq	r0, R12_usr
 100:	3f05053c 	svccc	0x0005053c
 104:	05380705 	ldreq	r0, [r8, #-1797]!	; 0xfffff8fb
 108:	23054201 	movwcs	r4, #20993	; 0x5201
 10c:	4c06055a 	cfstr32mi	mvfx0, [r6], {90}	; 0x5a
 110:	05830505 	streq	r0, [r3, #1285]	; 0x505
 114:	03053f07 	movweq	r3, #24327	; 0x5f07
 118:	59050521 	stmdbpl	r5, {r0, r5, r8, sl}
 11c:	053a0705 	ldreq	r0, [sl, #-1797]!	; 0xfffff8fb
 120:	26054001 	strcs	r4, [r5], -r1
 124:	670e055a 	smlsdvs	lr, sl, r5, r0
 128:	05200a05 	streq	r0, [r0, #-2565]!	; 0xfffff5fb
 12c:	12054b04 	andne	r4, r5, #4, 22	; 0x1000
 130:	66040567 	strvs	r0, [r4], -r7, ror #10
 134:	05750205 	ldrbeq	r0, [r5, #-517]!	; 0xfffffdfb
 138:	01052010 	tsteq	r5, r0, lsl r0
 13c:	6828053d 	stmdavs	r8!, {r0, r2, r3, r4, r5, r8, sl}
 140:	05670e05 	strbeq	r0, [r7, #-3589]!	; 0xfffff1fb
 144:	0405200a 	streq	r2, [r5], #-10
 148:	0205674b 	andeq	r6, r5, #19660800	; 0x12c0000
 14c:	201005bb 			; <UNDEFINED> instruction: 0x201005bb
 150:	053d0105 	ldreq	r0, [sp, #-261]!	; 0xfffffefb
 154:	02057624 	andeq	r7, r5, #36, 12	; 0x2400000
 158:	0301054b 	movweq	r0, #5451	; 0x154b
 15c:	05200810 	streq	r0, [r0, #-2064]!	; 0xfffff7f0
 160:	20720304 	rsbscs	r0, r2, r4, lsl #6
 164:	3d3d223d 	lfmcc	f2, 4, [sp, #-244]!	; 0xffffff0c
 168:	223d3d22 	eorscs	r3, sp, #2176	; 0x880
 16c:	2201053d 	andcs	r0, r1, #255852544	; 0xf400000
 170:	054c1f05 	strbeq	r1, [ip, #-3845]	; 0xfffff0fb
 174:	053d2f02 	ldreq	r2, [sp, #-3842]!	; 0xfffff0fe
 178:	0205200e 	andeq	r2, r5, #14
 17c:	053d3d2f 	ldreq	r3, [sp, #-3375]!	; 0xfffff2d1
 180:	2f3d3003 	svccs	0x003d3003
 184:	2f07053d 	svccs	0x0007053d
 188:	053c2105 	ldreq	r2, [ip, #-261]!	; 0xfffffefb
 18c:	03052005 	movweq	r2, #20485	; 0x5005
 190:	2504052a 	strcs	r0, [r4, #-1322]	; 0xfffffad6
 194:	3d230205 	sfmcc	f0, 4, [r3, #-20]!	; 0xffffffec
 198:	05200e05 	streq	r0, [r0, #-3589]!	; 0xfffff1fb
 19c:	2a052f01 	bcs	14bda8 <startup-0x1feb4258>
 1a0:	680205ae 	stmdavs	r2, {r1, r2, r3, r5, r7, r8, sl}
 1a4:	200e053d 	andcs	r0, lr, sp, lsr r5
 1a8:	3d2f0205 	sfmcc	f0, 4, [pc, #-20]!	; 19c <startup-0x1ffffe64>
 1ac:	053d2f59 	ldreq	r2, [sp, #-3929]!	; 0xfffff0a7
 1b0:	0f052f11 	svceq	0x00052f11
 1b4:	4b020520 	blmi	8163c <startup-0x1ff7e9c4>
 1b8:	200e053d 	andcs	r0, lr, sp, lsr r5
 1bc:	05301005 	ldreq	r1, [r0, #-5]!
 1c0:	03054a04 	movweq	r4, #23044	; 0x5a04
 1c4:	17053d21 	strne	r3, [r5, -r1, lsr #26]
 1c8:	4a0b053d 	bmi	2c16c4 <startup-0x1fd3e93c>
 1cc:	3d210305 	stccc	3, cr0, [r1, #-20]!	; 0xffffffec
 1d0:	05300905 	ldreq	r0, [r0, #-2309]!	; 0xfffff6fb
 1d4:	37053d01 	strcc	r3, [r5, -r1, lsl #26]
 1d8:	910205bc 			; <UNDEFINED> instruction: 0x910205bc
 1dc:	05201105 	streq	r1, [r0, #-261]!	; 0xfffffefb
 1e0:	2f593d02 	svccs	0x00593d02
 1e4:	10052f3d 	andne	r2, r5, sp, lsr pc
 1e8:	4a04053e 	bmi	1016e8 <startup-0x1fefe918>
 1ec:	3d210305 	stccc	3, cr0, [r1, #-20]!	; 0xffffffec
 1f0:	053d1705 	ldreq	r1, [sp, #-1797]!	; 0xfffff8fb
 1f4:	03054a0b 	movweq	r4, #23051	; 0x5a0b
 1f8:	02053d21 	andeq	r3, r5, #2112	; 0x840
 1fc:	20110531 	andscs	r0, r1, r1, lsr r5
 200:	3d2f0205 	sfmcc	f0, 4, [pc, #-20]!	; 1f4 <startup-0x1ffffe0c>
 204:	053d0105 	ldreq	r0, [sp, #-261]!	; 0xfffffefb
 208:	02056841 	andeq	r6, r5, #4259840	; 0x410000
 20c:	3d593d91 	ldclcc	13, cr3, [r9, #-580]	; 0xfffffdbc
 210:	05830105 	streq	r0, [r3, #261]	; 0x105
 214:	02054c3b 	andeq	r4, r5, #15104	; 0x3b00
 218:	3d593d91 	ldclcc	13, cr3, [r9, #-580]	; 0xfffffdbc
 21c:	8301053d 	movwhi	r0, #5437	; 0x153d
 220:	054c2f05 	strbeq	r2, [ip, #-3845]	; 0xfffff0fb
 224:	09056702 	stmdbeq	r5, {r1, r8, r9, sl, sp, lr}
 228:	67010559 	smlsdvs	r1, r9, r5, r0
 22c:	054c1f05 	strbeq	r1, [ip, #-3845]	; 0xfffff0fb
 230:	3d3d2f02 	ldccc	15, cr2, [sp, #-8]!
 234:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
 238:	4b4b3d3d 	blmi	12cf734 <startup-0x1ed308cc>
 23c:	054b4b4b 	strbeq	r4, [fp, #-2891]	; 0xfffff4b5
 240:	21053d01 	tstcs	r5, r1, lsl #26
 244:	3d0a053e 	cfstr32cc	mvfx0, [sl, #-248]	; 0xffffff08
 248:	052e0205 	streq	r0, [lr, #-517]!	; 0xfffffdfb
 24c:	2f052701 	svccs	0x00052701
 250:	e804054c 	stmda	r4, {r2, r3, r6, r8, sl}
 254:	02000d05 	andeq	r0, r0, #320	; 0x140
 258:	05580104 	ldrbeq	r0, [r8, #-260]	; 0xfffffefc
 25c:	04020018 	streq	r0, [r2], #-24	; 0xffffffe8
 260:	25055802 	strcs	r5, [r5, #-2050]	; 0xfffff7fe
 264:	03040200 	movweq	r0, #16896	; 0x4200
 268:	5c0c0558 	cfstr32pl	mvfx0, [ip], {88}	; 0x58
 26c:	053c0805 	ldreq	r0, [ip, #-2053]!	; 0xfffff7fb
 270:	15055a11 	strne	r5, [r5, #-2577]	; 0xfffff5ef
 274:	900b053c 	andls	r0, fp, ip, lsr r5
 278:	053c0705 	ldreq	r0, [ip, #-1797]!	; 0xfffff8fb
 27c:	08053e05 	stmdaeq	r5, {r0, r2, r9, sl, fp, ip, sp}
 280:	5b05054b 	blpl	1417b4 <startup-0x1febe84c>
 284:	054b0e05 	strbeq	r0, [fp, #-3589]	; 0xfffff1fb
 288:	0e054b0c 	vmlaeq.f64	d4, d5, d12
 28c:	4b0c0576 	blmi	30186c <startup-0x1fcfe794>
 290:	05690205 	strbeq	r0, [r9, #-517]!	; 0xfffffdfb
 294:	0205c925 	andeq	ip, r5, #606208	; 0x94000
 298:	75090566 	strvc	r0, [r9, #-1382]	; 0xfffffa9a
 29c:	05910205 	ldreq	r0, [r1, #517]	; 0x205
 2a0:	0805ae05 	stmdaeq	r5, {r0, r2, r9, sl, fp, sp, pc}
 2a4:	0205a04b 	andeq	sl, r5, #75	; 0x4b
 2a8:	030a0593 	movweq	r0, #42387	; 0xa593
 2ac:	0105ac62 	tsteq	r5, r2, ror #24
 2b0:	05201f03 	streq	r1, [r0, #-3843]!	; 0xfffff0fd
 2b4:	0e056811 	mcreq	8, 0, r6, cr5, cr1, {0}
 2b8:	0105592f 	tsteq	r5, pc, lsr #18
 2bc:	02057767 	andeq	r7, r5, #27000832	; 0x19c0000
 2c0:	09052f3e 	stmdbeq	r5, {r1, r2, r3, r4, r5, r8, r9, sl, fp, sp}
 2c4:	2e020533 	mcrcs	5, 0, r0, cr2, cr3, {1}
 2c8:	02000305 	andeq	r0, r0, #335544320	; 0x14000000
 2cc:	05210304 	streq	r0, [r1, #-772]!	; 0xfffffcfc
 2d0:	04020018 	streq	r0, [r2], #-24	; 0xffffffe8
 2d4:	02057303 	andeq	r7, r5, #201326592	; 0xc000000
 2d8:	01040200 	mrseq	r0, R12_usr
 2dc:	3f09053c 	svccc	0x0009053c
 2e0:	052e0205 	streq	r0, [lr, #-517]!	; 0xfffffdfb
 2e4:	04020003 	streq	r0, [r2], #-3
 2e8:	17052103 	strne	r2, [r5, -r3, lsl #2]
 2ec:	03040200 	movweq	r0, #16896	; 0x4200
 2f0:	00020573 	andeq	r0, r2, r3, ror r5
 2f4:	3c010402 	cfstrscc	mvf0, [r1], {2}
 2f8:	5901053f 	stmdbpl	r1, {r0, r1, r2, r3, r4, r5, r8, sl}
 2fc:	01000402 	tsteq	r0, r2, lsl #8
 300:	Address 0x00000300 is out of bounds.


Disassembly of section .debug_str:

00000000 <.debug_str>:
   0:	616c6564 	cmnvs	ip, r4, ror #10
   4:	696d5f79 	stmdbvs	sp!, {r0, r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
   8:	00696c6c 	rsbeq	r6, r9, ip, ror #24
   c:	69736e75 	ldmdbvs	r3!, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}^
  10:	64656e67 	strbtvs	r6, [r5], #-3687	; 0xfffff199
  14:	746e6920 	strbtvc	r6, [lr], #-2336	; 0xfffff6e0
  18:	646e6900 	strbtvs	r6, [lr], #-2304	; 0xfffff700
  1c:	64007865 	strvs	r7, [r0], #-2149	; 0xfffff79b
  20:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
  24:	3030355f 	eorscc	r3, r0, pc, asr r5
  28:	00736e5f 	rsbseq	r6, r3, pc, asr lr
  2c:	70617267 	rsbvc	r7, r1, r7, ror #4
  30:	5f636968 	svcpl	0x00636968
  34:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
  38:	7461645f 	strbtvc	r6, [r1], #-1119	; 0xfffffba1
  3c:	69700061 	ldmdbvs	r0!, {r0, r5, r6}^
  40:	006c6578 	rsbeq	r6, ip, r8, ror r5
  44:	20554e47 	subscs	r4, r5, r7, asr #28
  48:	20393943 	eorscs	r3, r9, r3, asr #18
  4c:	2e322e39 	mrccs	14, 1, r2, cr2, cr9, {1}
  50:	30322031 	eorscc	r2, r2, r1, lsr r0
  54:	30313931 	eorscc	r3, r1, r1, lsr r9
  58:	28203532 	stmdacs	r0!, {r1, r4, r5, r8, sl, ip, sp}
  5c:	656c6572 	strbvs	r6, [ip, #-1394]!	; 0xfffffa8e
  60:	29657361 	stmdbcs	r5!, {r0, r5, r6, r8, r9, ip, sp, lr}^
  64:	52415b20 	subpl	r5, r1, #32, 22	; 0x8000
  68:	72612f4d 	rsbvc	r2, r1, #308	; 0x134
  6c:	2d392d6d 	ldccs	13, cr2, [r9, #-436]!	; 0xfffffe4c
  70:	6e617262 	cdpvs	2, 6, cr7, cr1, cr2, {3}
  74:	72206863 	eorvc	r6, r0, #6488064	; 0x630000
  78:	73697665 	cmnvc	r9, #105906176	; 0x6500000
  7c:	206e6f69 	rsbcs	r6, lr, r9, ror #30
  80:	35373732 	ldrcc	r3, [r7, #-1842]!	; 0xfffff8ce
  84:	205d3939 	subscs	r3, sp, r9, lsr r9
  88:	68746d2d 	ldmdavs	r4!, {r0, r2, r3, r5, r8, sl, fp, sp, lr}^
  8c:	20626d75 	rsbcs	r6, r2, r5, ror sp
  90:	6c666d2d 	stclvs	13, cr6, [r6], #-180	; 0xffffff4c
  94:	2d74616f 	ldfcse	f6, [r4, #-444]!	; 0xfffffe44
  98:	3d696261 	sfmcc	f6, 2, [r9, #-388]!	; 0xfffffe7c
  9c:	74666f73 	strbtvc	r6, [r6], #-3955	; 0xfffff08d
  a0:	616d2d20 	cmnvs	sp, r0, lsr #26
  a4:	3d686372 	stclcc	3, cr6, [r8, #-456]!	; 0xfffffe38
  a8:	766d7261 	strbtvc	r7, [sp], -r1, ror #4
  ac:	206d2d36 	rsbcs	r2, sp, r6, lsr sp
  b0:	2d20672d 	stccs	7, cr6, [r0, #-180]!	; 0xffffff4c
  b4:	2d20304f 	stccs	0, cr3, [r0, #-316]!	; 0xfffffec4
  b8:	3d647473 	cfstrdcc	mvd7, [r4, #-460]!	; 0xfffffe34
  bc:	00393963 	eorseq	r3, r9, r3, ror #18
  c0:	70617267 	rsbvc	r7, r1, r7, ror #4
  c4:	5f636968 	svcpl	0x00636968
  c8:	6c727463 	cfldrdvs	mvd7, [r2], #-396	; 0xfffffe74
  cc:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
  d0:	656c635f 	strbvs	r6, [ip, #-863]!	; 0xfffffca1
  d4:	72007261 	andvc	r7, r0, #268435462	; 0x10000006
  d8:	72757465 	rsbsvc	r7, r5, #1694498816	; 0x65000000
  dc:	61765f6e 	cmnvs	r6, lr, ror #30
  e0:	0065756c 	rsbeq	r7, r5, ip, ror #10
  e4:	552f3a43 	strpl	r3, [pc, #-2627]!	; fffff6a9 <__aeabi_idiv0+0xdfffeeed>
  e8:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
  ec:	7261632f 	rsbvc	r6, r1, #-1140850688	; 0xbc000000
  f0:	4f2f736c 	svcmi	0x002f736c
  f4:	7244656e 	subvc	r6, r4, #461373440	; 0x1b800000
  f8:	2f657669 	svccs	0x00657669
  fc:	6c616843 	stclvs	8, cr6, [r1], #-268	; 0xfffffef4
 100:	7372656d 	cmnvc	r2, #457179136	; 0x1b400000
 104:	5441442f 	strbpl	r4, [r1], #-1071	; 0xfffffbd1
 108:	2f373130 	svccs	0x00373130
 10c:	6f62614c 	svcvs	0x0062614c
 110:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
 114:	2f326e6f 	svccs	0x00326e6f
 118:	70617267 	rsbvc	r7, r1, r7, ror #4
 11c:	64636968 	strbtvs	r6, [r3], #-2408	; 0xfffff698
 120:	6c707369 	ldclvs	3, cr7, [r0], #-420	; 0xfffffe5c
 124:	732f7961 			; <UNDEFINED> instruction: 0x732f7961
 128:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
 12c:	632e7075 			; <UNDEFINED> instruction: 0x632e7075
 130:	64646100 	strbtvs	r6, [r4], #-256	; 0xffffff00
 134:	73736572 	cmnvc	r3, #478150656	; 0x1c800000
 138:	61747300 	cmnvs	r4, r0, lsl #6
 13c:	70757472 	rsbsvc	r7, r5, r2, ror r4
 140:	73616d00 	cmnvc	r1, #0, 26
 144:	6975006b 	ldmdbvs	r5!, {r0, r1, r3, r5, r6}^
 148:	5f38746e 	svcpl	0x0038746e
 14c:	6e750074 	mrcvs	0, 3, r0, cr5, cr4, {3}
 150:	6e676973 			; <UNDEFINED> instruction: 0x6e676973
 154:	63206465 			; <UNDEFINED> instruction: 0x63206465
 158:	00726168 	rsbseq	r6, r2, r8, ror #2
 15c:	70617267 	rsbvc	r7, r1, r7, ror #4
 160:	5f636968 	svcpl	0x00636968
 164:	6c727463 	cfldrdvs	mvd7, [r2], #-396	; 0xfffffe74
 168:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
 16c:	7465735f 	strbtvc	r7, [r5], #-863	; 0xfffffca1
 170:	69616d00 	stmdbvs	r1!, {r8, sl, fp, sp, lr}^
 174:	6564006e 	strbvs	r0, [r4, #-110]!	; 0xffffff92
 178:	5f79616c 	svcpl	0x0079616c
 17c:	7263696d 	rsbvc	r6, r3, #1785856	; 0x1b4000
 180:	7267006f 	rsbvc	r0, r7, #111	; 0x6f
 184:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 188:	72775f63 	rsbsvc	r5, r7, #396	; 0x18c
 18c:	00657469 	rsbeq	r7, r5, r9, ror #8
 190:	656c6573 	strbvs	r6, [ip, #-1395]!	; 0xfffffa8d
 194:	635f7463 	cmpvs	pc, #1660944384	; 0x63000000
 198:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
 19c:	656c6c6f 	strbvs	r6, [ip, #-3183]!	; 0xfffff391
 1a0:	65740072 	ldrbvs	r0, [r4, #-114]!	; 0xffffff8e
 1a4:	6100706d 	tstvs	r0, sp, rrx
 1a8:	695f7070 	ldmdbvs	pc, {r4, r5, r6, ip, sp, lr}^	; <UNPREDICTABLE>
 1ac:	0074696e 	rsbseq	r6, r4, lr, ror #18
 1b0:	70617267 	rsbvc	r7, r1, r7, ror #4
 1b4:	5f636968 	svcpl	0x00636968
 1b8:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
 1bc:	67617000 	strbvs	r7, [r1, -r0]!
 1c0:	72670065 	rsbvc	r0, r7, #101	; 0x65
 1c4:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 1c8:	61775f63 	cmnvs	r7, r3, ror #30
 1cc:	725f7469 	subsvc	r7, pc, #1761607680	; 0x69000000
 1d0:	79646165 	stmdbvc	r4!, {r0, r2, r5, r6, r8, sp, lr}^
 1d4:	61726700 	cmnvs	r2, r0, lsl #14
 1d8:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 1dc:	656c635f 	strbvs	r6, [ip, #-863]!	; 0xfffffca1
 1e0:	735f7261 	cmpvc	pc, #268435462	; 0x10000006
 1e4:	65657263 	strbvs	r7, [r5, #-611]!	; 0xfffffd9d
 1e8:	7267006e 	rsbvc	r0, r7, #110	; 0x6e
 1ec:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 1f0:	72775f63 	rsbsvc	r5, r7, #396	; 0x18c
 1f4:	5f657469 	svcpl	0x00657469
 1f8:	6d6d6f63 	stclvs	15, cr6, [sp, #-396]!	; 0xfffffe74
 1fc:	00646e61 	rsbeq	r6, r4, r1, ror #28
 200:	63615f78 	cmnvs	r1, #120, 30	; 0x1e0
 204:	6c617574 	cfstr64vs	mvdx7, [r1], #-464	; 0xfffffe30
 208:	6c656400 	cfstrdvs	mvd6, [r5], #-0
 20c:	325f7961 	subscc	r7, pc, #1589248	; 0x184000
 210:	6e5f3035 	mrcvs	0, 2, r3, cr15, cr5, {1}
 214:	72670073 	rsbvc	r0, r7, #115	; 0x73
 218:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 21c:	72775f63 	rsbsvc	r5, r7, #396	; 0x18c
 220:	5f657469 	svcpl	0x00657469
 224:	61746164 	cmnvs	r4, r4, ror #2
 228:	5c3a4300 	ldcpl	3, cr4, [sl], #-0
 22c:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
 230:	61635c73 	smcvs	13763	; 0x35c3
 234:	5c736c72 	ldclpl	12, cr6, [r3], #-456	; 0xfffffe38
 238:	44656e4f 	strbtmi	r6, [r5], #-3663	; 0xfffff1b1
 23c:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
 240:	6168435c 	cmnvs	r8, ip, asr r3
 244:	72656d6c 	rsbvc	r6, r5, #108, 26	; 0x1b00
 248:	41445c73 	hvcmi	17859	; 0x45c3
 24c:	37313054 			; <UNDEFINED> instruction: 0x37313054
 250:	62614c5c 	rsbvs	r4, r1, #92, 24	; 0x5c00
 254:	7461726f 	strbtvc	r7, [r1], #-623	; 0xfffffd91
 258:	326e6f69 	rsbcc	r6, lr, #420	; 0x1a4
 25c:	6172675c 	cmnvs	r2, ip, asr r7
 260:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 264:	70736964 	rsbsvc	r6, r3, r4, ror #18
 268:	0079616c 	rsbseq	r6, r9, ip, ror #2
 26c:	70617267 	rsbvc	r7, r1, r7, ror #4
 270:	5f636968 	svcpl	0x00636968
 274:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
 278:	696c6169 	stmdbvs	ip!, {r0, r3, r5, r6, r8, sp, lr}^
 27c:	Address 0x0000027c is out of bounds.


Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <startup-0x1ef2f2dc>
   4:	4e472820 	cdpmi	8, 4, cr2, cr7, cr0, {1}
   8:	6f542055 	svcvs	0x00542055
   c:	20736c6f 	rsbscs	r6, r3, pc, ror #24
  10:	20726f66 	rsbscs	r6, r2, r6, ror #30
  14:	206d7241 	rsbcs	r7, sp, r1, asr #4
  18:	65626d45 	strbvs	r6, [r2, #-3397]!	; 0xfffff2bb
  1c:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  20:	6f725020 	svcvs	0x00725020
  24:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
  28:	2073726f 	rsbscs	r7, r3, pc, ror #4
  2c:	30322d39 	eorscc	r2, r2, r9, lsr sp
  30:	712d3931 			; <UNDEFINED> instruction: 0x712d3931
  34:	616d2d34 	cmnvs	sp, r4, lsr sp
  38:	29726f6a 	ldmdbcs	r2!, {r1, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
  3c:	322e3920 	eorcc	r3, lr, #32, 18	; 0x80000
  40:	3220312e 	eorcc	r3, r0, #-2147483637	; 0x8000000b
  44:	31393130 	teqcc	r9, r0, lsr r1
  48:	20353230 	eorscs	r3, r5, r0, lsr r2
  4c:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60
  50:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
  54:	415b2029 	cmpmi	fp, r9, lsr #32
  58:	612f4d52 			; <UNDEFINED> instruction: 0x612f4d52
  5c:	392d6d72 	pushcc	{r1, r4, r5, r6, r8, sl, fp, sp, lr}
  60:	6172622d 	cmnvs	r2, sp, lsr #4
  64:	2068636e 	rsbcs	r6, r8, lr, ror #6
  68:	69766572 	ldmdbvs	r6!, {r1, r4, r5, r6, r8, sl, sp, lr}^
  6c:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
  70:	37373220 	ldrcc	r3, [r7, -r0, lsr #4]!
  74:	5d393935 			; <UNDEFINED> instruction: 0x5d393935
	...

Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002b41 	andeq	r2, r0, r1, asr #22
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000021 	andeq	r0, r0, r1, lsr #32
  10:	2d533605 	ldclcs	6, cr3, [r3, #-20]	; 0xffffffec
  14:	0c06004d 	stceq	0, cr0, [r6], {77}	; 0x4d
  18:	01094d07 	tsteq	r9, r7, lsl #26
  1c:	01140412 	tsteq	r4, r2, lsl r4
  20:	03170115 	tsteq	r7, #1073741829	; 0x40000005
  24:	01190118 	tsteq	r9, r8, lsl r1
  28:	061e011a 			; <UNDEFINED> instruction: 0x061e011a

Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
   4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  10:	0000000c 	andeq	r0, r0, ip
  14:	00000000 	andeq	r0, r0, r0
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
  20:	00000018 	andeq	r0, r0, r8, lsl r0
  24:	00000000 	andeq	r0, r0, r0
  28:	20000010 	andcs	r0, r0, r0, lsl r0
  2c:	00000038 	andeq	r0, r0, r8, lsr r0
  30:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  34:	41018e02 	tstmi	r1, r2, lsl #28
  38:	0000070d 	andeq	r0, r0, sp, lsl #14
  3c:	00000018 	andeq	r0, r0, r8, lsl r0
  40:	00000000 	andeq	r0, r0, r0
  44:	20000048 	andcs	r0, r0, r8, asr #32
  48:	00000038 	andeq	r0, r0, r8, lsr r0
  4c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  50:	41018e02 	tstmi	r1, r2, lsl #28
  54:	0000070d 	andeq	r0, r0, sp, lsl #14
  58:	0000001c 	andeq	r0, r0, ip, lsl r0
  5c:	00000000 	andeq	r0, r0, r0
  60:	20000080 	andcs	r0, r0, r0, lsl #1
  64:	0000004c 	andeq	r0, r0, ip, asr #32
  68:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  6c:	41018e02 	tstmi	r1, r2, lsl #28
  70:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
  74:	00000007 	andeq	r0, r0, r7
  78:	0000001c 	andeq	r0, r0, ip, lsl r0
  7c:	00000000 	andeq	r0, r0, r0
  80:	200000cc 	andcs	r0, r0, ip, asr #1
  84:	00000040 	andeq	r0, r0, r0, asr #32
  88:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  8c:	41018e02 	tstmi	r1, r2, lsl #28
  90:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
  94:	00000007 	andeq	r0, r0, r7
  98:	0000001c 	andeq	r0, r0, ip, lsl r0
  9c:	00000000 	andeq	r0, r0, r0
  a0:	2000010c 	andcs	r0, r0, ip, lsl #2
  a4:	00000050 	andeq	r0, r0, r0, asr r0
  a8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  ac:	41018e02 	tstmi	r1, r2, lsl #28
  b0:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
  b4:	00000007 	andeq	r0, r0, r7
  b8:	0000001c 	andeq	r0, r0, ip, lsl r0
  bc:	00000000 	andeq	r0, r0, r0
  c0:	2000015c 	andcs	r0, r0, ip, asr r1
  c4:	00000050 	andeq	r0, r0, r0, asr r0
  c8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  cc:	41018e02 	tstmi	r1, r2, lsl #28
  d0:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
  d4:	00000007 	andeq	r0, r0, r7
  d8:	0000001c 	andeq	r0, r0, ip, lsl r0
  dc:	00000000 	andeq	r0, r0, r0
  e0:	200001ac 	andcs	r0, r0, ip, lsr #3
  e4:	00000062 	andeq	r0, r0, r2, rrx
  e8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  ec:	41018e02 	tstmi	r1, r2, lsl #28
  f0:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
  f4:	00000007 	andeq	r0, r0, r7
  f8:	00000018 	andeq	r0, r0, r8, lsl r0
  fc:	00000000 	andeq	r0, r0, r0
 100:	2000020e 	andcs	r0, r0, lr, lsl #4
 104:	00000066 	andeq	r0, r0, r6, rrx
 108:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 10c:	41018e02 	tstmi	r1, r2, lsl #28
 110:	0000070d 	andeq	r0, r0, sp, lsl #14
 114:	0000001c 	andeq	r0, r0, ip, lsl r0
 118:	00000000 	andeq	r0, r0, r0
 11c:	20000274 	andcs	r0, r0, r4, ror r2
 120:	00000094 	muleq	r0, r4, r0
 124:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 128:	41018e02 	tstmi	r1, r2, lsl #28
 12c:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 130:	00000007 	andeq	r0, r0, r7
 134:	0000001c 	andeq	r0, r0, ip, lsl r0
 138:	00000000 	andeq	r0, r0, r0
 13c:	20000308 	andcs	r0, r0, r8, lsl #6
 140:	00000080 	andeq	r0, r0, r0, lsl #1
 144:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 148:	41018e02 	tstmi	r1, r2, lsl #28
 14c:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 150:	00000007 	andeq	r0, r0, r7
 154:	0000001c 	andeq	r0, r0, ip, lsl r0
 158:	00000000 	andeq	r0, r0, r0
 15c:	20000388 	andcs	r0, r0, r8, lsl #7
 160:	00000040 	andeq	r0, r0, r0, asr #32
 164:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 168:	41018e02 	tstmi	r1, r2, lsl #28
 16c:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 170:	00000007 	andeq	r0, r0, r7
 174:	0000001c 	andeq	r0, r0, ip, lsl r0
 178:	00000000 	andeq	r0, r0, r0
 17c:	200003c8 	andcs	r0, r0, r8, asr #7
 180:	00000046 	andeq	r0, r0, r6, asr #32
 184:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 188:	41018e02 	tstmi	r1, r2, lsl #28
 18c:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 190:	00000007 	andeq	r0, r0, r7
 194:	0000001c 	andeq	r0, r0, ip, lsl r0
 198:	00000000 	andeq	r0, r0, r0
 19c:	2000040e 	andcs	r0, r0, lr, lsl #8
 1a0:	0000002a 	andeq	r0, r0, sl, lsr #32
 1a4:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 1a8:	41018e02 	tstmi	r1, r2, lsl #28
 1ac:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 1b0:	00000007 	andeq	r0, r0, r7
 1b4:	00000018 	andeq	r0, r0, r8, lsl r0
 1b8:	00000000 	andeq	r0, r0, r0
 1bc:	20000438 	andcs	r0, r0, r8, lsr r4
 1c0:	00000068 	andeq	r0, r0, r8, rrx
 1c4:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 1c8:	41018e02 	tstmi	r1, r2, lsl #28
 1cc:	0000070d 	andeq	r0, r0, sp, lsl #14
 1d0:	0000001c 	andeq	r0, r0, ip, lsl r0
 1d4:	00000000 	andeq	r0, r0, r0
 1d8:	200004a0 	andcs	r0, r0, r0, lsr #9
 1dc:	00000014 	andeq	r0, r0, r4, lsl r0
 1e0:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 1e4:	41018e02 	tstmi	r1, r2, lsl #28
 1e8:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 1ec:	00000007 	andeq	r0, r0, r7
 1f0:	00000020 	andeq	r0, r0, r0, lsr #32
 1f4:	00000000 	andeq	r0, r0, r0
 1f8:	200004b4 			; <UNDEFINED> instruction: 0x200004b4
 1fc:	0000016c 	andeq	r0, r0, ip, ror #2
 200:	84140e41 	ldrhi	r0, [r4], #-3649	; 0xfffff1bf
 204:	86048505 	strhi	r8, [r4], -r5, lsl #10
 208:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
 20c:	300e4101 	andcc	r4, lr, r1, lsl #2
 210:	00070d41 	andeq	r0, r7, r1, asr #26
 214:	00000018 	andeq	r0, r0, r8, lsl r0
 218:	00000000 	andeq	r0, r0, r0
 21c:	20000620 	andcs	r0, r0, r0, lsr #12
 220:	00000028 	andeq	r0, r0, r8, lsr #32
 224:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 228:	41018e02 	tstmi	r1, r2, lsl #28
 22c:	0000070d 	andeq	r0, r0, sp, lsl #14
 230:	0000001c 	andeq	r0, r0, ip, lsl r0
 234:	00000000 	andeq	r0, r0, r0
 238:	20000648 	andcs	r0, r0, r8, asr #12
 23c:	00000060 	andeq	r0, r0, r0, rrx
 240:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 244:	41018e02 	tstmi	r1, r2, lsl #28
 248:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 24c:	00000007 	andeq	r0, r0, r7
 250:	0000000c 	andeq	r0, r0, ip
 254:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 258:	7c010001 	stcvc	0, cr0, [r1], {1}
 25c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 260:	0000000c 	andeq	r0, r0, ip
 264:	00000250 	andeq	r0, r0, r0, asr r2
 268:	200006a9 	andcs	r0, r0, r9, lsr #13
 26c:	0000010a 	andeq	r0, r0, sl, lsl #2
