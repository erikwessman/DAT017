
./Debug/autopong.elf:     file format elf32-littlearm


Disassembly of section .text:

20000000 <startup>:
#define LCD_BUSY 0x80 // Read busy status

__attribute__((naked)) __attribute__((section (".start_section")) )
void startup ( void )
{
__asm__ volatile(" LDR R0,=0x2001C000\n");		/* set stack */
20000000:	4802      	ldr	r0, [pc, #8]	; (2000000c <startup+0xc>)
__asm__ volatile(" MOV SP,R0\n");
20000002:	4685      	mov	sp, r0
__asm__ volatile(" BL main\n");					/* call main */
20000004:	f000 fbe4 	bl	200007d0 <main>
__asm__ volatile(".L1: B .L1\n");				/* never return */
20000008:	e7fe      	b.n	20000008 <startup+0x8>
}
2000000a:	46c0      	nop			; (mov r8, r8)
2000000c:	2001c000 	andcs	ip, r1, r0

20000010 <set_object_speed>:
	void (* clear)(struct tObj *);
	void (* move)(struct tObj *);
	void (* set_speed)(struct tObj *, int, int);
} OBJECT, *POBJECT;

void set_object_speed(POBJECT o, int speedx, int speedy) {
20000010:	b580      	push	{r7, lr}
20000012:	b084      	sub	sp, #16
20000014:	af00      	add	r7, sp, #0
20000016:	60f8      	str	r0, [r7, #12]
20000018:	60b9      	str	r1, [r7, #8]
2000001a:	607a      	str	r2, [r7, #4]
	o->dirx = speedx;
2000001c:	68fb      	ldr	r3, [r7, #12]
2000001e:	68ba      	ldr	r2, [r7, #8]
20000020:	605a      	str	r2, [r3, #4]
	o->diry = speedy;
20000022:	68fb      	ldr	r3, [r7, #12]
20000024:	687a      	ldr	r2, [r7, #4]
20000026:	609a      	str	r2, [r3, #8]
}
20000028:	46c0      	nop			; (mov r8, r8)
2000002a:	46bd      	mov	sp, r7
2000002c:	b004      	add	sp, #16
2000002e:	bd80      	pop	{r7, pc}

20000030 <draw_object>:

void draw_object(POBJECT o) {
20000030:	b590      	push	{r4, r7, lr}
20000032:	b085      	sub	sp, #20
20000034:	af00      	add	r7, sp, #0
20000036:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < MAX_POINTS; i++) {
20000038:	2300      	movs	r3, #0
2000003a:	60fb      	str	r3, [r7, #12]
2000003c:	e028      	b.n	20000090 <draw_object+0x60>
		uint8_t x = (o->posx) + o->geo->px[i].x;
2000003e:	687b      	ldr	r3, [r7, #4]
20000040:	68db      	ldr	r3, [r3, #12]
20000042:	b2d9      	uxtb	r1, r3
20000044:	687b      	ldr	r3, [r7, #4]
20000046:	681a      	ldr	r2, [r3, #0]
20000048:	68fb      	ldr	r3, [r7, #12]
2000004a:	3304      	adds	r3, #4
2000004c:	005b      	lsls	r3, r3, #1
2000004e:	18d3      	adds	r3, r2, r3
20000050:	3304      	adds	r3, #4
20000052:	781a      	ldrb	r2, [r3, #0]
20000054:	200b      	movs	r0, #11
20000056:	183b      	adds	r3, r7, r0
20000058:	188a      	adds	r2, r1, r2
2000005a:	701a      	strb	r2, [r3, #0]
		uint8_t y = (o->posy) + o->geo->px[i].y;
2000005c:	687b      	ldr	r3, [r7, #4]
2000005e:	691b      	ldr	r3, [r3, #16]
20000060:	b2d9      	uxtb	r1, r3
20000062:	687b      	ldr	r3, [r7, #4]
20000064:	681a      	ldr	r2, [r3, #0]
20000066:	68fb      	ldr	r3, [r7, #12]
20000068:	3304      	adds	r3, #4
2000006a:	005b      	lsls	r3, r3, #1
2000006c:	18d3      	adds	r3, r2, r3
2000006e:	3305      	adds	r3, #5
20000070:	781a      	ldrb	r2, [r3, #0]
20000072:	240a      	movs	r4, #10
20000074:	193b      	adds	r3, r7, r4
20000076:	188a      	adds	r2, r1, r2
20000078:	701a      	strb	r2, [r3, #0]
		pixel(x, y, 1);
2000007a:	183b      	adds	r3, r7, r0
2000007c:	7818      	ldrb	r0, [r3, #0]
2000007e:	193b      	adds	r3, r7, r4
20000080:	781b      	ldrb	r3, [r3, #0]
20000082:	2201      	movs	r2, #1
20000084:	0019      	movs	r1, r3
20000086:	f000 fad9 	bl	2000063c <pixel>
	for(int i = 0; i < MAX_POINTS; i++) {
2000008a:	68fb      	ldr	r3, [r7, #12]
2000008c:	3301      	adds	r3, #1
2000008e:	60fb      	str	r3, [r7, #12]
20000090:	68fb      	ldr	r3, [r7, #12]
20000092:	2b13      	cmp	r3, #19
20000094:	ddd3      	ble.n	2000003e <draw_object+0xe>
	}
}
20000096:	46c0      	nop			; (mov r8, r8)
20000098:	46c0      	nop			; (mov r8, r8)
2000009a:	46bd      	mov	sp, r7
2000009c:	b005      	add	sp, #20
2000009e:	bd90      	pop	{r4, r7, pc}

200000a0 <clear_object>:

void clear_object(POBJECT o) {
200000a0:	b590      	push	{r4, r7, lr}
200000a2:	b085      	sub	sp, #20
200000a4:	af00      	add	r7, sp, #0
200000a6:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < MAX_POINTS; i++) {
200000a8:	2300      	movs	r3, #0
200000aa:	60fb      	str	r3, [r7, #12]
200000ac:	e028      	b.n	20000100 <clear_object+0x60>
		uint8_t x = (o->posx) + o->geo->px[i].x;
200000ae:	687b      	ldr	r3, [r7, #4]
200000b0:	68db      	ldr	r3, [r3, #12]
200000b2:	b2d9      	uxtb	r1, r3
200000b4:	687b      	ldr	r3, [r7, #4]
200000b6:	681a      	ldr	r2, [r3, #0]
200000b8:	68fb      	ldr	r3, [r7, #12]
200000ba:	3304      	adds	r3, #4
200000bc:	005b      	lsls	r3, r3, #1
200000be:	18d3      	adds	r3, r2, r3
200000c0:	3304      	adds	r3, #4
200000c2:	781a      	ldrb	r2, [r3, #0]
200000c4:	200b      	movs	r0, #11
200000c6:	183b      	adds	r3, r7, r0
200000c8:	188a      	adds	r2, r1, r2
200000ca:	701a      	strb	r2, [r3, #0]
		uint8_t y = (o->posy) + o->geo->px[i].y;
200000cc:	687b      	ldr	r3, [r7, #4]
200000ce:	691b      	ldr	r3, [r3, #16]
200000d0:	b2d9      	uxtb	r1, r3
200000d2:	687b      	ldr	r3, [r7, #4]
200000d4:	681a      	ldr	r2, [r3, #0]
200000d6:	68fb      	ldr	r3, [r7, #12]
200000d8:	3304      	adds	r3, #4
200000da:	005b      	lsls	r3, r3, #1
200000dc:	18d3      	adds	r3, r2, r3
200000de:	3305      	adds	r3, #5
200000e0:	781a      	ldrb	r2, [r3, #0]
200000e2:	240a      	movs	r4, #10
200000e4:	193b      	adds	r3, r7, r4
200000e6:	188a      	adds	r2, r1, r2
200000e8:	701a      	strb	r2, [r3, #0]
		pixel(x, y, 0);
200000ea:	183b      	adds	r3, r7, r0
200000ec:	7818      	ldrb	r0, [r3, #0]
200000ee:	193b      	adds	r3, r7, r4
200000f0:	781b      	ldrb	r3, [r3, #0]
200000f2:	2200      	movs	r2, #0
200000f4:	0019      	movs	r1, r3
200000f6:	f000 faa1 	bl	2000063c <pixel>
	for(int i = 0; i < MAX_POINTS; i++) {
200000fa:	68fb      	ldr	r3, [r7, #12]
200000fc:	3301      	adds	r3, #1
200000fe:	60fb      	str	r3, [r7, #12]
20000100:	68fb      	ldr	r3, [r7, #12]
20000102:	2b13      	cmp	r3, #19
20000104:	ddd3      	ble.n	200000ae <clear_object+0xe>
	}
}
20000106:	46c0      	nop			; (mov r8, r8)
20000108:	46c0      	nop			; (mov r8, r8)
2000010a:	46bd      	mov	sp, r7
2000010c:	b005      	add	sp, #20
2000010e:	bd90      	pop	{r4, r7, pc}

20000110 <move_object>:

void move_object(POBJECT obj) {
20000110:	b580      	push	{r7, lr}
20000112:	b082      	sub	sp, #8
20000114:	af00      	add	r7, sp, #0
20000116:	6078      	str	r0, [r7, #4]
	clear_object(obj);
20000118:	687b      	ldr	r3, [r7, #4]
2000011a:	0018      	movs	r0, r3
2000011c:	f7ff ffc0 	bl	200000a0 <clear_object>
	obj->posx = obj->posx + obj->dirx;
20000120:	687b      	ldr	r3, [r7, #4]
20000122:	68da      	ldr	r2, [r3, #12]
20000124:	687b      	ldr	r3, [r7, #4]
20000126:	685b      	ldr	r3, [r3, #4]
20000128:	18d2      	adds	r2, r2, r3
2000012a:	687b      	ldr	r3, [r7, #4]
2000012c:	60da      	str	r2, [r3, #12]
	obj->posy = obj->posy + obj->diry;
2000012e:	687b      	ldr	r3, [r7, #4]
20000130:	691a      	ldr	r2, [r3, #16]
20000132:	687b      	ldr	r3, [r7, #4]
20000134:	689b      	ldr	r3, [r3, #8]
20000136:	18d2      	adds	r2, r2, r3
20000138:	687b      	ldr	r3, [r7, #4]
2000013a:	611a      	str	r2, [r3, #16]
	
	if (obj->posx < 1) {
2000013c:	687b      	ldr	r3, [r7, #4]
2000013e:	68db      	ldr	r3, [r3, #12]
20000140:	2b00      	cmp	r3, #0
20000142:	dc05      	bgt.n	20000150 <move_object+0x40>
		obj->dirx = obj->dirx * (-1);
20000144:	687b      	ldr	r3, [r7, #4]
20000146:	685b      	ldr	r3, [r3, #4]
20000148:	425a      	negs	r2, r3
2000014a:	687b      	ldr	r3, [r7, #4]
2000014c:	605a      	str	r2, [r3, #4]
2000014e:	e01c      	b.n	2000018a <move_object+0x7a>
	} else if (obj->posx > 128) {
20000150:	687b      	ldr	r3, [r7, #4]
20000152:	68db      	ldr	r3, [r3, #12]
20000154:	2b80      	cmp	r3, #128	; 0x80
20000156:	dd05      	ble.n	20000164 <move_object+0x54>
		obj->dirx = obj->dirx * (-1);
20000158:	687b      	ldr	r3, [r7, #4]
2000015a:	685b      	ldr	r3, [r3, #4]
2000015c:	425a      	negs	r2, r3
2000015e:	687b      	ldr	r3, [r7, #4]
20000160:	605a      	str	r2, [r3, #4]
20000162:	e012      	b.n	2000018a <move_object+0x7a>
	} else if (obj->posy < 1) {
20000164:	687b      	ldr	r3, [r7, #4]
20000166:	691b      	ldr	r3, [r3, #16]
20000168:	2b00      	cmp	r3, #0
2000016a:	dc05      	bgt.n	20000178 <move_object+0x68>
		obj->diry = obj->diry * (-1);
2000016c:	687b      	ldr	r3, [r7, #4]
2000016e:	689b      	ldr	r3, [r3, #8]
20000170:	425a      	negs	r2, r3
20000172:	687b      	ldr	r3, [r7, #4]
20000174:	609a      	str	r2, [r3, #8]
20000176:	e008      	b.n	2000018a <move_object+0x7a>
	} else if (obj->posy > 64) {
20000178:	687b      	ldr	r3, [r7, #4]
2000017a:	691b      	ldr	r3, [r3, #16]
2000017c:	2b40      	cmp	r3, #64	; 0x40
2000017e:	dd04      	ble.n	2000018a <move_object+0x7a>
		obj->diry = obj->diry * (-1);
20000180:	687b      	ldr	r3, [r7, #4]
20000182:	689b      	ldr	r3, [r3, #8]
20000184:	425a      	negs	r2, r3
20000186:	687b      	ldr	r3, [r7, #4]
20000188:	609a      	str	r2, [r3, #8]
	}
	
	draw_object(obj);
2000018a:	687b      	ldr	r3, [r7, #4]
2000018c:	0018      	movs	r0, r3
2000018e:	f7ff ff4f 	bl	20000030 <draw_object>
}
20000192:	46c0      	nop			; (mov r8, r8)
20000194:	46bd      	mov	sp, r7
20000196:	b002      	add	sp, #8
20000198:	bd80      	pop	{r7, pc}

2000019a <delay_250_ns>:

void delay_250_ns(void) {
2000019a:	b580      	push	{r7, lr}
2000019c:	af00      	add	r7, sp, #0
	*STK_CTRL = 0;
2000019e:	4b09      	ldr	r3, [pc, #36]	; (200001c4 <delay_250_ns+0x2a>)
200001a0:	2200      	movs	r2, #0
200001a2:	601a      	str	r2, [r3, #0]
	*STK_LOAD = (168-1)/4;
200001a4:	4b08      	ldr	r3, [pc, #32]	; (200001c8 <delay_250_ns+0x2e>)
200001a6:	2229      	movs	r2, #41	; 0x29
200001a8:	601a      	str	r2, [r3, #0]
	*STK_VAL = 0;
200001aa:	4b08      	ldr	r3, [pc, #32]	; (200001cc <delay_250_ns+0x32>)
200001ac:	2200      	movs	r2, #0
200001ae:	601a      	str	r2, [r3, #0]
	*STK_CTRL = 5;
200001b0:	4b04      	ldr	r3, [pc, #16]	; (200001c4 <delay_250_ns+0x2a>)
200001b2:	2205      	movs	r2, #5
200001b4:	601a      	str	r2, [r3, #0]
	while(*STK_CTRL & 0x00010000 == 0);
200001b6:	46c0      	nop			; (mov r8, r8)
	*STK_CTRL = 0;
200001b8:	4b02      	ldr	r3, [pc, #8]	; (200001c4 <delay_250_ns+0x2a>)
200001ba:	2200      	movs	r2, #0
200001bc:	601a      	str	r2, [r3, #0]
}
200001be:	46c0      	nop			; (mov r8, r8)
200001c0:	46bd      	mov	sp, r7
200001c2:	bd80      	pop	{r7, pc}
200001c4:	e000e010 	and	lr, r0, r0, lsl r0
200001c8:	e000e014 	and	lr, r0, r4, lsl r0
200001cc:	e000e018 	and	lr, r0, r8, lsl r0

200001d0 <delay_500_ns>:

void delay_500_ns(void) {
200001d0:	b580      	push	{r7, lr}
200001d2:	af00      	add	r7, sp, #0
	*STK_CTRL = 0;
200001d4:	4b09      	ldr	r3, [pc, #36]	; (200001fc <delay_500_ns+0x2c>)
200001d6:	2200      	movs	r2, #0
200001d8:	601a      	str	r2, [r3, #0]
	*STK_LOAD = (168-1)/2;
200001da:	4b09      	ldr	r3, [pc, #36]	; (20000200 <delay_500_ns+0x30>)
200001dc:	2253      	movs	r2, #83	; 0x53
200001de:	601a      	str	r2, [r3, #0]
	*STK_VAL = 0;
200001e0:	4b08      	ldr	r3, [pc, #32]	; (20000204 <delay_500_ns+0x34>)
200001e2:	2200      	movs	r2, #0
200001e4:	601a      	str	r2, [r3, #0]
	*STK_CTRL = 5;
200001e6:	4b05      	ldr	r3, [pc, #20]	; (200001fc <delay_500_ns+0x2c>)
200001e8:	2205      	movs	r2, #5
200001ea:	601a      	str	r2, [r3, #0]
	while(*STK_CTRL & 0x00010000 == 0);
200001ec:	46c0      	nop			; (mov r8, r8)
	*STK_CTRL = 0;
200001ee:	4b03      	ldr	r3, [pc, #12]	; (200001fc <delay_500_ns+0x2c>)
200001f0:	2200      	movs	r2, #0
200001f2:	601a      	str	r2, [r3, #0]
}
200001f4:	46c0      	nop			; (mov r8, r8)
200001f6:	46bd      	mov	sp, r7
200001f8:	bd80      	pop	{r7, pc}
200001fa:	46c0      	nop			; (mov r8, r8)
200001fc:	e000e010 	and	lr, r0, r0, lsl r0
20000200:	e000e014 	and	lr, r0, r4, lsl r0
20000204:	e000e018 	and	lr, r0, r8, lsl r0

20000208 <delay_micro>:

void delay_micro(unsigned int ms) {
20000208:	b580      	push	{r7, lr}
2000020a:	b084      	sub	sp, #16
2000020c:	af00      	add	r7, sp, #0
2000020e:	6078      	str	r0, [r7, #4]
	#ifdef SIMULATOR
		ms /= 1000;
20000210:	687b      	ldr	r3, [r7, #4]
20000212:	22fa      	movs	r2, #250	; 0xfa
20000214:	0091      	lsls	r1, r2, #2
20000216:	0018      	movs	r0, r3
20000218:	f000 faf4 	bl	20000804 <__udivsi3>
2000021c:	0003      	movs	r3, r0
2000021e:	607b      	str	r3, [r7, #4]
		ms++;
20000220:	687b      	ldr	r3, [r7, #4]
20000222:	3301      	adds	r3, #1
20000224:	607b      	str	r3, [r7, #4]
	#endif
	
	while(ms > 0) {
20000226:	e00d      	b.n	20000244 <delay_micro+0x3c>
		for(int i = 0; i < 4; i++) {
20000228:	2300      	movs	r3, #0
2000022a:	60fb      	str	r3, [r7, #12]
2000022c:	e004      	b.n	20000238 <delay_micro+0x30>
			delay_250_ns();
2000022e:	f7ff ffb4 	bl	2000019a <delay_250_ns>
		for(int i = 0; i < 4; i++) {
20000232:	68fb      	ldr	r3, [r7, #12]
20000234:	3301      	adds	r3, #1
20000236:	60fb      	str	r3, [r7, #12]
20000238:	68fb      	ldr	r3, [r7, #12]
2000023a:	2b03      	cmp	r3, #3
2000023c:	ddf7      	ble.n	2000022e <delay_micro+0x26>
		}
		ms--;
2000023e:	687b      	ldr	r3, [r7, #4]
20000240:	3b01      	subs	r3, #1
20000242:	607b      	str	r3, [r7, #4]
	while(ms > 0) {
20000244:	687b      	ldr	r3, [r7, #4]
20000246:	2b00      	cmp	r3, #0
20000248:	d1ee      	bne.n	20000228 <delay_micro+0x20>
	}
}
2000024a:	46c0      	nop			; (mov r8, r8)
2000024c:	46c0      	nop			; (mov r8, r8)
2000024e:	46bd      	mov	sp, r7
20000250:	b004      	add	sp, #16
20000252:	bd80      	pop	{r7, pc}

20000254 <delay_milli>:

void delay_milli(unsigned int ms) {
20000254:	b580      	push	{r7, lr}
20000256:	b082      	sub	sp, #8
20000258:	af00      	add	r7, sp, #0
2000025a:	6078      	str	r0, [r7, #4]
	#ifdef SIMULATOR
		ms /= 1000;
2000025c:	687b      	ldr	r3, [r7, #4]
2000025e:	22fa      	movs	r2, #250	; 0xfa
20000260:	0091      	lsls	r1, r2, #2
20000262:	0018      	movs	r0, r3
20000264:	f000 face 	bl	20000804 <__udivsi3>
20000268:	0003      	movs	r3, r0
2000026a:	607b      	str	r3, [r7, #4]
		ms++;
2000026c:	687b      	ldr	r3, [r7, #4]
2000026e:	3301      	adds	r3, #1
20000270:	607b      	str	r3, [r7, #4]
	#endif
	
	while(ms > 0) {
20000272:	e007      	b.n	20000284 <delay_milli+0x30>
		delay_micro(1000);
20000274:	23fa      	movs	r3, #250	; 0xfa
20000276:	009b      	lsls	r3, r3, #2
20000278:	0018      	movs	r0, r3
2000027a:	f7ff ffc5 	bl	20000208 <delay_micro>
		ms--;
2000027e:	687b      	ldr	r3, [r7, #4]
20000280:	3b01      	subs	r3, #1
20000282:	607b      	str	r3, [r7, #4]
	while(ms > 0) {
20000284:	687b      	ldr	r3, [r7, #4]
20000286:	2b00      	cmp	r3, #0
20000288:	d1f4      	bne.n	20000274 <delay_milli+0x20>
	}
}
2000028a:	46c0      	nop			; (mov r8, r8)
2000028c:	46c0      	nop			; (mov r8, r8)
2000028e:	46bd      	mov	sp, r7
20000290:	b002      	add	sp, #8
20000292:	bd80      	pop	{r7, pc}

20000294 <graphic_ctrl_bit_set>:

void graphic_ctrl_bit_set(uint8_t x) {
20000294:	b580      	push	{r7, lr}
20000296:	b084      	sub	sp, #16
20000298:	af00      	add	r7, sp, #0
2000029a:	0002      	movs	r2, r0
2000029c:	1dfb      	adds	r3, r7, #7
2000029e:	701a      	strb	r2, [r3, #0]
	uint8_t c = *GPIO_ODR_LOW;
200002a0:	4a0f      	ldr	r2, [pc, #60]	; (200002e0 <graphic_ctrl_bit_set+0x4c>)
200002a2:	200f      	movs	r0, #15
200002a4:	183b      	adds	r3, r7, r0
200002a6:	7812      	ldrb	r2, [r2, #0]
200002a8:	701a      	strb	r2, [r3, #0]
	c &= ~B_SELECT;
200002aa:	183b      	adds	r3, r7, r0
200002ac:	183a      	adds	r2, r7, r0
200002ae:	7812      	ldrb	r2, [r2, #0]
200002b0:	2104      	movs	r1, #4
200002b2:	438a      	bics	r2, r1
200002b4:	701a      	strb	r2, [r3, #0]
	c |= (~B_SELECT & x);
200002b6:	1dfb      	adds	r3, r7, #7
200002b8:	781b      	ldrb	r3, [r3, #0]
200002ba:	b25b      	sxtb	r3, r3
200002bc:	2204      	movs	r2, #4
200002be:	4393      	bics	r3, r2
200002c0:	b25a      	sxtb	r2, r3
200002c2:	183b      	adds	r3, r7, r0
200002c4:	781b      	ldrb	r3, [r3, #0]
200002c6:	b25b      	sxtb	r3, r3
200002c8:	4313      	orrs	r3, r2
200002ca:	b25a      	sxtb	r2, r3
200002cc:	183b      	adds	r3, r7, r0
200002ce:	701a      	strb	r2, [r3, #0]
	*GPIO_ODR_LOW = c;
200002d0:	4a03      	ldr	r2, [pc, #12]	; (200002e0 <graphic_ctrl_bit_set+0x4c>)
200002d2:	183b      	adds	r3, r7, r0
200002d4:	781b      	ldrb	r3, [r3, #0]
200002d6:	7013      	strb	r3, [r2, #0]
}
200002d8:	46c0      	nop			; (mov r8, r8)
200002da:	46bd      	mov	sp, r7
200002dc:	b004      	add	sp, #16
200002de:	bd80      	pop	{r7, pc}
200002e0:	40021014 	andmi	r1, r2, r4, lsl r0

200002e4 <graphic_ctrl_bit_clear>:

void graphic_ctrl_bit_clear(uint8_t x) {
200002e4:	b580      	push	{r7, lr}
200002e6:	b084      	sub	sp, #16
200002e8:	af00      	add	r7, sp, #0
200002ea:	0002      	movs	r2, r0
200002ec:	1dfb      	adds	r3, r7, #7
200002ee:	701a      	strb	r2, [r3, #0]
	uint8_t c = *GPIO_ODR_LOW;
200002f0:	4a0f      	ldr	r2, [pc, #60]	; (20000330 <graphic_ctrl_bit_clear+0x4c>)
200002f2:	200f      	movs	r0, #15
200002f4:	183b      	adds	r3, r7, r0
200002f6:	7812      	ldrb	r2, [r2, #0]
200002f8:	701a      	strb	r2, [r3, #0]
	c &= ~B_SELECT;
200002fa:	183b      	adds	r3, r7, r0
200002fc:	183a      	adds	r2, r7, r0
200002fe:	7812      	ldrb	r2, [r2, #0]
20000300:	2104      	movs	r1, #4
20000302:	438a      	bics	r2, r1
20000304:	701a      	strb	r2, [r3, #0]
	c &= ~x;
20000306:	1dfb      	adds	r3, r7, #7
20000308:	781b      	ldrb	r3, [r3, #0]
2000030a:	b25b      	sxtb	r3, r3
2000030c:	43db      	mvns	r3, r3
2000030e:	b25b      	sxtb	r3, r3
20000310:	183a      	adds	r2, r7, r0
20000312:	7812      	ldrb	r2, [r2, #0]
20000314:	b252      	sxtb	r2, r2
20000316:	4013      	ands	r3, r2
20000318:	b25a      	sxtb	r2, r3
2000031a:	183b      	adds	r3, r7, r0
2000031c:	701a      	strb	r2, [r3, #0]
	*GPIO_ODR_LOW = c;
2000031e:	4a04      	ldr	r2, [pc, #16]	; (20000330 <graphic_ctrl_bit_clear+0x4c>)
20000320:	183b      	adds	r3, r7, r0
20000322:	781b      	ldrb	r3, [r3, #0]
20000324:	7013      	strb	r3, [r2, #0]
}
20000326:	46c0      	nop			; (mov r8, r8)
20000328:	46bd      	mov	sp, r7
2000032a:	b004      	add	sp, #16
2000032c:	bd80      	pop	{r7, pc}
2000032e:	46c0      	nop			; (mov r8, r8)
20000330:	40021014 	andmi	r1, r2, r4, lsl r0

20000334 <select_controller>:

void select_controller(controller) {
20000334:	b580      	push	{r7, lr}
20000336:	b082      	sub	sp, #8
20000338:	af00      	add	r7, sp, #0
2000033a:	6078      	str	r0, [r7, #4]
	switch(controller) {
2000033c:	687b      	ldr	r3, [r7, #4]
2000033e:	2b18      	cmp	r3, #24
20000340:	d021      	beq.n	20000386 <select_controller+0x52>
20000342:	687b      	ldr	r3, [r7, #4]
20000344:	2b18      	cmp	r3, #24
20000346:	dc22      	bgt.n	2000038e <select_controller+0x5a>
20000348:	687b      	ldr	r3, [r7, #4]
2000034a:	2b10      	cmp	r3, #16
2000034c:	d014      	beq.n	20000378 <select_controller+0x44>
2000034e:	687b      	ldr	r3, [r7, #4]
20000350:	2b10      	cmp	r3, #16
20000352:	dc1c      	bgt.n	2000038e <select_controller+0x5a>
20000354:	687b      	ldr	r3, [r7, #4]
20000356:	2b00      	cmp	r3, #0
20000358:	d003      	beq.n	20000362 <select_controller+0x2e>
2000035a:	687b      	ldr	r3, [r7, #4]
2000035c:	2b08      	cmp	r3, #8
2000035e:	d004      	beq.n	2000036a <select_controller+0x36>
			break;
		case B_CS1|B_CS2: 
			graphic_ctrl_bit_set(B_CS1|B_CS2);
			break;
	}
}
20000360:	e015      	b.n	2000038e <select_controller+0x5a>
			graphic_ctrl_bit_clear(B_CS1|B_CS2);
20000362:	2018      	movs	r0, #24
20000364:	f7ff ffbe 	bl	200002e4 <graphic_ctrl_bit_clear>
			break;
20000368:	e011      	b.n	2000038e <select_controller+0x5a>
			graphic_ctrl_bit_clear(B_CS2);
2000036a:	2010      	movs	r0, #16
2000036c:	f7ff ffba 	bl	200002e4 <graphic_ctrl_bit_clear>
			graphic_ctrl_bit_set(B_CS1);
20000370:	2008      	movs	r0, #8
20000372:	f7ff ff8f 	bl	20000294 <graphic_ctrl_bit_set>
			break;
20000376:	e00a      	b.n	2000038e <select_controller+0x5a>
			graphic_ctrl_bit_clear(B_CS1);
20000378:	2008      	movs	r0, #8
2000037a:	f7ff ffb3 	bl	200002e4 <graphic_ctrl_bit_clear>
			graphic_ctrl_bit_set(B_CS2);
2000037e:	2010      	movs	r0, #16
20000380:	f7ff ff88 	bl	20000294 <graphic_ctrl_bit_set>
			break;
20000384:	e003      	b.n	2000038e <select_controller+0x5a>
			graphic_ctrl_bit_set(B_CS1|B_CS2);
20000386:	2018      	movs	r0, #24
20000388:	f7ff ff84 	bl	20000294 <graphic_ctrl_bit_set>
			break;
2000038c:	46c0      	nop			; (mov r8, r8)
}
2000038e:	46c0      	nop			; (mov r8, r8)
20000390:	46bd      	mov	sp, r7
20000392:	b002      	add	sp, #8
20000394:	bd80      	pop	{r7, pc}

20000396 <graphic_wait_ready>:

void graphic_wait_ready(void) {
20000396:	b580      	push	{r7, lr}
20000398:	af00      	add	r7, sp, #0
	graphic_ctrl_bit_set(B_E);
2000039a:	2040      	movs	r0, #64	; 0x40
2000039c:	f7ff ff7a 	bl	20000294 <graphic_ctrl_bit_set>
	*GPIO_MODER = 0x00005555;
200003a0:	4b12      	ldr	r3, [pc, #72]	; (200003ec <graphic_wait_ready+0x56>)
200003a2:	4a13      	ldr	r2, [pc, #76]	; (200003f0 <graphic_wait_ready+0x5a>)
200003a4:	601a      	str	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_RS);
200003a6:	2001      	movs	r0, #1
200003a8:	f7ff ff9c 	bl	200002e4 <graphic_ctrl_bit_clear>
	graphic_ctrl_bit_set(B_RW);
200003ac:	2002      	movs	r0, #2
200003ae:	f7ff ff71 	bl	20000294 <graphic_ctrl_bit_set>
	delay_500_ns();
200003b2:	f7ff ff0d 	bl	200001d0 <delay_500_ns>
	while(1) {
		graphic_ctrl_bit_set(B_E);
200003b6:	2040      	movs	r0, #64	; 0x40
200003b8:	f7ff ff6c 	bl	20000294 <graphic_ctrl_bit_set>
		delay_500_ns();
200003bc:	f7ff ff08 	bl	200001d0 <delay_500_ns>
		graphic_ctrl_bit_clear(B_E);
200003c0:	2040      	movs	r0, #64	; 0x40
200003c2:	f7ff ff8f 	bl	200002e4 <graphic_ctrl_bit_clear>
		delay_500_ns();
200003c6:	f7ff ff03 	bl	200001d0 <delay_500_ns>
		if((*GPIO_ODR_LOW & LCD_BUSY) == 0) {
200003ca:	4b0a      	ldr	r3, [pc, #40]	; (200003f4 <graphic_wait_ready+0x5e>)
200003cc:	781b      	ldrb	r3, [r3, #0]
200003ce:	b2db      	uxtb	r3, r3
200003d0:	b25b      	sxtb	r3, r3
200003d2:	2b00      	cmp	r3, #0
200003d4:	da00      	bge.n	200003d8 <graphic_wait_ready+0x42>
		graphic_ctrl_bit_set(B_E);
200003d6:	e7ee      	b.n	200003b6 <graphic_wait_ready+0x20>
			break;
200003d8:	46c0      	nop			; (mov r8, r8)
		}
	}
	graphic_ctrl_bit_set(B_E);
200003da:	2040      	movs	r0, #64	; 0x40
200003dc:	f7ff ff5a 	bl	20000294 <graphic_ctrl_bit_set>
	*GPIO_MODER = 0x55555555;
200003e0:	4b02      	ldr	r3, [pc, #8]	; (200003ec <graphic_wait_ready+0x56>)
200003e2:	4a05      	ldr	r2, [pc, #20]	; (200003f8 <graphic_wait_ready+0x62>)
200003e4:	601a      	str	r2, [r3, #0]
}
200003e6:	46c0      	nop			; (mov r8, r8)
200003e8:	46bd      	mov	sp, r7
200003ea:	bd80      	pop	{r7, pc}
200003ec:	40021000 	andmi	r1, r2, r0
200003f0:	00005555 	andeq	r5, r0, r5, asr r5
200003f4:	40021014 	andmi	r1, r2, r4, lsl r0
200003f8:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

200003fc <graphic_read>:

uint8_t graphic_read(uint8_t controller) {
200003fc:	b580      	push	{r7, lr}
200003fe:	b084      	sub	sp, #16
20000400:	af00      	add	r7, sp, #0
20000402:	0002      	movs	r2, r0
20000404:	1dfb      	adds	r3, r7, #7
20000406:	701a      	strb	r2, [r3, #0]
	uint8_t return_value;
	graphic_ctrl_bit_clear(B_E);
20000408:	2040      	movs	r0, #64	; 0x40
2000040a:	f7ff ff6b 	bl	200002e4 <graphic_ctrl_bit_clear>
	*GPIO_MODER = 0x00005555;
2000040e:	4b1c      	ldr	r3, [pc, #112]	; (20000480 <graphic_read+0x84>)
20000410:	4a1c      	ldr	r2, [pc, #112]	; (20000484 <graphic_read+0x88>)
20000412:	601a      	str	r2, [r3, #0]
	graphic_ctrl_bit_set(B_RS|B_RW);
20000414:	2003      	movs	r0, #3
20000416:	f7ff ff3d 	bl	20000294 <graphic_ctrl_bit_set>
	select_controller(controller);
2000041a:	1dfb      	adds	r3, r7, #7
2000041c:	781b      	ldrb	r3, [r3, #0]
2000041e:	0018      	movs	r0, r3
20000420:	f7ff ff88 	bl	20000334 <select_controller>
	delay_500_ns();
20000424:	f7ff fed4 	bl	200001d0 <delay_500_ns>
	graphic_ctrl_bit_set(B_E);
20000428:	2040      	movs	r0, #64	; 0x40
2000042a:	f7ff ff33 	bl	20000294 <graphic_ctrl_bit_set>
	delay_500_ns();
2000042e:	f7ff fecf 	bl	200001d0 <delay_500_ns>
	return_value = *GPIO_IDR_HIGH;
20000432:	4a15      	ldr	r2, [pc, #84]	; (20000488 <graphic_read+0x8c>)
20000434:	230f      	movs	r3, #15
20000436:	18fb      	adds	r3, r7, r3
20000438:	7812      	ldrb	r2, [r2, #0]
2000043a:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);
2000043c:	2040      	movs	r0, #64	; 0x40
2000043e:	f7ff ff51 	bl	200002e4 <graphic_ctrl_bit_clear>
	*GPIO_MODER = 0x55555555;
20000442:	4b0f      	ldr	r3, [pc, #60]	; (20000480 <graphic_read+0x84>)
20000444:	4a11      	ldr	r2, [pc, #68]	; (2000048c <graphic_read+0x90>)
20000446:	601a      	str	r2, [r3, #0]
	
	if(controller & B_CS1) {
20000448:	1dfb      	adds	r3, r7, #7
2000044a:	781b      	ldrb	r3, [r3, #0]
2000044c:	2208      	movs	r2, #8
2000044e:	4013      	ands	r3, r2
20000450:	d005      	beq.n	2000045e <graphic_read+0x62>
		select_controller(B_CS1);
20000452:	2008      	movs	r0, #8
20000454:	f7ff ff6e 	bl	20000334 <select_controller>
		graphic_wait_ready();
20000458:	f7ff ff9d 	bl	20000396 <graphic_wait_ready>
2000045c:	e009      	b.n	20000472 <graphic_read+0x76>
	} else if(controller & B_CS2) {
2000045e:	1dfb      	adds	r3, r7, #7
20000460:	781b      	ldrb	r3, [r3, #0]
20000462:	2210      	movs	r2, #16
20000464:	4013      	ands	r3, r2
20000466:	d004      	beq.n	20000472 <graphic_read+0x76>
		select_controller(B_CS2);
20000468:	2010      	movs	r0, #16
2000046a:	f7ff ff63 	bl	20000334 <select_controller>
		graphic_wait_ready();
2000046e:	f7ff ff92 	bl	20000396 <graphic_wait_ready>
	}
	return return_value;
20000472:	230f      	movs	r3, #15
20000474:	18fb      	adds	r3, r7, r3
20000476:	781b      	ldrb	r3, [r3, #0]
}
20000478:	0018      	movs	r0, r3
2000047a:	46bd      	mov	sp, r7
2000047c:	b004      	add	sp, #16
2000047e:	bd80      	pop	{r7, pc}
20000480:	40021000 	andmi	r1, r2, r0
20000484:	00005555 	andeq	r5, r0, r5, asr r5
20000488:	40021011 	andmi	r1, r2, r1, lsl r0
2000048c:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20000490 <graphic_write>:

void graphic_write(uint8_t value, uint8_t controller) {
20000490:	b580      	push	{r7, lr}
20000492:	b082      	sub	sp, #8
20000494:	af00      	add	r7, sp, #0
20000496:	0002      	movs	r2, r0
20000498:	1dfb      	adds	r3, r7, #7
2000049a:	701a      	strb	r2, [r3, #0]
2000049c:	1dbb      	adds	r3, r7, #6
2000049e:	1c0a      	adds	r2, r1, #0
200004a0:	701a      	strb	r2, [r3, #0]
	*GPIO_ODR_HIGH = value;
200004a2:	4a1a      	ldr	r2, [pc, #104]	; (2000050c <graphic_write+0x7c>)
200004a4:	1dfb      	adds	r3, r7, #7
200004a6:	781b      	ldrb	r3, [r3, #0]
200004a8:	7013      	strb	r3, [r2, #0]
	select_controller(controller);
200004aa:	1dbb      	adds	r3, r7, #6
200004ac:	781b      	ldrb	r3, [r3, #0]
200004ae:	0018      	movs	r0, r3
200004b0:	f7ff ff40 	bl	20000334 <select_controller>
	delay_500_ns();
200004b4:	f7ff fe8c 	bl	200001d0 <delay_500_ns>
	graphic_ctrl_bit_set(B_E);
200004b8:	2040      	movs	r0, #64	; 0x40
200004ba:	f7ff feeb 	bl	20000294 <graphic_ctrl_bit_set>
	delay_500_ns();
200004be:	f7ff fe87 	bl	200001d0 <delay_500_ns>
	graphic_ctrl_bit_clear(B_E);
200004c2:	2040      	movs	r0, #64	; 0x40
200004c4:	f7ff ff0e 	bl	200002e4 <graphic_ctrl_bit_clear>
	
	if(controller & B_CS1) {
200004c8:	1dbb      	adds	r3, r7, #6
200004ca:	781b      	ldrb	r3, [r3, #0]
200004cc:	2208      	movs	r2, #8
200004ce:	4013      	ands	r3, r2
200004d0:	d005      	beq.n	200004de <graphic_write+0x4e>
		select_controller(B_CS1);
200004d2:	2008      	movs	r0, #8
200004d4:	f7ff ff2e 	bl	20000334 <select_controller>
		graphic_wait_ready();
200004d8:	f7ff ff5d 	bl	20000396 <graphic_wait_ready>
200004dc:	e009      	b.n	200004f2 <graphic_write+0x62>
	} else if(controller & B_CS2) {
200004de:	1dbb      	adds	r3, r7, #6
200004e0:	781b      	ldrb	r3, [r3, #0]
200004e2:	2210      	movs	r2, #16
200004e4:	4013      	ands	r3, r2
200004e6:	d004      	beq.n	200004f2 <graphic_write+0x62>
		select_controller(B_CS2);
200004e8:	2010      	movs	r0, #16
200004ea:	f7ff ff23 	bl	20000334 <select_controller>
		graphic_wait_ready();
200004ee:	f7ff ff52 	bl	20000396 <graphic_wait_ready>
	}
	
	*GPIO_ODR_HIGH = 0;
200004f2:	4b06      	ldr	r3, [pc, #24]	; (2000050c <graphic_write+0x7c>)
200004f4:	2200      	movs	r2, #0
200004f6:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_set(B_E);
200004f8:	2040      	movs	r0, #64	; 0x40
200004fa:	f7ff fecb 	bl	20000294 <graphic_ctrl_bit_set>
	select_controller(0);
200004fe:	2000      	movs	r0, #0
20000500:	f7ff ff18 	bl	20000334 <select_controller>
}
20000504:	46c0      	nop			; (mov r8, r8)
20000506:	46bd      	mov	sp, r7
20000508:	b002      	add	sp, #8
2000050a:	bd80      	pop	{r7, pc}
2000050c:	40021015 	andmi	r1, r2, r5, lsl r0

20000510 <graphic_write_command>:

void graphic_write_command(uint8_t command, uint8_t controller) {
20000510:	b580      	push	{r7, lr}
20000512:	b082      	sub	sp, #8
20000514:	af00      	add	r7, sp, #0
20000516:	0002      	movs	r2, r0
20000518:	1dfb      	adds	r3, r7, #7
2000051a:	701a      	strb	r2, [r3, #0]
2000051c:	1dbb      	adds	r3, r7, #6
2000051e:	1c0a      	adds	r2, r1, #0
20000520:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);
20000522:	2040      	movs	r0, #64	; 0x40
20000524:	f7ff fede 	bl	200002e4 <graphic_ctrl_bit_clear>
	select_controller(controller);
20000528:	1dbb      	adds	r3, r7, #6
2000052a:	781b      	ldrb	r3, [r3, #0]
2000052c:	0018      	movs	r0, r3
2000052e:	f7ff ff01 	bl	20000334 <select_controller>
	graphic_ctrl_bit_clear(B_RS | B_RW);
20000532:	2003      	movs	r0, #3
20000534:	f7ff fed6 	bl	200002e4 <graphic_ctrl_bit_clear>
	graphic_write(command, controller);
20000538:	1dbb      	adds	r3, r7, #6
2000053a:	781a      	ldrb	r2, [r3, #0]
2000053c:	1dfb      	adds	r3, r7, #7
2000053e:	781b      	ldrb	r3, [r3, #0]
20000540:	0011      	movs	r1, r2
20000542:	0018      	movs	r0, r3
20000544:	f7ff ffa4 	bl	20000490 <graphic_write>
}
20000548:	46c0      	nop			; (mov r8, r8)
2000054a:	46bd      	mov	sp, r7
2000054c:	b002      	add	sp, #8
2000054e:	bd80      	pop	{r7, pc}

20000550 <graphic_write_data>:

void graphic_write_data(uint8_t data, uint8_t controller) {
20000550:	b580      	push	{r7, lr}
20000552:	b082      	sub	sp, #8
20000554:	af00      	add	r7, sp, #0
20000556:	0002      	movs	r2, r0
20000558:	1dfb      	adds	r3, r7, #7
2000055a:	701a      	strb	r2, [r3, #0]
2000055c:	1dbb      	adds	r3, r7, #6
2000055e:	1c0a      	adds	r2, r1, #0
20000560:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);
20000562:	2040      	movs	r0, #64	; 0x40
20000564:	f7ff febe 	bl	200002e4 <graphic_ctrl_bit_clear>
	select_controller(controller);
20000568:	1dbb      	adds	r3, r7, #6
2000056a:	781b      	ldrb	r3, [r3, #0]
2000056c:	0018      	movs	r0, r3
2000056e:	f7ff fee1 	bl	20000334 <select_controller>
	graphic_ctrl_bit_set(B_RS);
20000572:	2001      	movs	r0, #1
20000574:	f7ff fe8e 	bl	20000294 <graphic_ctrl_bit_set>
	graphic_ctrl_bit_clear(B_RW);
20000578:	2002      	movs	r0, #2
2000057a:	f7ff feb3 	bl	200002e4 <graphic_ctrl_bit_clear>
	graphic_write(data, controller);
2000057e:	1dbb      	adds	r3, r7, #6
20000580:	781a      	ldrb	r2, [r3, #0]
20000582:	1dfb      	adds	r3, r7, #7
20000584:	781b      	ldrb	r3, [r3, #0]
20000586:	0011      	movs	r1, r2
20000588:	0018      	movs	r0, r3
2000058a:	f7ff ff81 	bl	20000490 <graphic_write>
}
2000058e:	46c0      	nop			; (mov r8, r8)
20000590:	46bd      	mov	sp, r7
20000592:	b002      	add	sp, #8
20000594:	bd80      	pop	{r7, pc}

20000596 <graphic_read_data>:

uint8_t graphic_read_data(uint8_t controller) {
20000596:	b580      	push	{r7, lr}
20000598:	b082      	sub	sp, #8
2000059a:	af00      	add	r7, sp, #0
2000059c:	0002      	movs	r2, r0
2000059e:	1dfb      	adds	r3, r7, #7
200005a0:	701a      	strb	r2, [r3, #0]
	graphic_read(controller);
200005a2:	1dfb      	adds	r3, r7, #7
200005a4:	781b      	ldrb	r3, [r3, #0]
200005a6:	0018      	movs	r0, r3
200005a8:	f7ff ff28 	bl	200003fc <graphic_read>
	return graphic_read(controller);
200005ac:	1dfb      	adds	r3, r7, #7
200005ae:	781b      	ldrb	r3, [r3, #0]
200005b0:	0018      	movs	r0, r3
200005b2:	f7ff ff23 	bl	200003fc <graphic_read>
200005b6:	0003      	movs	r3, r0
}
200005b8:	0018      	movs	r0, r3
200005ba:	46bd      	mov	sp, r7
200005bc:	b002      	add	sp, #8
200005be:	bd80      	pop	{r7, pc}

200005c0 <graphic_initialize>:

void graphic_initialize(void) {
200005c0:	b580      	push	{r7, lr}
200005c2:	af00      	add	r7, sp, #0
	graphic_ctrl_bit_set(B_E);
200005c4:	2040      	movs	r0, #64	; 0x40
200005c6:	f7ff fe65 	bl	20000294 <graphic_ctrl_bit_set>
	delay_micro(10);
200005ca:	200a      	movs	r0, #10
200005cc:	f7ff fe1c 	bl	20000208 <delay_micro>
	graphic_ctrl_bit_clear(B_CS1);
200005d0:	2008      	movs	r0, #8
200005d2:	f7ff fe87 	bl	200002e4 <graphic_ctrl_bit_clear>
	graphic_ctrl_bit_clear(B_CS2);
200005d6:	2010      	movs	r0, #16
200005d8:	f7ff fe84 	bl	200002e4 <graphic_ctrl_bit_clear>
	graphic_ctrl_bit_clear(B_RST);
200005dc:	2020      	movs	r0, #32
200005de:	f7ff fe81 	bl	200002e4 <graphic_ctrl_bit_clear>
	graphic_ctrl_bit_clear(B_E);
200005e2:	2040      	movs	r0, #64	; 0x40
200005e4:	f7ff fe7e 	bl	200002e4 <graphic_ctrl_bit_clear>
	delay_milli(30);
200005e8:	201e      	movs	r0, #30
200005ea:	f7ff fe33 	bl	20000254 <delay_milli>
	graphic_ctrl_bit_set(B_RST);
200005ee:	2020      	movs	r0, #32
200005f0:	f7ff fe50 	bl	20000294 <graphic_ctrl_bit_set>
	graphic_write_command(LCD_OFF, B_CS1|B_CS2);
200005f4:	2118      	movs	r1, #24
200005f6:	203e      	movs	r0, #62	; 0x3e
200005f8:	f7ff ff8a 	bl	20000510 <graphic_write_command>
	graphic_write_command(LCD_ON, B_CS1|B_CS2);
200005fc:	2118      	movs	r1, #24
200005fe:	203f      	movs	r0, #63	; 0x3f
20000600:	f7ff ff86 	bl	20000510 <graphic_write_command>
	graphic_write_command(LCD_DISP_START, B_CS1|B_CS2);
20000604:	2118      	movs	r1, #24
20000606:	20c0      	movs	r0, #192	; 0xc0
20000608:	f7ff ff82 	bl	20000510 <graphic_write_command>
	graphic_write_command(LCD_SET_ADD, B_CS1|B_CS2);
2000060c:	2118      	movs	r1, #24
2000060e:	2040      	movs	r0, #64	; 0x40
20000610:	f7ff ff7e 	bl	20000510 <graphic_write_command>
	graphic_write_command(LCD_SET_PAGE, B_CS1|B_CS2);
20000614:	2118      	movs	r1, #24
20000616:	20b8      	movs	r0, #184	; 0xb8
20000618:	f7ff ff7a 	bl	20000510 <graphic_write_command>
	select_controller(0);
2000061c:	2000      	movs	r0, #0
2000061e:	f7ff fe89 	bl	20000334 <select_controller>
}
20000622:	46c0      	nop			; (mov r8, r8)
20000624:	46bd      	mov	sp, r7
20000626:	bd80      	pop	{r7, pc}

20000628 <graphic_clear_screen>:

void graphic_clear_screen(void) {
20000628:	b580      	push	{r7, lr}
2000062a:	b082      	sub	sp, #8
2000062c:	af00      	add	r7, sp, #0
	for(int page = 0; page < page; page++) {
2000062e:	2300      	movs	r3, #0
20000630:	607b      	str	r3, [r7, #4]
20000632:	46c0      	nop			; (mov r8, r8)
		graphic_write_command(LCD_SET_ADD | 0, B_CS1|B_CS2);
		for(int address = 0; address < 64; address++) {
			graphic_write_data(0, B_CS1|B_CS2);
		}
	}
}
20000634:	46c0      	nop			; (mov r8, r8)
20000636:	46bd      	mov	sp, r7
20000638:	b002      	add	sp, #8
2000063a:	bd80      	pop	{r7, pc}

2000063c <pixel>:

void pixel(uint8_t x, uint8_t y, uint8_t set) {
2000063c:	b5f0      	push	{r4, r5, r6, r7, lr}
2000063e:	b087      	sub	sp, #28
20000640:	af00      	add	r7, sp, #0
20000642:	0004      	movs	r4, r0
20000644:	0008      	movs	r0, r1
20000646:	0011      	movs	r1, r2
20000648:	1dfb      	adds	r3, r7, #7
2000064a:	1c22      	adds	r2, r4, #0
2000064c:	701a      	strb	r2, [r3, #0]
2000064e:	1dbb      	adds	r3, r7, #6
20000650:	1c02      	adds	r2, r0, #0
20000652:	701a      	strb	r2, [r3, #0]
20000654:	1d7b      	adds	r3, r7, #5
20000656:	1c0a      	adds	r2, r1, #0
20000658:	701a      	strb	r2, [r3, #0]
	uint8_t mask, controller, x_actual, temp;
	int index;
	
	if((x < 1) || (y < 1) || (x > 128) || (y > 64))  {
2000065a:	1dfb      	adds	r3, r7, #7
2000065c:	781b      	ldrb	r3, [r3, #0]
2000065e:	2b00      	cmp	r3, #0
20000660:	d100      	bne.n	20000664 <pixel+0x28>
20000662:	e09a      	b.n	2000079a <pixel+0x15e>
20000664:	1dbb      	adds	r3, r7, #6
20000666:	781b      	ldrb	r3, [r3, #0]
20000668:	2b00      	cmp	r3, #0
2000066a:	d100      	bne.n	2000066e <pixel+0x32>
2000066c:	e095      	b.n	2000079a <pixel+0x15e>
2000066e:	1dfb      	adds	r3, r7, #7
20000670:	781b      	ldrb	r3, [r3, #0]
20000672:	2b80      	cmp	r3, #128	; 0x80
20000674:	d900      	bls.n	20000678 <pixel+0x3c>
20000676:	e090      	b.n	2000079a <pixel+0x15e>
20000678:	1dbb      	adds	r3, r7, #6
2000067a:	781b      	ldrb	r3, [r3, #0]
2000067c:	2b40      	cmp	r3, #64	; 0x40
2000067e:	d900      	bls.n	20000682 <pixel+0x46>
20000680:	e08b      	b.n	2000079a <pixel+0x15e>
		return 0;
	}
	
	index = (y-1) / 8;
20000682:	1dbb      	adds	r3, r7, #6
20000684:	781b      	ldrb	r3, [r3, #0]
20000686:	3b01      	subs	r3, #1
20000688:	2b00      	cmp	r3, #0
2000068a:	da00      	bge.n	2000068e <pixel+0x52>
2000068c:	3307      	adds	r3, #7
2000068e:	10db      	asrs	r3, r3, #3
20000690:	613b      	str	r3, [r7, #16]
	
	mask = 1 << ((y-1) % 8);
20000692:	1dbb      	adds	r3, r7, #6
20000694:	781b      	ldrb	r3, [r3, #0]
20000696:	3b01      	subs	r3, #1
20000698:	4a42      	ldr	r2, [pc, #264]	; (200007a4 <pixel+0x168>)
2000069a:	4013      	ands	r3, r2
2000069c:	d504      	bpl.n	200006a8 <pixel+0x6c>
2000069e:	3b01      	subs	r3, #1
200006a0:	2208      	movs	r2, #8
200006a2:	4252      	negs	r2, r2
200006a4:	4313      	orrs	r3, r2
200006a6:	3301      	adds	r3, #1
200006a8:	001a      	movs	r2, r3
200006aa:	2301      	movs	r3, #1
200006ac:	4093      	lsls	r3, r2
200006ae:	001a      	movs	r2, r3
200006b0:	2117      	movs	r1, #23
200006b2:	187b      	adds	r3, r7, r1
200006b4:	701a      	strb	r2, [r3, #0]
	
	if (set == 0) {
200006b6:	1d7b      	adds	r3, r7, #5
200006b8:	781b      	ldrb	r3, [r3, #0]
200006ba:	2b00      	cmp	r3, #0
200006bc:	d104      	bne.n	200006c8 <pixel+0x8c>
		mask = ~mask;
200006be:	187b      	adds	r3, r7, r1
200006c0:	187a      	adds	r2, r7, r1
200006c2:	7812      	ldrb	r2, [r2, #0]
200006c4:	43d2      	mvns	r2, r2
200006c6:	701a      	strb	r2, [r3, #0]
	}
	
	if (x > 64) {
200006c8:	1dfb      	adds	r3, r7, #7
200006ca:	781b      	ldrb	r3, [r3, #0]
200006cc:	2b40      	cmp	r3, #64	; 0x40
200006ce:	d90a      	bls.n	200006e6 <pixel+0xaa>
		controller = B_CS2;
200006d0:	2316      	movs	r3, #22
200006d2:	18fb      	adds	r3, r7, r3
200006d4:	2210      	movs	r2, #16
200006d6:	701a      	strb	r2, [r3, #0]
		x_actual = x - 65;
200006d8:	2315      	movs	r3, #21
200006da:	18fb      	adds	r3, r7, r3
200006dc:	1dfa      	adds	r2, r7, #7
200006de:	7812      	ldrb	r2, [r2, #0]
200006e0:	3a41      	subs	r2, #65	; 0x41
200006e2:	701a      	strb	r2, [r3, #0]
200006e4:	e009      	b.n	200006fa <pixel+0xbe>
	} else {
		controller = B_CS1;
200006e6:	2316      	movs	r3, #22
200006e8:	18fb      	adds	r3, r7, r3
200006ea:	2208      	movs	r2, #8
200006ec:	701a      	strb	r2, [r3, #0]
		x_actual = x - 1;
200006ee:	2315      	movs	r3, #21
200006f0:	18fb      	adds	r3, r7, r3
200006f2:	1dfa      	adds	r2, r7, #7
200006f4:	7812      	ldrb	r2, [r2, #0]
200006f6:	3a01      	subs	r2, #1
200006f8:	701a      	strb	r2, [r3, #0]
	}
	
	graphic_write_command(LCD_SET_ADD | x_actual, controller);
200006fa:	2615      	movs	r6, #21
200006fc:	19bb      	adds	r3, r7, r6
200006fe:	781b      	ldrb	r3, [r3, #0]
20000700:	2240      	movs	r2, #64	; 0x40
20000702:	4313      	orrs	r3, r2
20000704:	b2da      	uxtb	r2, r3
20000706:	2516      	movs	r5, #22
20000708:	197b      	adds	r3, r7, r5
2000070a:	781b      	ldrb	r3, [r3, #0]
2000070c:	0019      	movs	r1, r3
2000070e:	0010      	movs	r0, r2
20000710:	f7ff fefe 	bl	20000510 <graphic_write_command>
	graphic_write_command(LCD_SET_PAGE | index, controller);
20000714:	693b      	ldr	r3, [r7, #16]
20000716:	b25b      	sxtb	r3, r3
20000718:	2248      	movs	r2, #72	; 0x48
2000071a:	4252      	negs	r2, r2
2000071c:	4313      	orrs	r3, r2
2000071e:	b25b      	sxtb	r3, r3
20000720:	b2da      	uxtb	r2, r3
20000722:	197b      	adds	r3, r7, r5
20000724:	781b      	ldrb	r3, [r3, #0]
20000726:	0019      	movs	r1, r3
20000728:	0010      	movs	r0, r2
2000072a:	f7ff fef1 	bl	20000510 <graphic_write_command>
	temp = graphic_read_data(controller);
2000072e:	230f      	movs	r3, #15
20000730:	18fc      	adds	r4, r7, r3
20000732:	197b      	adds	r3, r7, r5
20000734:	781b      	ldrb	r3, [r3, #0]
20000736:	0018      	movs	r0, r3
20000738:	f7ff ff2d 	bl	20000596 <graphic_read_data>
2000073c:	0003      	movs	r3, r0
2000073e:	7023      	strb	r3, [r4, #0]
	graphic_write_command(LCD_SET_ADD | x_actual, controller);
20000740:	19bb      	adds	r3, r7, r6
20000742:	781b      	ldrb	r3, [r3, #0]
20000744:	2240      	movs	r2, #64	; 0x40
20000746:	4313      	orrs	r3, r2
20000748:	b2da      	uxtb	r2, r3
2000074a:	197b      	adds	r3, r7, r5
2000074c:	781b      	ldrb	r3, [r3, #0]
2000074e:	0019      	movs	r1, r3
20000750:	0010      	movs	r0, r2
20000752:	f7ff fedd 	bl	20000510 <graphic_write_command>
	
	if (set == 1) {
20000756:	1d7b      	adds	r3, r7, #5
20000758:	781b      	ldrb	r3, [r3, #0]
2000075a:	2b01      	cmp	r3, #1
2000075c:	d109      	bne.n	20000772 <pixel+0x136>
		mask = mask | temp;
2000075e:	2117      	movs	r1, #23
20000760:	187b      	adds	r3, r7, r1
20000762:	1879      	adds	r1, r7, r1
20000764:	220f      	movs	r2, #15
20000766:	18ba      	adds	r2, r7, r2
20000768:	7809      	ldrb	r1, [r1, #0]
2000076a:	7812      	ldrb	r2, [r2, #0]
2000076c:	430a      	orrs	r2, r1
2000076e:	701a      	strb	r2, [r3, #0]
20000770:	e008      	b.n	20000784 <pixel+0x148>
	} else {
		mask = mask & temp;
20000772:	2217      	movs	r2, #23
20000774:	18bb      	adds	r3, r7, r2
20000776:	18ba      	adds	r2, r7, r2
20000778:	210f      	movs	r1, #15
2000077a:	1879      	adds	r1, r7, r1
2000077c:	7812      	ldrb	r2, [r2, #0]
2000077e:	7809      	ldrb	r1, [r1, #0]
20000780:	400a      	ands	r2, r1
20000782:	701a      	strb	r2, [r3, #0]
	}
	
	graphic_write_data(mask, controller);
20000784:	2316      	movs	r3, #22
20000786:	18fb      	adds	r3, r7, r3
20000788:	781a      	ldrb	r2, [r3, #0]
2000078a:	2317      	movs	r3, #23
2000078c:	18fb      	adds	r3, r7, r3
2000078e:	781b      	ldrb	r3, [r3, #0]
20000790:	0011      	movs	r1, r2
20000792:	0018      	movs	r0, r3
20000794:	f7ff fedc 	bl	20000550 <graphic_write_data>
20000798:	e000      	b.n	2000079c <pixel+0x160>
		return 0;
2000079a:	46c0      	nop			; (mov r8, r8)
}
2000079c:	46bd      	mov	sp, r7
2000079e:	b007      	add	sp, #28
200007a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
200007a2:	46c0      	nop			; (mov r8, r8)
200007a4:	80000007 	andhi	r0, r0, r7

200007a8 <app_init>:

void app_init() {
200007a8:	b580      	push	{r7, lr}
200007aa:	af00      	add	r7, sp, #0
	*GPIO_MODER &= 0x00000000;
200007ac:	4b06      	ldr	r3, [pc, #24]	; (200007c8 <app_init+0x20>)
200007ae:	681b      	ldr	r3, [r3, #0]
200007b0:	4b05      	ldr	r3, [pc, #20]	; (200007c8 <app_init+0x20>)
200007b2:	2200      	movs	r2, #0
200007b4:	601a      	str	r2, [r3, #0]
	*GPIO_MODER |= 0x55555555;
200007b6:	4b04      	ldr	r3, [pc, #16]	; (200007c8 <app_init+0x20>)
200007b8:	681a      	ldr	r2, [r3, #0]
200007ba:	4b03      	ldr	r3, [pc, #12]	; (200007c8 <app_init+0x20>)
200007bc:	4903      	ldr	r1, [pc, #12]	; (200007cc <app_init+0x24>)
200007be:	430a      	orrs	r2, r1
200007c0:	601a      	str	r2, [r3, #0]
}
200007c2:	46c0      	nop			; (mov r8, r8)
200007c4:	46bd      	mov	sp, r7
200007c6:	bd80      	pop	{r7, pc}
200007c8:	40021000 	andmi	r1, r2, r0
200007cc:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

200007d0 <main>:
		move_object,
		set_object_speed
	};

void main(void)
{
200007d0:	b580      	push	{r7, lr}
200007d2:	b082      	sub	sp, #8
200007d4:	af00      	add	r7, sp, #0
	POBJECT p = &ball;
200007d6:	4b0a      	ldr	r3, [pc, #40]	; (20000800 <main+0x30>)
200007d8:	607b      	str	r3, [r7, #4]
	app_init();
200007da:	f7ff ffe5 	bl	200007a8 <app_init>
	graphic_initialize();
200007de:	f7ff feef 	bl	200005c0 <graphic_initialize>
	#ifndef SIMULATOR
		graphic_clear_screen();
	#endif
	
	p->set_speed(p, 10, 10);
200007e2:	687b      	ldr	r3, [r7, #4]
200007e4:	6a1b      	ldr	r3, [r3, #32]
200007e6:	6878      	ldr	r0, [r7, #4]
200007e8:	220a      	movs	r2, #10
200007ea:	210a      	movs	r1, #10
200007ec:	4798      	blx	r3
	while(1) {
		p->move(p);
200007ee:	687b      	ldr	r3, [r7, #4]
200007f0:	69db      	ldr	r3, [r3, #28]
200007f2:	687a      	ldr	r2, [r7, #4]
200007f4:	0010      	movs	r0, r2
200007f6:	4798      	blx	r3
		delay_milli(4);
200007f8:	2004      	movs	r0, #4
200007fa:	f7ff fd2b 	bl	20000254 <delay_milli>
		p->move(p);
200007fe:	e7f6      	b.n	200007ee <main+0x1e>
20000800:	20000950 	andcs	r0, r0, r0, asr r9

20000804 <__udivsi3>:
20000804:	2200      	movs	r2, #0
20000806:	0843      	lsrs	r3, r0, #1
20000808:	428b      	cmp	r3, r1
2000080a:	d374      	bcc.n	200008f6 <__udivsi3+0xf2>
2000080c:	0903      	lsrs	r3, r0, #4
2000080e:	428b      	cmp	r3, r1
20000810:	d35f      	bcc.n	200008d2 <__udivsi3+0xce>
20000812:	0a03      	lsrs	r3, r0, #8
20000814:	428b      	cmp	r3, r1
20000816:	d344      	bcc.n	200008a2 <__udivsi3+0x9e>
20000818:	0b03      	lsrs	r3, r0, #12
2000081a:	428b      	cmp	r3, r1
2000081c:	d328      	bcc.n	20000870 <__udivsi3+0x6c>
2000081e:	0c03      	lsrs	r3, r0, #16
20000820:	428b      	cmp	r3, r1
20000822:	d30d      	bcc.n	20000840 <__udivsi3+0x3c>
20000824:	22ff      	movs	r2, #255	; 0xff
20000826:	0209      	lsls	r1, r1, #8
20000828:	ba12      	rev	r2, r2
2000082a:	0c03      	lsrs	r3, r0, #16
2000082c:	428b      	cmp	r3, r1
2000082e:	d302      	bcc.n	20000836 <__udivsi3+0x32>
20000830:	1212      	asrs	r2, r2, #8
20000832:	0209      	lsls	r1, r1, #8
20000834:	d065      	beq.n	20000902 <__udivsi3+0xfe>
20000836:	0b03      	lsrs	r3, r0, #12
20000838:	428b      	cmp	r3, r1
2000083a:	d319      	bcc.n	20000870 <__udivsi3+0x6c>
2000083c:	e000      	b.n	20000840 <__udivsi3+0x3c>
2000083e:	0a09      	lsrs	r1, r1, #8
20000840:	0bc3      	lsrs	r3, r0, #15
20000842:	428b      	cmp	r3, r1
20000844:	d301      	bcc.n	2000084a <__udivsi3+0x46>
20000846:	03cb      	lsls	r3, r1, #15
20000848:	1ac0      	subs	r0, r0, r3
2000084a:	4152      	adcs	r2, r2
2000084c:	0b83      	lsrs	r3, r0, #14
2000084e:	428b      	cmp	r3, r1
20000850:	d301      	bcc.n	20000856 <__udivsi3+0x52>
20000852:	038b      	lsls	r3, r1, #14
20000854:	1ac0      	subs	r0, r0, r3
20000856:	4152      	adcs	r2, r2
20000858:	0b43      	lsrs	r3, r0, #13
2000085a:	428b      	cmp	r3, r1
2000085c:	d301      	bcc.n	20000862 <__udivsi3+0x5e>
2000085e:	034b      	lsls	r3, r1, #13
20000860:	1ac0      	subs	r0, r0, r3
20000862:	4152      	adcs	r2, r2
20000864:	0b03      	lsrs	r3, r0, #12
20000866:	428b      	cmp	r3, r1
20000868:	d301      	bcc.n	2000086e <__udivsi3+0x6a>
2000086a:	030b      	lsls	r3, r1, #12
2000086c:	1ac0      	subs	r0, r0, r3
2000086e:	4152      	adcs	r2, r2
20000870:	0ac3      	lsrs	r3, r0, #11
20000872:	428b      	cmp	r3, r1
20000874:	d301      	bcc.n	2000087a <__udivsi3+0x76>
20000876:	02cb      	lsls	r3, r1, #11
20000878:	1ac0      	subs	r0, r0, r3
2000087a:	4152      	adcs	r2, r2
2000087c:	0a83      	lsrs	r3, r0, #10
2000087e:	428b      	cmp	r3, r1
20000880:	d301      	bcc.n	20000886 <__udivsi3+0x82>
20000882:	028b      	lsls	r3, r1, #10
20000884:	1ac0      	subs	r0, r0, r3
20000886:	4152      	adcs	r2, r2
20000888:	0a43      	lsrs	r3, r0, #9
2000088a:	428b      	cmp	r3, r1
2000088c:	d301      	bcc.n	20000892 <__udivsi3+0x8e>
2000088e:	024b      	lsls	r3, r1, #9
20000890:	1ac0      	subs	r0, r0, r3
20000892:	4152      	adcs	r2, r2
20000894:	0a03      	lsrs	r3, r0, #8
20000896:	428b      	cmp	r3, r1
20000898:	d301      	bcc.n	2000089e <__udivsi3+0x9a>
2000089a:	020b      	lsls	r3, r1, #8
2000089c:	1ac0      	subs	r0, r0, r3
2000089e:	4152      	adcs	r2, r2
200008a0:	d2cd      	bcs.n	2000083e <__udivsi3+0x3a>
200008a2:	09c3      	lsrs	r3, r0, #7
200008a4:	428b      	cmp	r3, r1
200008a6:	d301      	bcc.n	200008ac <__udivsi3+0xa8>
200008a8:	01cb      	lsls	r3, r1, #7
200008aa:	1ac0      	subs	r0, r0, r3
200008ac:	4152      	adcs	r2, r2
200008ae:	0983      	lsrs	r3, r0, #6
200008b0:	428b      	cmp	r3, r1
200008b2:	d301      	bcc.n	200008b8 <__udivsi3+0xb4>
200008b4:	018b      	lsls	r3, r1, #6
200008b6:	1ac0      	subs	r0, r0, r3
200008b8:	4152      	adcs	r2, r2
200008ba:	0943      	lsrs	r3, r0, #5
200008bc:	428b      	cmp	r3, r1
200008be:	d301      	bcc.n	200008c4 <__udivsi3+0xc0>
200008c0:	014b      	lsls	r3, r1, #5
200008c2:	1ac0      	subs	r0, r0, r3
200008c4:	4152      	adcs	r2, r2
200008c6:	0903      	lsrs	r3, r0, #4
200008c8:	428b      	cmp	r3, r1
200008ca:	d301      	bcc.n	200008d0 <__udivsi3+0xcc>
200008cc:	010b      	lsls	r3, r1, #4
200008ce:	1ac0      	subs	r0, r0, r3
200008d0:	4152      	adcs	r2, r2
200008d2:	08c3      	lsrs	r3, r0, #3
200008d4:	428b      	cmp	r3, r1
200008d6:	d301      	bcc.n	200008dc <__udivsi3+0xd8>
200008d8:	00cb      	lsls	r3, r1, #3
200008da:	1ac0      	subs	r0, r0, r3
200008dc:	4152      	adcs	r2, r2
200008de:	0883      	lsrs	r3, r0, #2
200008e0:	428b      	cmp	r3, r1
200008e2:	d301      	bcc.n	200008e8 <__udivsi3+0xe4>
200008e4:	008b      	lsls	r3, r1, #2
200008e6:	1ac0      	subs	r0, r0, r3
200008e8:	4152      	adcs	r2, r2
200008ea:	0843      	lsrs	r3, r0, #1
200008ec:	428b      	cmp	r3, r1
200008ee:	d301      	bcc.n	200008f4 <__udivsi3+0xf0>
200008f0:	004b      	lsls	r3, r1, #1
200008f2:	1ac0      	subs	r0, r0, r3
200008f4:	4152      	adcs	r2, r2
200008f6:	1a41      	subs	r1, r0, r1
200008f8:	d200      	bcs.n	200008fc <__udivsi3+0xf8>
200008fa:	4601      	mov	r1, r0
200008fc:	4152      	adcs	r2, r2
200008fe:	4610      	mov	r0, r2
20000900:	4770      	bx	lr
20000902:	e7ff      	b.n	20000904 <__udivsi3+0x100>
20000904:	b501      	push	{r0, lr}
20000906:	2000      	movs	r0, #0
20000908:	f000 f806 	bl	20000918 <__aeabi_idiv0>
2000090c:	bd02      	pop	{r1, pc}
2000090e:	46c0      	nop			; (mov r8, r8)

20000910 <__aeabi_uidivmod>:
20000910:	2900      	cmp	r1, #0
20000912:	d0f7      	beq.n	20000904 <__udivsi3+0x100>
20000914:	e776      	b.n	20000804 <__udivsi3>
20000916:	4770      	bx	lr

20000918 <__aeabi_idiv0>:
20000918:	4770      	bx	lr
2000091a:	46c0      	nop			; (mov r8, r8)

2000091c <ball_geometry>:
2000091c:	0000000c 	andeq	r0, r0, ip
20000920:	00000004 	andeq	r0, r0, r4
20000924:	00000004 	andeq	r0, r0, r4
20000928:	02000100 	andeq	r0, r0, #0, 2
2000092c:	01010001 	tsteq	r1, r1
20000930:	03010201 	movweq	r0, #4609	; 0x1201
20000934:	01020002 	tsteq	r2, r2
20000938:	03020202 	movweq	r0, #8706	; 0x2202
2000093c:	02030103 	andeq	r0, r3, #-1073741824	; 0xc0000000
	...

20000950 <ball>:
20000950:	2000091c 	andcs	r0, r0, ip, lsl r9
	...
2000095c:	00000001 	andeq	r0, r0, r1
20000960:	00000001 	andeq	r0, r0, r1
20000964:	20000031 	andcs	r0, r0, r1, lsr r0
20000968:	200000a1 	andcs	r0, r0, r1, lsr #1
2000096c:	20000111 	andcs	r0, r0, r1, lsl r1
20000970:	20000011 	andcs	r0, r0, r1, lsl r0

Disassembly of section .debug_info:

00000000 <.debug_info>:
   0:	00000672 	andeq	r0, r0, r2, ror r6
   4:	00000004 	andeq	r0, r0, r4
   8:	01040000 	mrseq	r0, (UNDEF: 4)
   c:	000001d6 	ldrdeq	r0, [r0], -r6
  10:	0001660c 	andeq	r6, r1, ip, lsl #12
  14:	0000d800 	andeq	sp, r0, r0, lsl #16
	...
  24:	01c20200 	biceq	r0, r2, r0, lsl #4
  28:	2d010000 	stccs	0, cr0, [r1, #-0]
  2c:	00003117 	andeq	r3, r0, r7, lsl r1
  30:	08010300 	stmdaeq	r1, {r8, r9}
  34:	0000008c 	andeq	r0, r0, ip, lsl #1
  38:	00007604 	andeq	r7, r0, r4, lsl #12
  3c:	31010200 	mrscc	r0, R9_usr
  40:	00005c10 	andeq	r5, r0, r0, lsl ip
  44:	00780500 	rsbseq	r0, r8, r0, lsl #10
  48:	250a3201 	strcs	r3, [sl, #-513]	; 0xfffffdff
  4c:	00000000 	andeq	r0, r0, r0
  50:	01007905 	tsteq	r0, r5, lsl #18
  54:	00250a33 	eoreq	r0, r5, r3, lsr sl
  58:	00010000 	andeq	r0, r1, r0
  5c:	00007d02 	andeq	r7, r0, r2, lsl #26
  60:	03340100 	teqeq	r4, #0, 2
  64:	00000038 	andeq	r0, r0, r8, lsr r0
  68:	00026f04 	andeq	r6, r2, r4, lsl #30
  6c:	38013400 	stmdacc	r1, {sl, ip, sp}
  70:	0000a910 	andeq	sl, r0, r0, lsl r9
  74:	02fb0600 	rscseq	r0, fp, #0, 12
  78:	39010000 	stmdbcc	r1, {}	; <UNPREDICTABLE>
  7c:	0000a906 	andeq	sl, r0, r6, lsl #18
  80:	ca060000 	bgt	180088 <startup-0x1fe7ff78>
  84:	01000001 	tsteq	r0, r1
  88:	00a9063a 	adceq	r0, r9, sl, lsr r6
  8c:	06040000 	streq	r0, [r4], -r0
  90:	000001d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
  94:	a9063b01 	stmdbge	r6, {r0, r8, r9, fp, ip, sp}
  98:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
  9c:	00787005 	rsbseq	r7, r8, r5
  a0:	b0083c01 	andlt	r3, r8, r1, lsl #24
  a4:	0c000000 	stceq	0, cr0, [r0], {-0}
  a8:	05040700 	streq	r0, [r4, #-1792]	; 0xfffff900
  ac:	00746e69 	rsbseq	r6, r4, r9, ror #28
  b0:	00005c08 	andeq	r5, r0, r8, lsl #24
  b4:	0000c000 	andeq	ip, r0, r0
  b8:	00c00900 	sbceq	r0, r0, r0, lsl #18
  bc:	00130000 	andseq	r0, r3, r0
  c0:	59070403 	stmdbpl	r7, {r0, r1, sl}
  c4:	02000001 	andeq	r0, r0, #1
  c8:	00000001 	andeq	r0, r0, r1
  cc:	68033d01 	stmdavs	r3, {r0, r8, sl, fp, ip, sp}
  d0:	02000000 	andeq	r0, r0, #0
  d4:	00000000 	andeq	r0, r0, r0
  d8:	df0e3d01 	svcle	0x000e3d01
  dc:	0a000000 	beq	e4 <startup-0x1fffff1c>
  e0:	00006804 	andeq	r6, r0, r4, lsl #16
  e4:	00ae0b00 	adceq	r0, lr, r0, lsl #22
  e8:	3f010000 	svccc	0x00010000
  ec:	0000c70a 	andeq	ip, r0, sl, lsl #14
  f0:	1c030500 	cfstr32ne	mvfx0, [r3], {-0}
  f4:	04200009 	strteq	r0, [r0], #-9
  f8:	000002dd 	ldrdeq	r0, [r0], -sp
  fc:	10470124 	subne	r0, r7, r4, lsr #2
 100:	0000017a 	andeq	r0, r0, sl, ror r1
 104:	6f656705 	svcvs	0x00656705
 108:	0c480100 	stfeqe	f0, [r8], {-0}
 10c:	000000d3 	ldrdeq	r0, [r0], -r3
 110:	00480600 	subeq	r0, r8, r0, lsl #12
 114:	49010000 	stmdbmi	r1, {}	; <UNPREDICTABLE>
 118:	0000a906 	andeq	sl, r0, r6, lsl #18
 11c:	4d060400 	cfstrsmi	mvf0, [r6, #-0]
 120:	01000000 	mrseq	r0, (UNDEF: 0)
 124:	00a90c49 	adceq	r0, r9, r9, asr #24
 128:	06080000 	streq	r0, [r8], -r0
 12c:	000000a4 	andeq	r0, r0, r4, lsr #1
 130:	a9064a01 	stmdbge	r6, {r0, r9, fp, lr}
 134:	0c000000 	stceq	0, cr0, [r0], {-0}
 138:	0000a906 	andeq	sl, r0, r6, lsl #18
 13c:	0c4a0100 	stfeqe	f0, [sl], {-0}
 140:	000000a9 	andeq	r0, r0, r9, lsr #1
 144:	025f0610 	subseq	r0, pc, #16, 12	; 0x1000000
 148:	4b010000 	blmi	40150 <startup-0x1ffbfeb0>
 14c:	00018b0a 	andeq	r8, r1, sl, lsl #22
 150:	3e061400 	cfcpyscc	mvf1, mvf6
 154:	01000001 	tsteq	r0, r1
 158:	018b0a4c 	orreq	r0, fp, ip, asr #20
 15c:	06180000 	ldreq	r0, [r8], -r0
 160:	00000017 	andeq	r0, r0, r7, lsl r0
 164:	8b0a4d01 	blhi	293570 <startup-0x1fd6ca90>
 168:	1c000001 	stcne	0, cr0, [r0], {1}
 16c:	00009a06 	andeq	r9, r0, r6, lsl #20
 170:	0a4e0100 	beq	1380578 <startup-0x1ec7fa88>
 174:	000001a6 	andeq	r0, r0, r6, lsr #3
 178:	850c0020 	strhi	r0, [ip, #-32]	; 0xffffffe0
 17c:	0d000001 	stceq	0, cr0, [r0, #-4]
 180:	00000185 	andeq	r0, r0, r5, lsl #3
 184:	f7040a00 			; <UNDEFINED> instruction: 0xf7040a00
 188:	0a000000 	beq	190 <startup-0x1ffffe70>
 18c:	00017a04 	andeq	r7, r1, r4, lsl #20
 190:	01a60c00 			; <UNDEFINED> instruction: 0x01a60c00
 194:	850d0000 	strhi	r0, [sp, #-0]
 198:	0d000001 	stceq	0, cr0, [r0, #-4]
 19c:	000000a9 	andeq	r0, r0, r9, lsr #1
 1a0:	0000a90d 	andeq	sl, r0, sp, lsl #18
 1a4:	040a0000 	streq	r0, [sl], #-0
 1a8:	00000191 	muleq	r0, r1, r1
 1ac:	00032f02 	andeq	r2, r3, r2, lsl #30
 1b0:	034f0100 	movteq	r0, #61696	; 0xf100
 1b4:	000000f7 	strdeq	r0, [r0], -r7
 1b8:	00032e02 	andeq	r2, r3, r2, lsl #28
 1bc:	0c4f0100 	stfeqe	f0, [pc], {-0}
 1c0:	00000185 	andeq	r0, r0, r5, lsl #3
 1c4:	00025a0e 	andeq	r5, r2, lr, lsl #20
 1c8:	015e0100 	cmpeq	lr, r0, lsl #2
 1cc:	0001ac0f 	andeq	sl, r1, pc, lsl #24
 1d0:	50030500 	andpl	r0, r3, r0, lsl #10
 1d4:	0f200009 	svceq	0x00200009
 1d8:	00000115 	andeq	r0, r0, r5, lsl r1
 1dc:	06016801 	streq	r6, [r1], -r1, lsl #16
 1e0:	200007d0 	ldrdcs	r0, [r0], -r0	; <UNPREDICTABLE>
 1e4:	00000034 	andeq	r0, r0, r4, lsr r0
 1e8:	01fd9c01 	mvnseq	r9, r1, lsl #24
 1ec:	70100000 	andsvc	r0, r0, r0
 1f0:	016a0100 	cmneq	sl, r0, lsl #2
 1f4:	0001b80a 	andeq	fp, r1, sl, lsl #16
 1f8:	74910200 	ldrvc	r0, [r1], #512	; 0x200
 1fc:	00cf1100 	sbceq	r1, pc, r0, lsl #2
 200:	59010000 	stmdbpl	r1, {}	; <UNPREDICTABLE>
 204:	07a80601 	streq	r0, [r8, r1, lsl #12]!
 208:	00282000 	eoreq	r2, r8, r0
 20c:	9c010000 	stcls	0, cr0, [r1], {-0}
 210:	0000700f 	andeq	r7, r0, pc
 214:	01330100 	teqeq	r3, r0, lsl #2
 218:	00063c06 	andeq	r3, r6, r6, lsl #24
 21c:	00016c20 	andeq	r6, r1, r0, lsr #24
 220:	a49c0100 	ldrge	r0, [ip], #256	; 0x100
 224:	12000002 	andne	r0, r0, #2
 228:	33010078 	movwcc	r0, #4216	; 0x1078
 22c:	00251401 	eoreq	r1, r5, r1, lsl #8
 230:	91020000 	mrsls	r0, (UNDEF: 2)
 234:	00791257 	rsbseq	r1, r9, r7, asr r2
 238:	1f013301 	svcne	0x00013301
 23c:	00000025 	andeq	r0, r0, r5, lsr #32
 240:	12569102 	subsne	r9, r6, #-2147483648	; 0x80000000
 244:	00746573 	rsbseq	r6, r4, r3, ror r5
 248:	2a013301 	bcs	4ce54 <startup-0x1ffb31ac>
 24c:	00000025 	andeq	r0, r0, r5, lsr #32
 250:	0e559102 	logeqs	f1, f2
 254:	00000264 	andeq	r0, r0, r4, ror #4
 258:	0a013401 	beq	4d264 <startup-0x1ffb2d9c>
 25c:	00000025 	andeq	r0, r0, r5, lsr #32
 260:	0e679102 	lgneqs	f1, f2
 264:	00000023 	andeq	r0, r0, r3, lsr #32
 268:	10013401 	andne	r3, r1, r1, lsl #8
 26c:	00000025 	andeq	r0, r0, r5, lsr #32
 270:	0e669102 	lgneqs	f1, f2
 274:	00000083 	andeq	r0, r0, r3, lsl #1
 278:	1c013401 	cfstrsne	mvf3, [r1], {1}
 27c:	00000025 	andeq	r0, r0, r5, lsr #32
 280:	0e659102 	lgneqs	f1, f2
 284:	000000ca 	andeq	r0, r0, sl, asr #1
 288:	26013401 	strcs	r3, [r1], -r1, lsl #8
 28c:	00000025 	andeq	r0, r0, r5, lsr #32
 290:	0e5f9102 	logeqe	f1, f2
 294:	00000269 	andeq	r0, r0, r9, ror #4
 298:	06013501 	streq	r3, [r1], -r1, lsl #10
 29c:	000000a9 	andeq	r0, r0, r9, lsr #1
 2a0:	00609102 	rsbeq	r9, r0, r2, lsl #2
 2a4:	0002bc13 	andeq	fp, r2, r3, lsl ip
 2a8:	01290100 			; <UNDEFINED> instruction: 0x01290100
 2ac:	00062806 	andeq	r2, r6, r6, lsl #16
 2b0:	00001420 	andeq	r1, r0, r0, lsr #8
 2b4:	e59c0100 	ldr	r0, [ip, #256]	; 0x100
 2b8:	14000002 	strne	r0, [r0], #-2
 2bc:	2000062e 	andcs	r0, r0, lr, lsr #12
 2c0:	00000006 	andeq	r0, r0, r6
 2c4:	0000640e 	andeq	r6, r0, lr, lsl #8
 2c8:	012a0100 			; <UNDEFINED> instruction: 0x012a0100
 2cc:	0000a90a 	andeq	sl, r0, sl, lsl #18
 2d0:	74910200 	ldrvc	r0, [r1], #512	; 0x200
 2d4:	01ad1615 			; <UNDEFINED> instruction: 0x01ad1615
 2d8:	2d010000 	stccs	0, cr0, [r1, #-0]
 2dc:	00a90b01 	adceq	r0, r9, r1, lsl #22
 2e0:	00000000 	andeq	r0, r0, r0
 2e4:	011a1700 	tsteq	sl, r0, lsl #14
 2e8:	18010000 	stmdane	r1, {}	; <UNPREDICTABLE>
 2ec:	05c00601 	strbeq	r0, [r0, #1537]	; 0x601
 2f0:	00682000 	rsbeq	r2, r8, r0
 2f4:	9c010000 	stcls	0, cr0, [r1], {-0}
 2f8:	00005218 	andeq	r5, r0, r8, lsl r2
 2fc:	01130100 	tsteq	r3, r0, lsl #2
 300:	00002509 	andeq	r2, r0, r9, lsl #10
 304:	00059600 	andeq	r9, r5, r0, lsl #12
 308:	00002a20 	andeq	r2, r0, r0, lsr #20
 30c:	249c0100 	ldrcs	r0, [ip], #256	; 0x100
 310:	19000003 	stmdbne	r0, {r0, r1}
 314:	00000023 	andeq	r0, r0, r3, lsr #32
 318:	23011301 	movwcs	r1, #4865	; 0x1301
 31c:	00000025 	andeq	r0, r0, r5, lsr #32
 320:	00779102 	rsbseq	r9, r7, r2, lsl #2
 324:	0002850f 	andeq	r8, r2, pc, lsl #10
 328:	010b0100 	mrseq	r0, (UNDEF: 27)
 32c:	00055006 	andeq	r5, r5, r6
 330:	00004620 	andeq	r4, r0, r0, lsr #12
 334:	5c9c0100 	ldfpls	f0, [ip], {0}
 338:	19000003 	stmdbne	r0, {r0, r1}
 33c:	0000005f 	andeq	r0, r0, pc, asr r0
 340:	21010b01 	tstcs	r1, r1, lsl #22
 344:	00000025 	andeq	r0, r0, r5, lsr #32
 348:	19779102 	ldmdbne	r7!, {r1, r8, ip, pc}^
 34c:	00000023 	andeq	r0, r0, r3, lsr #32
 350:	2f010b01 	svccs	0x00010b01
 354:	00000025 	andeq	r0, r0, r5, lsr #32
 358:	00769102 	rsbseq	r9, r6, r2, lsl #2
 35c:	0003110f 	andeq	r1, r3, pc, lsl #2
 360:	01040100 	mrseq	r0, (UNDEF: 20)
 364:	00051006 	andeq	r1, r5, r6
 368:	00004020 	andeq	r4, r0, r0, lsr #32
 36c:	949c0100 	ldrls	r0, [ip], #256	; 0x100
 370:	19000003 	stmdbne	r0, {r0, r1}
 374:	0000031f 	andeq	r0, r0, pc, lsl r3
 378:	24010401 	strcs	r0, [r1], #-1025	; 0xfffffbff
 37c:	00000025 	andeq	r0, r0, r5, lsr #32
 380:	19779102 	ldmdbne	r7!, {r1, r8, ip, pc}^
 384:	00000023 	andeq	r0, r0, r3, lsr #32
 388:	35010401 	strcc	r0, [r1, #-1025]	; 0xfffffbff
 38c:	00000025 	andeq	r0, r0, r5, lsr #32
 390:	00769102 	rsbseq	r9, r6, r2, lsl #2
 394:	0000bc1a 	andeq	fp, r0, sl, lsl ip
 398:	06ef0100 	strbteq	r0, [pc], r0, lsl #2
 39c:	20000490 	mulcs	r0, r0, r4
 3a0:	00000080 	andeq	r0, r0, r0, lsl #1
 3a4:	03c99c01 	biceq	r9, r9, #256	; 0x100
 3a8:	421b0000 	andsmi	r0, fp, #0
 3ac:	01000000 	mrseq	r0, (UNDEF: 0)
 3b0:	00251cef 	eoreq	r1, r5, pc, ror #25
 3b4:	91020000 	mrsls	r0, (UNDEF: 2)
 3b8:	00231b77 	eoreq	r1, r3, r7, ror fp
 3bc:	ef010000 	svc	0x00010000
 3c0:	0000252b 	andeq	r2, r0, fp, lsr #10
 3c4:	76910200 	ldrvc	r0, [r1], r0, lsl #4
 3c8:	02ee1c00 	rsceq	r1, lr, #0, 24
 3cc:	d8010000 	stmdale	r1, {}	; <UNPREDICTABLE>
 3d0:	00002509 	andeq	r2, r0, r9, lsl #10
 3d4:	0003fc00 	andeq	pc, r3, r0, lsl #24
 3d8:	00009420 	andeq	r9, r0, r0, lsr #8
 3dc:	029c0100 	addseq	r0, ip, #0, 2
 3e0:	1b000004 	blne	3f8 <startup-0x1ffffc08>
 3e4:	00000023 	andeq	r0, r0, r3, lsr #32
 3e8:	251ed801 	ldrcs	sp, [lr, #-2049]	; 0xfffff7ff
 3ec:	02000000 	andeq	r0, r0, #0
 3f0:	3b1d6f91 	blcc	75c23c <startup-0x1f8a3dc4>
 3f4:	01000000 	mrseq	r0, (UNDEF: 0)
 3f8:	00250ad9 	ldrdeq	r0, [r5], -r9	; <UNPREDICTABLE>
 3fc:	91020000 	mrsls	r0, (UNDEF: 2)
 400:	a91e0077 	ldmdbge	lr, {r0, r1, r2, r4, r5, r6}
 404:	01000002 	tsteq	r0, r2
 408:	039606c5 	orrseq	r0, r6, #206569472	; 0xc500000
 40c:	00662000 	rsbeq	r2, r6, r0
 410:	9c010000 	stcls	0, cr0, [r1], {-0}
 414:	00001c1f 	andeq	r1, r0, pc, lsl ip
 418:	06b20100 	ldrteq	r0, [r2], r0, lsl #2
 41c:	20000334 	andcs	r0, r0, r4, lsr r3
 420:	00000062 	andeq	r0, r0, r2, rrx
 424:	043a9c01 	ldrteq	r9, [sl], #-3073	; 0xfffff3ff
 428:	231b0000 	tstcs	fp, #0
 42c:	01000000 	mrseq	r0, (UNDEF: 0)
 430:	00a906b2 	strhteq	r0, [r9], r2
 434:	91020000 	mrsls	r0, (UNDEF: 2)
 438:	2d200074 	stccs	0, cr0, [r0, #-464]!	; 0xfffffe30
 43c:	01000001 	tsteq	r0, r1
 440:	02e406ab 	rsceq	r0, r4, #179306496	; 0xab00000
 444:	00502000 	subseq	r2, r0, r0
 448:	9c010000 	stcls	0, cr0, [r1], {-0}
 44c:	0000046b 	andeq	r0, r0, fp, ror #8
 450:	01007821 	tsteq	r0, r1, lsr #16
 454:	002525ab 	eoreq	r2, r5, fp, lsr #11
 458:	91020000 	mrsls	r0, (UNDEF: 2)
 45c:	0063226f 	rsbeq	r2, r3, pc, ror #4
 460:	250aac01 	strcs	sl, [sl, #-3073]	; 0xfffff3ff
 464:	02000000 	andeq	r0, r0, #0
 468:	20007791 	mulcs	r0, r1, r7
 46c:	00000144 	andeq	r0, r0, r4, asr #2
 470:	9406a401 	strls	sl, [r6], #-1025	; 0xfffffbff
 474:	50200002 	eorpl	r0, r0, r2
 478:	01000000 	mrseq	r0, (UNDEF: 0)
 47c:	00049c9c 	muleq	r4, ip, ip
 480:	00782100 	rsbseq	r2, r8, r0, lsl #2
 484:	2523a401 	strcs	sl, [r3, #-1025]!	; 0xfffffbff
 488:	02000000 	andeq	r0, r0, #0
 48c:	63226f91 			; <UNDEFINED> instruction: 0x63226f91
 490:	0aa50100 	beq	fe940898 <ball+0xde93ff48>
 494:	00000025 	andeq	r0, r0, r5, lsr #32
 498:	00779102 	rsbseq	r9, r7, r2, lsl #2
 49c:	0002791a 	andeq	r7, r2, sl, lsl r9
 4a0:	06980100 	ldreq	r0, [r8], r0, lsl #2
 4a4:	20000254 	andcs	r0, r0, r4, asr r2
 4a8:	00000040 	andeq	r0, r0, r0, asr #32
 4ac:	04c19c01 	strbeq	r9, [r1], #3073	; 0xc01
 4b0:	6d210000 	stcvs	0, cr0, [r1, #-0]
 4b4:	98010073 	stmdals	r1, {r0, r1, r4, r5, r6}
 4b8:	0000c01f 	andeq	ip, r0, pc, lsl r0
 4bc:	74910200 	ldrvc	r0, [r1], #512	; 0x200
 4c0:	02d11a00 	sbcseq	r1, r1, #0, 20
 4c4:	8a010000 	bhi	404cc <startup-0x1ffbfb34>
 4c8:	00020806 	andeq	r0, r2, r6, lsl #16
 4cc:	00004c20 	andeq	r4, r0, r0, lsr #24
 4d0:	fd9c0100 	ldc2	1, cr0, [ip]
 4d4:	21000004 	tstcs	r0, r4
 4d8:	0100736d 	tsteq	r0, sp, ror #6
 4dc:	00c01f8a 	sbceq	r1, r0, sl, lsl #31
 4e0:	91020000 	mrsls	r0, (UNDEF: 2)
 4e4:	0228146c 	eoreq	r1, r8, #108, 8	; 0x6c000000
 4e8:	00162000 	andseq	r2, r6, r0
 4ec:	69220000 	stmdbvs	r2!, {}	; <UNPREDICTABLE>
 4f0:	0b910100 	bleq	fe4408f8 <ball+0xde43ffa8>
 4f4:	000000a9 	andeq	r0, r0, r9, lsr #1
 4f8:	00749102 	rsbseq	r9, r4, r2, lsl #2
 4fc:	000a2300 	andeq	r2, sl, r0, lsl #6
 500:	81010000 	mrshi	r0, (UNDEF: 1)
 504:	0001d006 	andeq	sp, r1, r6
 508:	00003820 	andeq	r3, r0, r0, lsr #16
 50c:	239c0100 	orrscs	r0, ip, #0, 2
 510:	0000002e 	andeq	r0, r0, lr, lsr #32
 514:	9a067801 	bls	19e520 <startup-0x1fe61ae0>
 518:	36200001 	strtcc	r0, [r0], -r1
 51c:	01000000 	mrseq	r0, (UNDEF: 0)
 520:	03051a9c 	movweq	r1, #23196	; 0x5a9c
 524:	66010000 	strvs	r0, [r1], -r0
 528:	00011006 	andeq	r1, r1, r6
 52c:	00008a20 	andeq	r8, r0, r0, lsr #20
 530:	479c0100 	ldrmi	r0, [ip, r0, lsl #2]
 534:	21000005 	tstcs	r0, r5
 538:	006a626f 	rsbeq	r6, sl, pc, ror #4
 53c:	b81a6601 	ldmdalt	sl, {r0, r9, sl, sp, lr}
 540:	02000001 	andeq	r0, r0, #1
 544:	1a007491 	bne	1d790 <startup-0x1ffe2870>
 548:	000001b5 			; <UNDEFINED> instruction: 0x000001b5
 54c:	a0065e01 	andge	r5, r6, r1, lsl #28
 550:	70200000 	eorvc	r0, r0, r0
 554:	01000000 	mrseq	r0, (UNDEF: 0)
 558:	0005b49c 	muleq	r5, ip, r4
 55c:	006f2100 	rsbeq	r2, pc, r0, lsl #2
 560:	b81b5e01 	ldmdalt	fp, {r0, r9, sl, fp, ip, lr}
 564:	02000001 	andeq	r0, r0, #1
 568:	a8146491 	ldmdage	r4, {r0, r4, r7, sl, sp, lr}
 56c:	5e200000 	cdppl	0, 2, cr0, cr0, cr0, {0}
 570:	22000000 	andcs	r0, r0, #0
 574:	5f010069 	svcpl	0x00010069
 578:	0000a90a 	andeq	sl, r0, sl, lsl #18
 57c:	6c910200 	lfmvs	f0, 4, [r1], {0}
 580:	0000ae14 	andeq	sl, r0, r4, lsl lr
 584:	00004c20 	andeq	r4, r0, r0, lsr #24
 588:	00782200 	rsbseq	r2, r8, r0, lsl #4
 58c:	250b6001 	strcs	r6, [fp, #-1]
 590:	02000000 	andeq	r0, r0, #0
 594:	79226b91 	stmdbvc	r2!, {r0, r4, r7, r8, r9, fp, sp, lr}
 598:	0b610100 	bleq	18409a0 <startup-0x1e7bf660>
 59c:	00000025 	andeq	r0, r0, r5, lsr #32
 5a0:	246a9102 	strbtcs	r9, [sl], #-258	; 0xfffffefe
 5a4:	00000070 	andeq	r0, r0, r0, ror r0
 5a8:	a9035a01 	stmdbge	r3, {r0, r9, fp, ip, lr}
 5ac:	25000000 	strcs	r0, [r0, #-0]
 5b0:	00000000 	andeq	r0, r0, r0
 5b4:	0002e21a 	andeq	lr, r2, sl, lsl r2
 5b8:	06560100 	ldrbeq	r0, [r6], -r0, lsl #2
 5bc:	20000030 	andcs	r0, r0, r0, lsr r0
 5c0:	00000070 	andeq	r0, r0, r0, ror r0
 5c4:	06219c01 	strteq	r9, [r1], -r1, lsl #24
 5c8:	6f210000 	svcvs	0x00210000
 5cc:	1a560100 	bne	15809d4 <startup-0x1ea7f62c>
 5d0:	000001b8 			; <UNDEFINED> instruction: 0x000001b8
 5d4:	14649102 	strbtne	r9, [r4], #-258	; 0xfffffefe
 5d8:	20000038 	andcs	r0, r0, r8, lsr r0
 5dc:	0000005e 	andeq	r0, r0, lr, asr r0
 5e0:	01006922 	tsteq	r0, r2, lsr #18
 5e4:	00a90a57 	adceq	r0, r9, r7, asr sl
 5e8:	91020000 	mrsls	r0, (UNDEF: 2)
 5ec:	003e146c 	eorseq	r1, lr, ip, ror #8
 5f0:	004c2000 	subeq	r2, ip, r0
 5f4:	78220000 	stmdavc	r2!, {}	; <UNPREDICTABLE>
 5f8:	0b580100 	bleq	1600a00 <startup-0x1e9ff600>
 5fc:	00000025 	andeq	r0, r0, r5, lsr #32
 600:	226b9102 	rsbcs	r9, fp, #-2147483648	; 0x80000000
 604:	59010079 	stmdbpl	r1, {r0, r3, r4, r5, r6}
 608:	0000250b 	andeq	r2, r0, fp, lsl #10
 60c:	6a910200 	bvs	fe440e14 <ball+0xde4404c4>
 610:	00007024 	andeq	r7, r0, r4, lsr #32
 614:	035a0100 	cmpeq	sl, #0, 2
 618:	000000a9 	andeq	r0, r0, r9, lsr #1
 61c:	00000025 	andeq	r0, r0, r5, lsr #32
 620:	02982000 	addseq	r2, r8, #0
 624:	51010000 	mrspl	r0, (UNDEF: 1)
 628:	00001006 	andeq	r1, r0, r6
 62c:	00002020 	andeq	r2, r0, r0, lsr #32
 630:	639c0100 	orrsvs	r0, ip, #0, 2
 634:	21000006 	tstcs	r0, r6
 638:	5101006f 	tstpl	r1, pc, rrx
 63c:	0001b81f 	andeq	fp, r1, pc, lsl r8
 640:	74910200 	ldrvc	r0, [r1], #512	; 0x200
 644:	0000691b 	andeq	r6, r0, fp, lsl r9
 648:	26510100 	ldrbcs	r0, [r1], -r0, lsl #2
 64c:	000000a9 	andeq	r0, r0, r9, lsr #1
 650:	1b709102 	blne	1c24a60 <startup-0x1e3db5a0>
 654:	00000327 	andeq	r0, r0, r7, lsr #6
 658:	a9325101 	ldmdbge	r2!, {r0, r8, ip, lr}
 65c:	02000000 	andeq	r0, r0, #0
 660:	23006c91 	movwcs	r6, #3217	; 0xc91
 664:	00000252 	andeq	r0, r0, r2, asr r2
 668:	00062501 	andeq	r2, r6, r1, lsl #10
 66c:	0c200000 	stceq	0, cr0, [r0], #-0
 670:	01000000 	mrseq	r0, (UNDEF: 0)
 674:	Address 0x00000674 is out of bounds.


Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
   0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
   4:	030b130e 	movweq	r1, #45838	; 0xb30e
   8:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
   c:	10011117 	andne	r1, r1, r7, lsl r1
  10:	02000017 	andeq	r0, r0, #23
  14:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
  18:	0b3b0b3a 	bleq	ec2d08 <startup-0x1f13d2f8>
  1c:	13490b39 	movtne	r0, #39737	; 0x9b39
  20:	24030000 	strcs	r0, [r3], #-0
  24:	3e0b0b00 	vmlacc.f64	d0, d11, d0
  28:	000e030b 	andeq	r0, lr, fp, lsl #6
  2c:	01130400 	tsteq	r3, r0, lsl #8
  30:	0b0b0e03 	bleq	2c3844 <startup-0x1fd3c7bc>
  34:	0b3b0b3a 	bleq	ec2d24 <startup-0x1f13d2dc>
  38:	13010b39 	movwne	r0, #6969	; 0x1b39
  3c:	0d050000 	stceq	0, cr0, [r5, #-0]
  40:	3a080300 	bcc	200c48 <startup-0x1fdff3b8>
  44:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  48:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
  4c:	0600000b 	streq	r0, [r0], -fp
  50:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
  54:	0b3b0b3a 	bleq	ec2d44 <startup-0x1f13d2bc>
  58:	13490b39 	movtne	r0, #39737	; 0x9b39
  5c:	00000b38 	andeq	r0, r0, r8, lsr fp
  60:	0b002407 	bleq	9084 <startup-0x1fff6f7c>
  64:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
  68:	08000008 	stmdaeq	r0, {r3}
  6c:	13490101 	movtne	r0, #37121	; 0x9101
  70:	00001301 	andeq	r1, r0, r1, lsl #6
  74:	49002109 	stmdbmi	r0, {r0, r3, r8, sp}
  78:	000b2f13 	andeq	r2, fp, r3, lsl pc
  7c:	000f0a00 	andeq	r0, pc, r0, lsl #20
  80:	13490b0b 	movtne	r0, #39691	; 0x9b0b
  84:	340b0000 	strcc	r0, [fp], #-0
  88:	3a0e0300 	bcc	380c90 <startup-0x1fc7f370>
  8c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  90:	3f13490b 	svccc	0x0013490b
  94:	00180219 	andseq	r0, r8, r9, lsl r2
  98:	01150c00 	tsteq	r5, r0, lsl #24
  9c:	13011927 	movwne	r1, #6439	; 0x1927
  a0:	050d0000 	streq	r0, [sp, #-0]
  a4:	00134900 	andseq	r4, r3, r0, lsl #18
  a8:	00340e00 	eorseq	r0, r4, r0, lsl #28
  ac:	0b3a0e03 	bleq	e838c0 <startup-0x1f17c740>
  b0:	0b39053b 	bleq	e415a4 <startup-0x1f1bea5c>
  b4:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
  b8:	2e0f0000 	cdpcs	0, 0, cr0, cr15, cr0, {0}
  bc:	03193f01 	tsteq	r9, #1, 30
  c0:	3b0b3a0e 	blcc	2ce900 <startup-0x1fd31700>
  c4:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
  c8:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
  cc:	96184006 	ldrls	r4, [r8], -r6
  d0:	13011942 	movwne	r1, #6466	; 0x1942
  d4:	34100000 	ldrcc	r0, [r0], #-0
  d8:	3a080300 	bcc	200ce0 <startup-0x1fdff320>
  dc:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
  e0:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
  e4:	11000018 	tstne	r0, r8, lsl r0
  e8:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
  ec:	0b3a0e03 	bleq	e83900 <startup-0x1f17c700>
  f0:	0b39053b 	bleq	e415e4 <startup-0x1f1bea1c>
  f4:	06120111 			; <UNDEFINED> instruction: 0x06120111
  f8:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
  fc:	12000019 	andne	r0, r0, #25
 100:	08030005 	stmdaeq	r3, {r0, r2}
 104:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 108:	13490b39 	movtne	r0, #39737	; 0x9b39
 10c:	00001802 	andeq	r1, r0, r2, lsl #16
 110:	3f012e13 	svccc	0x00012e13
 114:	3a0e0319 	bcc	380d80 <startup-0x1fc7f280>
 118:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 11c:	1119270b 	tstne	r9, fp, lsl #14
 120:	40061201 	andmi	r1, r6, r1, lsl #4
 124:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 128:	00001301 	andeq	r1, r0, r1, lsl #6
 12c:	11010b14 	tstne	r1, r4, lsl fp
 130:	00061201 	andeq	r1, r6, r1, lsl #4
 134:	010b1500 	tsteq	fp, r0, lsl #10
 138:	34160000 	ldrcc	r0, [r6], #-0
 13c:	3a0e0300 	bcc	380d44 <startup-0x1fc7f2bc>
 140:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 144:	0013490b 	andseq	r4, r3, fp, lsl #18
 148:	002e1700 	eoreq	r1, lr, r0, lsl #14
 14c:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 150:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 154:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
 158:	06120111 			; <UNDEFINED> instruction: 0x06120111
 15c:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 160:	18000019 	stmdane	r0, {r0, r3, r4}
 164:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 168:	0b3a0e03 	bleq	e8397c <startup-0x1f17c684>
 16c:	0b39053b 	bleq	e41660 <startup-0x1f1be9a0>
 170:	13491927 	movtne	r1, #39207	; 0x9927
 174:	06120111 			; <UNDEFINED> instruction: 0x06120111
 178:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 17c:	00130119 	andseq	r0, r3, r9, lsl r1
 180:	00051900 	andeq	r1, r5, r0, lsl #18
 184:	0b3a0e03 	bleq	e83998 <startup-0x1f17c668>
 188:	0b39053b 	bleq	e4167c <startup-0x1f1be984>
 18c:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 190:	2e1a0000 	cdpcs	0, 1, cr0, cr10, cr0, {0}
 194:	03193f01 	tsteq	r9, #1, 30
 198:	3b0b3a0e 	blcc	2ce9d8 <startup-0x1fd31628>
 19c:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
 1a0:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 1a4:	96184006 	ldrls	r4, [r8], -r6
 1a8:	13011942 	movwne	r1, #6466	; 0x1942
 1ac:	051b0000 	ldreq	r0, [fp, #-0]
 1b0:	3a0e0300 	bcc	380db8 <startup-0x1fc7f248>
 1b4:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 1b8:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 1bc:	1c000018 	stcne	0, cr0, [r0], {24}
 1c0:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 1c4:	0b3a0e03 	bleq	e839d8 <startup-0x1f17c628>
 1c8:	0b390b3b 	bleq	e42ebc <startup-0x1f1bd144>
 1cc:	13491927 	movtne	r1, #39207	; 0x9927
 1d0:	06120111 			; <UNDEFINED> instruction: 0x06120111
 1d4:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 1d8:	00130119 	andseq	r0, r3, r9, lsl r1
 1dc:	00341d00 	eorseq	r1, r4, r0, lsl #26
 1e0:	0b3a0e03 	bleq	e839f4 <startup-0x1f17c60c>
 1e4:	0b390b3b 	bleq	e42ed8 <startup-0x1f1bd128>
 1e8:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 1ec:	2e1e0000 	cdpcs	0, 1, cr0, cr14, cr0, {0}
 1f0:	03193f00 	tsteq	r9, #0, 30
 1f4:	3b0b3a0e 	blcc	2cea34 <startup-0x1fd315cc>
 1f8:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
 1fc:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 200:	96184006 	ldrls	r4, [r8], -r6
 204:	00001942 	andeq	r1, r0, r2, asr #18
 208:	3f012e1f 	svccc	0x00012e1f
 20c:	3a0e0319 	bcc	380e78 <startup-0x1fc7f188>
 210:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 214:	1201110b 	andne	r1, r1, #-1073741822	; 0xc0000002
 218:	96184006 	ldrls	r4, [r8], -r6
 21c:	13011942 	movwne	r1, #6466	; 0x1942
 220:	2e200000 	cdpcs	0, 2, cr0, cr0, cr0, {0}
 224:	03193f01 	tsteq	r9, #1, 30
 228:	3b0b3a0e 	blcc	2cea68 <startup-0x1fd31598>
 22c:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
 230:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 234:	97184006 	ldrls	r4, [r8, -r6]
 238:	13011942 	movwne	r1, #6466	; 0x1942
 23c:	05210000 	streq	r0, [r1, #-0]!
 240:	3a080300 	bcc	200e48 <startup-0x1fdff1b8>
 244:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 248:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 24c:	22000018 	andcs	r0, r0, #24
 250:	08030034 	stmdaeq	r3, {r2, r4, r5}
 254:	0b3b0b3a 	bleq	ec2f44 <startup-0x1f13d0bc>
 258:	13490b39 	movtne	r0, #39737	; 0x9b39
 25c:	00001802 	andeq	r1, r0, r2, lsl #16
 260:	3f002e23 	svccc	0x00002e23
 264:	3a0e0319 	bcc	380ed0 <startup-0x1fc7f130>
 268:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 26c:	1119270b 	tstne	r9, fp, lsl #14
 270:	40061201 	andmi	r1, r6, r1, lsl #4
 274:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 278:	2e240000 	cdpcs	0, 2, cr0, cr4, cr0, {0}
 27c:	03193f01 	tsteq	r9, #1, 30
 280:	3b0b3a0e 	blcc	2ceac0 <startup-0x1fd31540>
 284:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 288:	00193c13 	andseq	r3, r9, r3, lsl ip
 28c:	00182500 	andseq	r2, r8, r0, lsl #10
 290:	Address 0x00000290 is out of bounds.


Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	00000024 	andeq	r0, r0, r4, lsr #32
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	20000010 	andcs	r0, r0, r0, lsl r0
  14:	000007f4 	strdeq	r0, [r0], -r4
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	20000010 	andcs	r0, r0, r0, lsl r0
   4:	20000804 	andcs	r0, r0, r4, lsl #16
   8:	20000000 	andcs	r0, r0, r0
   c:	2000000c 	andcs	r0, r0, ip
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
   0:	00000419 	andeq	r0, r0, r9, lsl r4
   4:	005d0003 	subseq	r0, sp, r3
   8:	01020000 	mrseq	r0, (UNDEF: 2)
   c:	000d0efb 	strdeq	r0, [sp], -fp
  10:	01010101 	tsteq	r1, r1, lsl #2
  14:	01000000 	mrseq	r0, (UNDEF: 0)
  18:	43010000 	movwmi	r0, #4096	; 0x1000
  1c:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
  20:	2f737265 	svccs	0x00737265
  24:	6c726163 	ldfvse	f6, [r2], #-396	; 0xfffffe74
  28:	6e4f2f73 	mcrvs	15, 2, r2, cr15, cr3, {3}
  2c:	69724465 	ldmdbvs	r2!, {r0, r2, r5, r6, sl, lr}^
  30:	432f6576 			; <UNDEFINED> instruction: 0x432f6576
  34:	6d6c6168 	stfvse	f6, [ip, #-416]!	; 0xfffffe60
  38:	2f737265 	svccs	0x00737265
  3c:	30544144 	subscc	r4, r4, r4, asr #2
  40:	4c2f3731 	stcmi	7, cr3, [pc], #-196	; ffffff84 <ball+0xdffff634>
  44:	726f6261 	rsbvc	r6, pc, #268435462	; 0x10000006
  48:	6f697461 	svcvs	0x00697461
  4c:	612f326e 			; <UNDEFINED> instruction: 0x612f326e
  50:	706f7475 	rsbvc	r7, pc, r5, ror r4	; <UNPREDICTABLE>
  54:	00676e6f 	rsbeq	r6, r7, pc, ror #28
  58:	61747300 	cmnvs	r4, r0, lsl #6
  5c:	70757472 	rsbsvc	r7, r5, r2, ror r4
  60:	0100632e 	tsteq	r0, lr, lsr #6
  64:	05000000 	streq	r0, [r0, #-0]
  68:	02050001 	andeq	r0, r5, #1
  6c:	20000000 	andcs	r0, r0, r0
  70:	13012503 	movwne	r2, #5379	; 0x1503
  74:	212f2121 			; <UNDEFINED> instruction: 0x212f2121
  78:	01000302 	tsteq	r0, r2, lsl #6
  7c:	003a0501 	eorseq	r0, sl, r1, lsl #10
  80:	00100205 	andseq	r0, r0, r5, lsl #4
  84:	d0032000 	andle	r2, r3, r0
  88:	0a050100 	beq	140490 <startup-0x1febfb70>
  8c:	01053d67 	tsteq	r5, r7, ror #26
  90:	4c1d053d 	cfldr32mi	mvfx0, [sp], {61}	; 0x3d
  94:	054b0a05 	strbeq	r0, [fp, #-2565]	; 0xfffff5fb
  98:	11052e02 	tstne	r5, r2, lsl #28
  9c:	03040200 	movweq	r0, #16896	; 0x4200
  a0:	00190521 	andseq	r0, r9, r1, lsr #10
  a4:	2e030402 	cdpcs	4, 0, cr0, cr3, cr2, {0}
  a8:	02001c05 	andeq	r1, r0, #1280	; 0x500
  ac:	05200304 	streq	r0, [r0, #-772]!	; 0xfffffcfc
  b0:	04020028 	streq	r0, [r2], #-40	; 0xffffffd8
  b4:	0b052e03 	bleq	14b8c8 <startup-0x1feb4738>
  b8:	03040200 	movweq	r0, #16896	; 0x4200
  bc:	00110566 	andseq	r0, r1, r6, ror #10
  c0:	4b030402 	blmi	c10d0 <startup-0x1ff3ef30>
  c4:	02001905 	andeq	r1, r0, #81920	; 0x14000
  c8:	052e0304 	streq	r0, [lr, #-772]!	; 0xfffffcfc
  cc:	0402001c 	streq	r0, [r2], #-28	; 0xffffffe4
  d0:	28052003 	stmdacs	r5, {r0, r1, sp}
  d4:	03040200 	movweq	r0, #16896	; 0x4200
  d8:	000b052e 	andeq	r0, fp, lr, lsr #10
  dc:	66030402 	strvs	r0, [r3], -r2, lsl #8
  e0:	02000305 	andeq	r0, r0, #335544320	; 0x14000000
  e4:	054b0304 	strbeq	r0, [fp, #-772]	; 0xfffffcfc
  e8:	04020022 	streq	r0, [r2], #-34	; 0xffffffde
  ec:	02057f03 	andeq	r7, r5, #3, 30
  f0:	01040200 	mrseq	r0, R12_usr
  f4:	4101053c 	tstmi	r1, ip, lsr r5
  f8:	055a1e05 	ldrbeq	r1, [sl, #-3589]	; 0xfffff1fb
  fc:	02054b0a 	andeq	r4, r5, #10240	; 0x2800
 100:	0011052e 	andseq	r0, r1, lr, lsr #10
 104:	21030402 	tstcs	r3, r2, lsl #8
 108:	02001905 	andeq	r1, r0, #81920	; 0x14000
 10c:	052e0304 	streq	r0, [lr, #-772]!	; 0xfffffcfc
 110:	0402001c 	streq	r0, [r2], #-28	; 0xffffffe4
 114:	28052003 	stmdacs	r5, {r0, r1, sp}
 118:	03040200 	movweq	r0, #16896	; 0x4200
 11c:	000b052e 	andeq	r0, fp, lr, lsr #10
 120:	66030402 	strvs	r0, [r3], -r2, lsl #8
 124:	02001105 	andeq	r1, r0, #1073741825	; 0x40000001
 128:	054b0304 	strbeq	r0, [fp, #-772]	; 0xfffffcfc
 12c:	04020019 	streq	r0, [r2], #-25	; 0xffffffe7
 130:	1c052e03 	stcne	14, cr2, [r5], {3}
 134:	03040200 	movweq	r0, #16896	; 0x4200
 138:	00280520 	eoreq	r0, r8, r0, lsr #10
 13c:	2e030402 	cdpcs	4, 0, cr0, cr3, cr2, {0}
 140:	02000b05 	andeq	r0, r0, #5120	; 0x1400
 144:	05660304 	strbeq	r0, [r6, #-772]!	; 0xfffffcfc
 148:	04020003 	streq	r0, [r2], #-3
 14c:	22054b03 	andcs	r4, r5, #3072	; 0xc00
 150:	03040200 	movweq	r0, #16896	; 0x4200
 154:	0002057f 	andeq	r0, r2, pc, ror r5
 158:	3c010402 	cfstrscc	mvf0, [r1], {2}
 15c:	05410105 	strbeq	r0, [r1, #-261]	; 0xfffffefb
 160:	02055a1f 	andeq	r5, r5, #126976	; 0x1f000
 164:	4b11054b 	blmi	441698 <startup-0x1fbbe968>
 168:	052e1d05 	streq	r1, [lr, #-3333]!	; 0xfffff2fb
 16c:	0c052e18 	stceq	14, cr2, [r5], {24}
 170:	2f110520 	svccs	0x00110520
 174:	052e1d05 	streq	r1, [lr, #-3333]!	; 0xfffff2fb
 178:	0c052e18 	stceq	14, cr2, [r5], {24}
 17c:	30090520 	andcc	r0, r9, r0, lsr #10
 180:	052e0505 	streq	r0, [lr, #-1285]!	; 0xfffffafb
 184:	19052f12 	stmdbne	r5, {r1, r4, r8, r9, sl, fp, sp}
 188:	200d052e 	andcs	r0, sp, lr, lsr #10
 18c:	053d1005 	ldreq	r1, [sp, #-5]!
 190:	12052e0c 	andne	r2, r5, #12, 28	; 0xc0
 194:	2e19052f 	cfmul64cs	mvdx0, mvdx9, mvdx15
 198:	05200d05 	streq	r0, [r0, #-3333]!	; 0xfffff2fb
 19c:	0c053d10 	stceq	13, cr3, [r5], {16}
 1a0:	2f12052e 	svccs	0x0012052e
 1a4:	052e1905 	streq	r1, [lr, #-2309]!	; 0xfffff6fb
 1a8:	1005200d 	andne	r2, r5, sp
 1ac:	2e0c053d 	mcrcs	5, 0, r0, cr12, cr13, {1}
 1b0:	052f1205 	streq	r1, [pc, #-517]!	; ffffffb3 <ball+0xdffff663>
 1b4:	0d052e19 	stceq	14, cr2, [r5, #-100]	; 0xffffff9c
 1b8:	31020520 	tstcc	r2, r0, lsr #10
 1bc:	054b0105 	strbeq	r0, [fp, #-261]	; 0xfffffefb
 1c0:	02054c19 	andeq	r4, r5, #6400	; 0x1900
 1c4:	200c052f 	andcs	r0, ip, pc, lsr #10
 1c8:	052f0205 	streq	r0, [pc, #-517]!	; ffffffcb <ball+0xdffff67b>
 1cc:	0205200c 	andeq	r2, r5, #12
 1d0:	200b052f 	andcs	r0, fp, pc, lsr #10
 1d4:	052f0205 	streq	r0, [pc, #-517]!	; ffffffd7 <ball+0xdffff687>
 1d8:	0705200c 	streq	r2, [r5, -ip]
 1dc:	2102052f 	tstcs	r2, pc, lsr #10
 1e0:	05200c05 	streq	r0, [r0, #-3077]!	; 0xfffff3fb
 1e4:	19052f01 	stmdbne	r5, {r0, r8, r9, sl, fp, sp}
 1e8:	2f020592 	svccs	0x00020592
 1ec:	05200c05 	streq	r0, [r0, #-3077]!	; 0xfffff3fb
 1f0:	0c052f02 	stceq	15, cr2, [r5], {2}
 1f4:	2f020520 	svccs	0x00020520
 1f8:	05200b05 	streq	r0, [r0, #-2821]!	; 0xfffff4fb
 1fc:	0c052f02 	stceq	15, cr2, [r5], {2}
 200:	2f070520 	svccs	0x00070520
 204:	05210205 	streq	r0, [r1, #-517]!	; 0xfffffdfb
 208:	0105200c 	tsteq	r5, ip
 20c:	a023052f 	eorge	r0, r3, pc, lsr #10
 210:	054c0605 	strbeq	r0, [ip, #-1541]	; 0xfffff9fb
 214:	07058305 	streq	r8, [r5, -r5, lsl #6]
 218:	210b053f 	tstcs	fp, pc, lsr r5
 21c:	052e0305 	streq	r0, [lr, #-773]!	; 0xfffffcfb
 220:	04020004 	streq	r0, [r2], #-4
 224:	1a052103 	bne	148638 <startup-0x1feb79c8>
 228:	03040200 	movweq	r0, #16896	; 0x4200
 22c:	0003052d 	andeq	r0, r3, sp, lsr #10
 230:	3c010402 	cfstrscc	mvf0, [r1], {2}
 234:	053f0505 	ldreq	r0, [pc, #-1285]!	; fffffd37 <ball+0xdffff3e7>
 238:	01053807 	tsteq	r5, r7, lsl #16
 23c:	5a230542 	bpl	8c174c <startup-0x1f73e8b4>
 240:	054c0605 	strbeq	r0, [ip, #-1541]	; 0xfffff9fb
 244:	07058305 	streq	r8, [r5, -r5, lsl #6]
 248:	2103053f 	tstcs	r3, pc, lsr r5
 24c:	05590505 	ldrbeq	r0, [r9, #-1285]	; 0xfffffafb
 250:	01053a07 	tsteq	r5, r7, lsl #20
 254:	5a260540 	bpl	98175c <startup-0x1f67e8a4>
 258:	05670e05 	strbeq	r0, [r7, #-3589]!	; 0xfffff1fb
 25c:	0405200a 	streq	r2, [r5], #-10
 260:	6712054b 	ldrvs	r0, [r2, -fp, asr #10]
 264:	05660405 	strbeq	r0, [r6, #-1029]!	; 0xfffffbfb
 268:	10057502 	andne	r7, r5, r2, lsl #10
 26c:	3d010520 	cfstr32cc	mvfx0, [r1, #-128]	; 0xffffff80
 270:	05682805 	strbeq	r2, [r8, #-2053]!	; 0xfffff7fb
 274:	0a05670e 	beq	159eb4 <startup-0x1fea614c>
 278:	4b040520 	blmi	101700 <startup-0x1fefe900>
 27c:	bb020567 	bllt	81820 <startup-0x1ff7e7e0>
 280:	05201005 	streq	r1, [r0, #-5]!
 284:	24053d01 	strcs	r3, [r5], #-3329	; 0xfffff2ff
 288:	4b020576 	blmi	81868 <startup-0x1ff7e798>
 28c:	10030105 	andne	r0, r3, r5, lsl #2
 290:	04052008 	streq	r2, [r5], #-8
 294:	3d207203 	sfmcc	f7, 4, [r0, #-12]!
 298:	223d3d22 	eorscs	r3, sp, #2176	; 0x880
 29c:	3d223d3d 	stccc	13, cr3, [r2, #-244]!	; 0xffffff0c
 2a0:	05220105 	streq	r0, [r2, #-261]!	; 0xfffffefb
 2a4:	02054c1f 	andeq	r4, r5, #7936	; 0x1f00
 2a8:	0e053d2f 	cdpeq	13, 0, cr3, cr5, cr15, {1}
 2ac:	2f020520 	svccs	0x00020520
 2b0:	03053d3d 	movweq	r3, #23869	; 0x5d3d
 2b4:	3d2f3d30 	stccc	13, cr3, [pc, #-192]!	; 1fc <startup-0x1ffffe04>
 2b8:	052f0705 	streq	r0, [pc, #-1797]!	; fffffbbb <ball+0xdffff26b>
 2bc:	05053c21 	streq	r3, [r5, #-3105]	; 0xfffff3df
 2c0:	2a030520 	bcs	c1748 <startup-0x1ff3e8b8>
 2c4:	05250405 	streq	r0, [r5, #-1029]!	; 0xfffffbfb
 2c8:	053d2302 	ldreq	r2, [sp, #-770]!	; 0xfffffcfe
 2cc:	0105200e 	tsteq	r5, lr
 2d0:	ae2a052f 	cfsh64ge	mvdx0, mvdx10, #31
 2d4:	3d680205 	sfmcc	f0, 2, [r8, #-20]!	; 0xffffffec
 2d8:	05200e05 	streq	r0, [r0, #-3589]!	; 0xfffff1fb
 2dc:	593d2f02 	ldmdbpl	sp!, {r1, r8, r9, sl, fp, sp}
 2e0:	11053d2f 	tstne	r5, pc, lsr #26
 2e4:	200f052f 	andcs	r0, pc, pc, lsr #10
 2e8:	3d4b0205 	sfmcc	f0, 2, [fp, #-20]	; 0xffffffec
 2ec:	05200e05 	streq	r0, [r0, #-3589]!	; 0xfffff1fb
 2f0:	04053010 	streq	r3, [r5], #-16
 2f4:	2103054a 	tstcs	r3, sl, asr #10
 2f8:	3d17053d 	cfldr32cc	mvfx0, [r7, #-244]	; 0xffffff0c
 2fc:	054a0b05 	strbeq	r0, [sl, #-2821]	; 0xfffff4fb
 300:	053d2103 	ldreq	r2, [sp, #-259]!	; 0xfffffefd
 304:	01053009 	tsteq	r5, r9
 308:	bc37053d 	cfldr32lt	mvfx0, [r7], #-244	; 0xffffff0c
 30c:	05910205 	ldreq	r0, [r1, #517]	; 0x205
 310:	02052011 	andeq	r2, r5, #17
 314:	3d2f593d 			; <UNDEFINED> instruction: 0x3d2f593d
 318:	3e10052f 	cfmul64cc	mvdx0, mvdx0, mvdx15
 31c:	054a0405 	strbeq	r0, [sl, #-1029]	; 0xfffffbfb
 320:	053d2103 	ldreq	r2, [sp, #-259]!	; 0xfffffefd
 324:	0b053d17 	bleq	14f788 <startup-0x1feb0878>
 328:	2103054a 	tstcs	r3, sl, asr #10
 32c:	3102053d 	tstcc	r2, sp, lsr r5
 330:	05201105 	streq	r1, [r0, #-261]!	; 0xfffffefb
 334:	053d2f02 	ldreq	r2, [sp, #-3842]!	; 0xfffff0fe
 338:	41053d01 	tstmi	r5, r1, lsl #26
 33c:	91020568 	tstls	r2, r8, ror #10
 340:	053d593d 	ldreq	r5, [sp, #-2365]!	; 0xfffff6c3
 344:	3b058301 	blcc	160f50 <startup-0x1fe9f0b0>
 348:	9102054c 	tstls	r2, ip, asr #10
 34c:	3d3d593d 			; <UNDEFINED> instruction: 0x3d3d593d
 350:	05830105 	streq	r0, [r3, #261]	; 0x105
 354:	02054c2f 	andeq	r4, r5, #12032	; 0x2f00
 358:	59090567 	stmdbpl	r9, {r0, r1, r2, r5, r6, r8, sl}
 35c:	05670105 	strbeq	r0, [r7, #-261]!	; 0xfffffefb
 360:	02054c1f 	andeq	r4, r5, #7936	; 0x1f00
 364:	3d3d3d2f 	ldccc	13, cr3, [sp, #-188]!	; 0xffffff44
 368:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
 36c:	4b4b4b3d 	blmi	12d3068 <startup-0x1ed2cf98>
 370:	01054b4b 	tsteq	r5, fp, asr #22
 374:	3e21053d 	mcrcc	5, 1, r0, cr1, cr13, {1}
 378:	053d0a05 	ldreq	r0, [sp, #-2565]!	; 0xfffff5fb
 37c:	01052e02 	tsteq	r5, r2, lsl #28
 380:	4c2f0527 	cfstr32mi	mvfx0, [pc], #-156	; 2ec <startup-0x1ffffd14>
 384:	05e80405 	strbeq	r0, [r8, #1029]!	; 0x405
 388:	0402000d 	streq	r0, [r2], #-13
 38c:	18055801 	stmdane	r5, {r0, fp, ip, lr}
 390:	02040200 	andeq	r0, r4, #0, 4
 394:	00250558 	eoreq	r0, r5, r8, asr r5
 398:	58030402 	stmdapl	r3, {r1, sl}
 39c:	055c0c05 	ldrbeq	r0, [ip, #-3077]	; 0xfffff3fb
 3a0:	11053c08 	tstne	r5, r8, lsl #24
 3a4:	3c15055a 	cfldr32cc	mvfx0, [r5], {90}	; 0x5a
 3a8:	05900b05 	ldreq	r0, [r0, #2821]	; 0xb05
 3ac:	05053c07 	streq	r3, [r5, #-3079]	; 0xfffff3f9
 3b0:	4b08053e 	blmi	2018b0 <startup-0x1fdfe750>
 3b4:	055b0505 	ldrbeq	r0, [fp, #-1285]	; 0xfffffafb
 3b8:	0c054b0e 			; <UNDEFINED> instruction: 0x0c054b0e
 3bc:	760e054b 	strvc	r0, [lr], -fp, asr #10
 3c0:	054b0c05 	strbeq	r0, [fp, #-3077]	; 0xfffff3fb
 3c4:	25056902 	strcs	r6, [r5, #-2306]	; 0xfffff6fe
 3c8:	660205c9 	strvs	r0, [r2], -r9, asr #11
 3cc:	05750905 	ldrbeq	r0, [r5, #-2309]!	; 0xfffff6fb
 3d0:	05059102 	streq	r9, [r5, #-258]	; 0xfffffefe
 3d4:	4b0805ae 	blmi	201a94 <startup-0x1fdfe56c>
 3d8:	930205a0 	movwls	r0, #9632	; 0x25a0
 3dc:	62030a05 	andvs	r0, r3, #20480	; 0x5000
 3e0:	030105ac 	movweq	r0, #5548	; 0x15ac
 3e4:	1105201f 	tstne	r5, pc, lsl r0
 3e8:	2f0e0568 	svccs	0x000e0568
 3ec:	67010559 	smlsdvs	r1, r9, r5, r0
 3f0:	05740d03 	ldrbeq	r0, [r4, #-3331]!	; 0xfffff2fd
 3f4:	02053d0a 	andeq	r3, r5, #640	; 0x280
 3f8:	03052f2f 	movweq	r2, #24367	; 0x5f2f
 3fc:	2e020533 	mcrcs	5, 0, r0, cr2, cr3, {1}
 400:	02000405 	andeq	r0, r0, #83886080	; 0x5000000
 404:	054c0104 	strbeq	r0, [ip, #-260]	; 0xfffffefc
 408:	04020003 	streq	r0, [r2], #-3
 40c:	02002e01 	andeq	r2, r0, #1, 28
 410:	003d0104 	eorseq	r0, sp, r4, lsl #2
 414:	3b010402 	blcc	41424 <startup-0x1ffbebdc>
 418:	01000302 	tsteq	r0, r2, lsl #6
 41c:	Address 0x0000041c is out of bounds.


Disassembly of section .debug_str:

00000000 <.debug_str>:
   0:	4f454750 	svcmi	0x00454750
   4:	5254454d 	subspl	r4, r4, #322961408	; 0x13400000
   8:	65640059 	strbvs	r0, [r4, #-89]!	; 0xffffffa7
   c:	5f79616c 	svcpl	0x0079616c
  10:	5f303035 	svcpl	0x00303035
  14:	6d00736e 	stcvs	3, cr7, [r0, #-440]	; 0xfffffe48
  18:	0065766f 	rsbeq	r7, r5, pc, ror #12
  1c:	656c6573 	strbvs	r6, [ip, #-1395]!	; 0xfffffa8d
  20:	635f7463 	cmpvs	pc, #1660944384	; 0x63000000
  24:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
  28:	656c6c6f 	strbvs	r6, [ip, #-3183]!	; 0xfffff391
  2c:	65640072 	strbvs	r0, [r4, #-114]!	; 0xffffff8e
  30:	5f79616c 	svcpl	0x0079616c
  34:	5f303532 	svcpl	0x00303532
  38:	7200736e 	andvc	r7, r0, #-1207959551	; 0xb8000001
  3c:	72757465 	rsbsvc	r7, r5, #1694498816	; 0x65000000
  40:	61765f6e 	cmnvs	r6, lr, ror #30
  44:	0065756c 	rsbeq	r7, r5, ip, ror #10
  48:	78726964 	ldmdavc	r2!, {r2, r5, r6, r8, fp, sp, lr}^
  4c:	72696400 	rsbvc	r6, r9, #0, 8
  50:	72670079 	rsbvc	r0, r7, #121	; 0x79
  54:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
  58:	65725f63 	ldrbvs	r5, [r2, #-3939]!	; 0xfffff09d
  5c:	645f6461 	ldrbvs	r6, [pc], #-1121	; 64 <startup-0x1fffff9c>
  60:	00617461 	rsbeq	r7, r1, r1, ror #8
  64:	65676170 	strbvs	r6, [r7, #-368]!	; 0xfffffe90
  68:	65707300 	ldrbvs	r7, [r0, #-768]!	; 0xfffffd00
  6c:	00786465 	rsbseq	r6, r8, r5, ror #8
  70:	65786970 	ldrbvs	r6, [r8, #-2416]!	; 0xfffff690
  74:	5074006c 	rsbspl	r0, r4, ip, rrx
  78:	746e696f 	strbtvc	r6, [lr], #-2415	; 0xfffff691
  7c:	494f5000 	stmdbmi	pc, {ip, lr}^	; <UNPREDICTABLE>
  80:	7800544e 	stmdavc	r0, {r1, r2, r3, r6, sl, ip, lr}
  84:	7463615f 	strbtvc	r6, [r3], #-351	; 0xfffffea1
  88:	006c6175 	rsbeq	r6, ip, r5, ror r1
  8c:	69736e75 	ldmdbvs	r3!, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}^
  90:	64656e67 	strbtvs	r6, [r5], #-3687	; 0xfffff199
  94:	61686320 	cmnvs	r8, r0, lsr #6
  98:	65730072 	ldrbvs	r0, [r3, #-114]!	; 0xffffff8e
  9c:	70735f74 	rsbsvc	r5, r3, r4, ror pc
  a0:	00646565 	rsbeq	r6, r4, r5, ror #10
  a4:	78736f70 	ldmdavc	r3!, {r4, r5, r6, r8, r9, sl, fp, sp, lr}^
  a8:	736f7000 	cmnvc	pc, #0
  ac:	61620079 	smcvs	8201	; 0x2009
  b0:	675f6c6c 	ldrbvs	r6, [pc, -ip, ror #24]
  b4:	656d6f65 	strbvs	r6, [sp, #-3941]!	; 0xfffff09b
  b8:	00797274 	rsbseq	r7, r9, r4, ror r2
  bc:	70617267 	rsbvc	r7, r1, r7, ror #4
  c0:	5f636968 	svcpl	0x00636968
  c4:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
  c8:	65740065 	ldrbvs	r0, [r4, #-101]!	; 0xffffff9b
  cc:	6100706d 	tstvs	r0, sp, rrx
  d0:	695f7070 	ldmdbvs	pc, {r4, r5, r6, ip, sp, lr}^	; <UNPREDICTABLE>
  d4:	0074696e 	rsbseq	r6, r4, lr, ror #18
  d8:	555c3a43 	ldrbpl	r3, [ip, #-2627]	; 0xfffff5bd
  dc:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
  e0:	7261635c 	rsbvc	r6, r1, #92, 6	; 0x70000001
  e4:	4f5c736c 	svcmi	0x005c736c
  e8:	7244656e 	subvc	r6, r4, #461373440	; 0x1b800000
  ec:	5c657669 	stclpl	6, cr7, [r5], #-420	; 0xfffffe5c
  f0:	6c616843 	stclvs	8, cr6, [r1], #-268	; 0xfffffef4
  f4:	7372656d 	cmnvc	r2, #457179136	; 0x1b400000
  f8:	5441445c 	strbpl	r4, [r1], #-1116	; 0xfffffba4
  fc:	5c373130 	ldfpls	f3, [r7], #-192	; 0xffffff40
 100:	6f62614c 	svcvs	0x0062614c
 104:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
 108:	5c326e6f 	ldcpl	14, cr6, [r2], #-444	; 0xfffffe44
 10c:	6f747561 	svcvs	0x00747561
 110:	676e6f70 			; <UNDEFINED> instruction: 0x676e6f70
 114:	69616d00 	stmdbvs	r1!, {r8, sl, fp, sp, lr}^
 118:	7267006e 	rsbvc	r0, r7, #110	; 0x6e
 11c:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 120:	6e695f63 	cdpvs	15, 6, cr5, cr9, cr3, {3}
 124:	61697469 	cmnvs	r9, r9, ror #8
 128:	657a696c 	ldrbvs	r6, [sl, #-2412]!	; 0xfffff694
 12c:	61726700 	cmnvs	r2, r0, lsl #14
 130:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 134:	7274635f 	rsbsvc	r6, r4, #2080374785	; 0x7c000001
 138:	69625f6c 	stmdbvs	r2!, {r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
 13c:	6c635f74 	stclvs	15, cr5, [r3], #-464	; 0xfffffe30
 140:	00726165 	rsbseq	r6, r2, r5, ror #2
 144:	70617267 	rsbvc	r7, r1, r7, ror #4
 148:	5f636968 	svcpl	0x00636968
 14c:	6c727463 	cfldrdvs	mvd7, [r2], #-396	; 0xfffffe74
 150:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
 154:	7465735f 	strbtvc	r7, [r5], #-863	; 0xfffffca1
 158:	736e7500 	cmnvc	lr, #0, 10
 15c:	656e6769 	strbvs	r6, [lr, #-1897]!	; 0xfffff897
 160:	6e692064 	cdpvs	0, 6, cr2, cr9, cr4, {3}
 164:	3a430074 	bcc	10c033c <startup-0x1ef3fcc4>
 168:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0xfffffad1
 16c:	632f7372 			; <UNDEFINED> instruction: 0x632f7372
 170:	736c7261 	cmnvc	ip, #268435462	; 0x10000006
 174:	656e4f2f 	strbvs	r4, [lr, #-3887]!	; 0xfffff0d1
 178:	76697244 	strbtvc	r7, [r9], -r4, asr #4
 17c:	68432f65 	stmdavs	r3, {r0, r2, r5, r6, r8, r9, sl, fp, sp}^
 180:	656d6c61 	strbvs	r6, [sp, #-3169]!	; 0xfffff39f
 184:	442f7372 	strtmi	r7, [pc], #-882	; 18c <startup-0x1ffffe74>
 188:	31305441 	teqcc	r0, r1, asr #8
 18c:	614c2f37 	cmpvs	ip, r7, lsr pc
 190:	61726f62 	cmnvs	r2, r2, ror #30
 194:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
 198:	75612f32 	strbvc	r2, [r1, #-3890]!	; 0xfffff0ce
 19c:	6f706f74 	svcvs	0x00706f74
 1a0:	732f676e 			; <UNDEFINED> instruction: 0x732f676e
 1a4:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
 1a8:	632e7075 			; <UNDEFINED> instruction: 0x632e7075
 1ac:	64646100 	strbtvs	r6, [r4], #-256	; 0xffffff00
 1b0:	73736572 	cmnvc	r3, #478150656	; 0x1c800000
 1b4:	656c6300 	strbvs	r6, [ip, #-768]!	; 0xfffffd00
 1b8:	6f5f7261 	svcvs	0x005f7261
 1bc:	63656a62 	cmnvs	r5, #401408	; 0x62000
 1c0:	69750074 	ldmdbvs	r5!, {r2, r4, r5, r6}^
 1c4:	5f38746e 	svcpl	0x0038746e
 1c8:	69730074 	ldmdbvs	r3!, {r2, r4, r5, r6}^
 1cc:	0078657a 	rsbseq	r6, r8, sl, ror r5
 1d0:	657a6973 	ldrbvs	r6, [sl, #-2419]!	; 0xfffff68d
 1d4:	4e470079 	mcrmi	0, 2, r0, cr7, cr9, {3}
 1d8:	39432055 	stmdbcc	r3, {r0, r2, r4, r6, sp}^
 1dc:	2e392039 	mrccs	0, 1, r2, cr9, cr9, {1}
 1e0:	20312e32 	eorscs	r2, r1, r2, lsr lr
 1e4:	39313032 	ldmdbcc	r1!, {r1, r4, r5, ip, sp}
 1e8:	35323031 	ldrcc	r3, [r2, #-49]!	; 0xffffffcf
 1ec:	65722820 	ldrbvs	r2, [r2, #-2080]!	; 0xfffff7e0
 1f0:	7361656c 	cmnvc	r1, #108, 10	; 0x1b000000
 1f4:	5b202965 	blpl	80a790 <startup-0x1f7f5870>
 1f8:	2f4d5241 	svccs	0x004d5241
 1fc:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
 200:	72622d39 	rsbvc	r2, r2, #3648	; 0xe40
 204:	68636e61 	stmdavs	r3!, {r0, r5, r6, r9, sl, fp, sp, lr}^
 208:	76657220 	strbtvc	r7, [r5], -r0, lsr #4
 20c:	6f697369 	svcvs	0x00697369
 210:	3732206e 	ldrcc	r2, [r2, -lr, rrx]!
 214:	39393537 	ldmdbcc	r9!, {r0, r1, r2, r4, r5, r8, sl, ip, sp}
 218:	6d2d205d 	stcvs	0, cr2, [sp, #-372]!	; 0xfffffe8c
 21c:	6d756874 	ldclvs	8, cr6, [r5, #-464]!	; 0xfffffe30
 220:	6d2d2062 	stcvs	0, cr2, [sp, #-392]!	; 0xfffffe78
 224:	616f6c66 	cmnvs	pc, r6, ror #24
 228:	62612d74 	rsbvs	r2, r1, #116, 26	; 0x1d00
 22c:	6f733d69 	svcvs	0x00733d69
 230:	2d207466 	cfstrscs	mvf7, [r0, #-408]!	; 0xfffffe68
 234:	6372616d 	cmnvs	r2, #1073741851	; 0x4000001b
 238:	72613d68 	rsbvc	r3, r1, #104, 26	; 0x1a00
 23c:	2d36766d 	ldccs	6, cr7, [r6, #-436]!	; 0xfffffe4c
 240:	672d206d 	strvs	r2, [sp, -sp, rrx]!
 244:	304f2d20 	subcc	r2, pc, r0, lsr #26
 248:	74732d20 	ldrbtvc	r2, [r3], #-3360	; 0xfffff2e0
 24c:	39633d64 	stmdbcc	r3!, {r2, r5, r6, r8, sl, fp, ip, sp}^
 250:	74730039 	ldrbtvc	r0, [r3], #-57	; 0xffffffc7
 254:	75747261 	ldrbvc	r7, [r4, #-609]!	; 0xfffffd9f
 258:	61620070 	smcvs	8192	; 0x2000
 25c:	64006c6c 	strvs	r6, [r0], #-3180	; 0xfffff394
 260:	00776172 	rsbseq	r6, r7, r2, ror r1
 264:	6b73616d 	blvs	1cd8820 <startup-0x1e3277e0>
 268:	646e6900 	strbtvs	r6, [lr], #-2304	; 0xfffff700
 26c:	74007865 	strvc	r7, [r0], #-2149	; 0xfffff79b
 270:	6d6f6547 	cfstr64vs	mvdx6, [pc, #-284]!	; 15c <startup-0x1ffffea4>
 274:	79727465 	ldmdbvc	r2!, {r0, r2, r5, r6, sl, ip, sp, lr}^
 278:	6c656400 	cfstrdvs	mvd6, [r5], #-0
 27c:	6d5f7961 	vldrvs.16	s15, [pc, #-194]	; 1c2 <startup-0x1ffffe3e>	; <UNPREDICTABLE>
 280:	696c6c69 	stmdbvs	ip!, {r0, r3, r5, r6, sl, fp, sp, lr}^
 284:	61726700 	cmnvs	r2, r0, lsl #14
 288:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 28c:	6972775f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
 290:	645f6574 	ldrbvs	r6, [pc], #-1396	; 298 <startup-0x1ffffd68>
 294:	00617461 	rsbeq	r7, r1, r1, ror #8
 298:	5f746573 	svcpl	0x00746573
 29c:	656a626f 	strbvs	r6, [sl, #-623]!	; 0xfffffd91
 2a0:	735f7463 	cmpvc	pc, #1660944384	; 0x63000000
 2a4:	64656570 	strbtvs	r6, [r5], #-1392	; 0xfffffa90
 2a8:	61726700 	cmnvs	r2, r0, lsl #14
 2ac:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 2b0:	6961775f 	stmdbvs	r1!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
 2b4:	65725f74 	ldrbvs	r5, [r2, #-3956]!	; 0xfffff08c
 2b8:	00796461 	rsbseq	r6, r9, r1, ror #8
 2bc:	70617267 	rsbvc	r7, r1, r7, ror #4
 2c0:	5f636968 	svcpl	0x00636968
 2c4:	61656c63 	cmnvs	r5, r3, ror #24
 2c8:	63735f72 	cmnvs	r3, #456	; 0x1c8
 2cc:	6e656572 	mcrvs	5, 3, r6, cr5, cr2, {3}
 2d0:	6c656400 	cfstrdvs	mvd6, [r5], #-0
 2d4:	6d5f7961 	vldrvs.16	s15, [pc, #-194]	; 21a <startup-0x1ffffde6>	; <UNPREDICTABLE>
 2d8:	6f726369 	svcvs	0x00726369
 2dc:	624f7400 	subvs	r7, pc, #0, 8
 2e0:	7264006a 	rsbvc	r0, r4, #106	; 0x6a
 2e4:	6f5f7761 	svcvs	0x005f7761
 2e8:	63656a62 	cmnvs	r5, #401408	; 0x62000
 2ec:	72670074 	rsbvc	r0, r7, #116	; 0x74
 2f0:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 2f4:	65725f63 	ldrbvs	r5, [r2, #-3939]!	; 0xfffff09d
 2f8:	6e006461 	cdpvs	4, 0, cr6, cr0, cr1, {3}
 2fc:	6f706d75 	svcvs	0x00706d75
 300:	73746e69 	cmnvc	r4, #1680	; 0x690
 304:	766f6d00 	strbtvc	r6, [pc], -r0, lsl #26
 308:	626f5f65 	rsbvs	r5, pc, #404	; 0x194
 30c:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
 310:	61726700 	cmnvs	r2, r0, lsl #14
 314:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 318:	6972775f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
 31c:	635f6574 	cmpvs	pc, #116, 10	; 0x1d000000
 320:	616d6d6f 	cmnvs	sp, pc, ror #26
 324:	7300646e 	movwvc	r6, #1134	; 0x46e
 328:	64656570 	strbtvs	r6, [r5], #-1392	; 0xfffffa90
 32c:	4f500079 	svcmi	0x00500079
 330:	43454a42 	movtmi	r4, #23106	; 0x5a42
 334:	Address 0x00000334 is out of bounds.


Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <startup-0x1ef2f2dc>
   4:	4e472820 	cdpmi	8, 4, cr2, cr7, cr0, {1}
   8:	6f542055 	svcvs	0x00542055
   c:	20736c6f 	rsbscs	r6, r3, pc, ror #24
  10:	20726f66 	rsbscs	r6, r2, r6, ror #30
  14:	206d7241 	rsbcs	r7, sp, r1, asr #4
  18:	65626d45 	strbvs	r6, [r2, #-3397]!	; 0xfffff2bb
  1c:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  20:	6f725020 	svcvs	0x00725020
  24:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
  28:	2073726f 	rsbscs	r7, r3, pc, ror #4
  2c:	30322d39 	eorscc	r2, r2, r9, lsr sp
  30:	712d3931 			; <UNDEFINED> instruction: 0x712d3931
  34:	616d2d34 	cmnvs	sp, r4, lsr sp
  38:	29726f6a 	ldmdbcs	r2!, {r1, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
  3c:	322e3920 	eorcc	r3, lr, #32, 18	; 0x80000
  40:	3220312e 	eorcc	r3, r0, #-2147483637	; 0x8000000b
  44:	31393130 	teqcc	r9, r0, lsr r1
  48:	20353230 	eorscs	r3, r5, r0, lsr r2
  4c:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60
  50:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
  54:	415b2029 	cmpmi	fp, r9, lsr #32
  58:	612f4d52 			; <UNDEFINED> instruction: 0x612f4d52
  5c:	392d6d72 	pushcc	{r1, r4, r5, r6, r8, sl, fp, sp, lr}
  60:	6172622d 	cmnvs	r2, sp, lsr #4
  64:	2068636e 	rsbcs	r6, r8, lr, ror #6
  68:	69766572 	ldmdbvs	r6!, {r1, r4, r5, r6, r8, sl, sp, lr}^
  6c:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
  70:	37373220 	ldrcc	r3, [r7, -r0, lsr #4]!
  74:	5d393935 			; <UNDEFINED> instruction: 0x5d393935
	...

Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002b41 	andeq	r2, r0, r1, asr #22
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000021 	andeq	r0, r0, r1, lsr #32
  10:	2d533605 	ldclcs	6, cr3, [r3, #-20]	; 0xffffffec
  14:	0c06004d 	stceq	0, cr0, [r6], {77}	; 0x4d
  18:	01094d07 	tsteq	r9, r7, lsl #26
  1c:	01140412 	tsteq	r4, r2, lsl r4
  20:	03170115 	tsteq	r7, #1073741829	; 0x40000005
  24:	01190118 	tsteq	r9, r8, lsl r1
  28:	061e011a 			; <UNDEFINED> instruction: 0x061e011a

Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
   4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  10:	0000000c 	andeq	r0, r0, ip
  14:	00000000 	andeq	r0, r0, r0
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
  20:	0000001c 	andeq	r0, r0, ip, lsl r0
  24:	00000000 	andeq	r0, r0, r0
  28:	20000010 	andcs	r0, r0, r0, lsl r0
  2c:	00000020 	andeq	r0, r0, r0, lsr #32
  30:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  34:	41018e02 	tstmi	r1, r2, lsl #28
  38:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
  3c:	00000007 	andeq	r0, r0, r7
  40:	0000001c 	andeq	r0, r0, ip, lsl r0
  44:	00000000 	andeq	r0, r0, r0
  48:	20000030 	andcs	r0, r0, r0, lsr r0
  4c:	00000070 	andeq	r0, r0, r0, ror r0
  50:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
  54:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
  58:	200e4101 	andcs	r4, lr, r1, lsl #2
  5c:	00070d41 	andeq	r0, r7, r1, asr #26
  60:	0000001c 	andeq	r0, r0, ip, lsl r0
  64:	00000000 	andeq	r0, r0, r0
  68:	200000a0 	andcs	r0, r0, r0, lsr #1
  6c:	00000070 	andeq	r0, r0, r0, ror r0
  70:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
  74:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
  78:	200e4101 	andcs	r4, lr, r1, lsl #2
  7c:	00070d41 	andeq	r0, r7, r1, asr #26
  80:	0000001c 	andeq	r0, r0, ip, lsl r0
  84:	00000000 	andeq	r0, r0, r0
  88:	20000110 	andcs	r0, r0, r0, lsl r1
  8c:	0000008a 	andeq	r0, r0, sl, lsl #1
  90:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  94:	41018e02 	tstmi	r1, r2, lsl #28
  98:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
  9c:	00000007 	andeq	r0, r0, r7
  a0:	00000018 	andeq	r0, r0, r8, lsl r0
  a4:	00000000 	andeq	r0, r0, r0
  a8:	2000019a 	mulcs	r0, sl, r1
  ac:	00000036 	andeq	r0, r0, r6, lsr r0
  b0:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  b4:	41018e02 	tstmi	r1, r2, lsl #28
  b8:	0000070d 	andeq	r0, r0, sp, lsl #14
  bc:	00000018 	andeq	r0, r0, r8, lsl r0
  c0:	00000000 	andeq	r0, r0, r0
  c4:	200001d0 	ldrdcs	r0, [r0], -r0	; <UNPREDICTABLE>
  c8:	00000038 	andeq	r0, r0, r8, lsr r0
  cc:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  d0:	41018e02 	tstmi	r1, r2, lsl #28
  d4:	0000070d 	andeq	r0, r0, sp, lsl #14
  d8:	0000001c 	andeq	r0, r0, ip, lsl r0
  dc:	00000000 	andeq	r0, r0, r0
  e0:	20000208 	andcs	r0, r0, r8, lsl #4
  e4:	0000004c 	andeq	r0, r0, ip, asr #32
  e8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  ec:	41018e02 	tstmi	r1, r2, lsl #28
  f0:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
  f4:	00000007 	andeq	r0, r0, r7
  f8:	0000001c 	andeq	r0, r0, ip, lsl r0
  fc:	00000000 	andeq	r0, r0, r0
 100:	20000254 	andcs	r0, r0, r4, asr r2
 104:	00000040 	andeq	r0, r0, r0, asr #32
 108:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 10c:	41018e02 	tstmi	r1, r2, lsl #28
 110:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 114:	00000007 	andeq	r0, r0, r7
 118:	0000001c 	andeq	r0, r0, ip, lsl r0
 11c:	00000000 	andeq	r0, r0, r0
 120:	20000294 	mulcs	r0, r4, r2
 124:	00000050 	andeq	r0, r0, r0, asr r0
 128:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 12c:	41018e02 	tstmi	r1, r2, lsl #28
 130:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 134:	00000007 	andeq	r0, r0, r7
 138:	0000001c 	andeq	r0, r0, ip, lsl r0
 13c:	00000000 	andeq	r0, r0, r0
 140:	200002e4 	andcs	r0, r0, r4, ror #5
 144:	00000050 	andeq	r0, r0, r0, asr r0
 148:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 14c:	41018e02 	tstmi	r1, r2, lsl #28
 150:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 154:	00000007 	andeq	r0, r0, r7
 158:	0000001c 	andeq	r0, r0, ip, lsl r0
 15c:	00000000 	andeq	r0, r0, r0
 160:	20000334 	andcs	r0, r0, r4, lsr r3
 164:	00000062 	andeq	r0, r0, r2, rrx
 168:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 16c:	41018e02 	tstmi	r1, r2, lsl #28
 170:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 174:	00000007 	andeq	r0, r0, r7
 178:	00000018 	andeq	r0, r0, r8, lsl r0
 17c:	00000000 	andeq	r0, r0, r0
 180:	20000396 	mulcs	r0, r6, r3
 184:	00000066 	andeq	r0, r0, r6, rrx
 188:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 18c:	41018e02 	tstmi	r1, r2, lsl #28
 190:	0000070d 	andeq	r0, r0, sp, lsl #14
 194:	0000001c 	andeq	r0, r0, ip, lsl r0
 198:	00000000 	andeq	r0, r0, r0
 19c:	200003fc 	strdcs	r0, [r0], -ip
 1a0:	00000094 	muleq	r0, r4, r0
 1a4:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 1a8:	41018e02 	tstmi	r1, r2, lsl #28
 1ac:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 1b0:	00000007 	andeq	r0, r0, r7
 1b4:	0000001c 	andeq	r0, r0, ip, lsl r0
 1b8:	00000000 	andeq	r0, r0, r0
 1bc:	20000490 	mulcs	r0, r0, r4
 1c0:	00000080 	andeq	r0, r0, r0, lsl #1
 1c4:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 1c8:	41018e02 	tstmi	r1, r2, lsl #28
 1cc:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 1d0:	00000007 	andeq	r0, r0, r7
 1d4:	0000001c 	andeq	r0, r0, ip, lsl r0
 1d8:	00000000 	andeq	r0, r0, r0
 1dc:	20000510 	andcs	r0, r0, r0, lsl r5
 1e0:	00000040 	andeq	r0, r0, r0, asr #32
 1e4:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 1e8:	41018e02 	tstmi	r1, r2, lsl #28
 1ec:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 1f0:	00000007 	andeq	r0, r0, r7
 1f4:	0000001c 	andeq	r0, r0, ip, lsl r0
 1f8:	00000000 	andeq	r0, r0, r0
 1fc:	20000550 	andcs	r0, r0, r0, asr r5
 200:	00000046 	andeq	r0, r0, r6, asr #32
 204:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 208:	41018e02 	tstmi	r1, r2, lsl #28
 20c:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 210:	00000007 	andeq	r0, r0, r7
 214:	0000001c 	andeq	r0, r0, ip, lsl r0
 218:	00000000 	andeq	r0, r0, r0
 21c:	20000596 	mulcs	r0, r6, r5
 220:	0000002a 	andeq	r0, r0, sl, lsr #32
 224:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 228:	41018e02 	tstmi	r1, r2, lsl #28
 22c:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 230:	00000007 	andeq	r0, r0, r7
 234:	00000018 	andeq	r0, r0, r8, lsl r0
 238:	00000000 	andeq	r0, r0, r0
 23c:	200005c0 	andcs	r0, r0, r0, asr #11
 240:	00000068 	andeq	r0, r0, r8, rrx
 244:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 248:	41018e02 	tstmi	r1, r2, lsl #28
 24c:	0000070d 	andeq	r0, r0, sp, lsl #14
 250:	0000001c 	andeq	r0, r0, ip, lsl r0
 254:	00000000 	andeq	r0, r0, r0
 258:	20000628 	andcs	r0, r0, r8, lsr #12
 25c:	00000014 	andeq	r0, r0, r4, lsl r0
 260:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 264:	41018e02 	tstmi	r1, r2, lsl #28
 268:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 26c:	00000007 	andeq	r0, r0, r7
 270:	00000020 	andeq	r0, r0, r0, lsr #32
 274:	00000000 	andeq	r0, r0, r0
 278:	2000063c 	andcs	r0, r0, ip, lsr r6
 27c:	0000016c 	andeq	r0, r0, ip, ror #2
 280:	84140e41 	ldrhi	r0, [r4], #-3649	; 0xfffff1bf
 284:	86048505 	strhi	r8, [r4], -r5, lsl #10
 288:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
 28c:	300e4101 	andcc	r4, lr, r1, lsl #2
 290:	00070d41 	andeq	r0, r7, r1, asr #26
 294:	00000018 	andeq	r0, r0, r8, lsl r0
 298:	00000000 	andeq	r0, r0, r0
 29c:	200007a8 	andcs	r0, r0, r8, lsr #15
 2a0:	00000028 	andeq	r0, r0, r8, lsr #32
 2a4:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 2a8:	41018e02 	tstmi	r1, r2, lsl #28
 2ac:	0000070d 	andeq	r0, r0, sp, lsl #14
 2b0:	0000001c 	andeq	r0, r0, ip, lsl r0
 2b4:	00000000 	andeq	r0, r0, r0
 2b8:	200007d0 	ldrdcs	r0, [r0], -r0	; <UNPREDICTABLE>
 2bc:	00000034 	andeq	r0, r0, r4, lsr r0
 2c0:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 2c4:	41018e02 	tstmi	r1, r2, lsl #28
 2c8:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 2cc:	00000007 	andeq	r0, r0, r7
 2d0:	0000000c 	andeq	r0, r0, ip
 2d4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 2d8:	7c010001 	stcvc	0, cr0, [r1], {1}
 2dc:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 2e0:	0000000c 	andeq	r0, r0, ip
 2e4:	000002d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 2e8:	20000805 	andcs	r0, r0, r5, lsl #16
 2ec:	0000010a 	andeq	r0, r0, sl, lsl #2
